[
    {
        "Example": 1,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nclass NestingLevel {\n    int depth;\n    int lastToken;\n    int scope;\n\n    public NestingLevel(int d, int l, int s) {\n        depth = d;\n        lastToken = l;\n        scope = s;\n    }\n}\n\npublic class Refactor {\n    private boolean isInScopeChain = false;\n    private int lastTokenCount = 0;\n    private ArrayList<NestingLevel> nestingLevels;\n\n    public void collectFuncNodes(ObjArray funcObjects, ArrayList<Integer> functionBracePositions,\n            int functionNum, ArrayList<HashMap<String, String>> functionVarMappings, int sourceCompress) {\n        ArrayList<Integer> funcNodes = new ArrayList<>();\n        nestingLevels = new ArrayList<>();\n\n        int scopeCnt = 0;\n        int nodeCnt = 0;\n        int currentScope = 0;\n        int minCompress = 0;\n        int maxCompress = 0;\n\n        for (int i = 0, len = funcObjects.size(); i < len; i++) {\n            Object obj = funcObjects.get(i);\n            if (obj instanceof Map) {\n                Map<String, Object> item = (Map<String, Object>) obj;\n\n                if (item.containsKey(\"type\") && item.get(\"type\").toString().equals(\"FunctionDeclaration\")) {\n                    funcNodes.add(i);\n                    String id = (String) item.get(\"id\");\n                    ArrayList<Map<String, String>> arr = new ArrayList<>();\n                    functionVarMappings.add(arr);\n\n                    String[] scopes = (String[]) item.getOrDefault(\"scopes\", new String[0]);\n                    for (int k = 0, klen = scopes.length; k < klen; k++) {\n                        arr.add(new HashMap<>());\n                    }\n                }\n                if (item.containsKey(\"start\")) {\n                    nodeCnt++;\n                    System.out.println(item.get(\"start\"));\n                }\n            }\n            if (obj instanceof ArrayList) {\n                ArrayList<Object> arr = (ArrayList<Object>) obj;\n\n                for (int j = 0, jlen = arr.size(); j < jlen; j++) {\n                    Object subObj = arr.get(j);\n\n                    if (subObj instanceof ObjArray) {\n                        ObjArray subArr = (ObjArray) subObj;\n                        if (!subArr.isArray()) {\n                            continue;\n                        }\n                        if (subArr.size() > 0) {\n                            Map<String, String> item = subArr.getArrayItem(sourceCompress);\n\n                            if (item != null) {\n                                if (item.containsKey(\"type\") && item.get(\"type\").toString().equals(\"Identifier\")) {\n                                    if (!isInScopeChain) {\n                                        String id = item.get(\"name\");\n                                        int scopelvl = Integer.parseInt(item.get(\"scope\"));\n\n                                        if (scopelvl == currentScope) {\n                                            HashMap<String, String> mapping = functionVarMappings.get(functionNum);\n                                            mapping.get(functionBracePositions.get(functionNum)).put(id, id);\n                                        } else {\n                                            if (scopelvl > currentScope) {\n                                                scopeCnt++;\n                                                isInScopeChain = true;\n                                            } else {\n                                                leaveNestingLevel();\n                                            }\n                                            reset();\n                                            HashMap<String, String> mapping = functionVarMappings.get(functionNum);\n                                            mapping.get(functionBracePositions.get(functionNum)).put(id, id);\n                                            enterNestingLevel(scopelvl);\n                                        }\n                                    } else {\n                                        System.out.println(item);\n                                        isInScopeChain = false;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        minCompress = sourceCompress;\n        for (NestingLevel level : nestingLevels) {\n            if (level.scope > minCompress) {\n                minCompress = level.scope;\n            }\n        }\n        System.out.println(functionVarMappings + \", \" + minCompress);\n    }\n\n    public void enterNestingLevel(int scope) {\n        nestingLevels.add(new NestingLevel(nestingLevels.size(), lastTokenCount, scope));\n    }\n\n    public void leaveNestingLevel() {\n        NestingLevel lastLevel = nestingLevels.get(nestingLevels.size() - 1);\n        System.out.println(lastLevel.scope);\n        int offset = lastLevel.scope + 1;\n        HashMap<String, String> mapping = functionVarMappings.get(lastLevel.scope);\n        Map.Entry<String, String> id = mapping.entrySet().iterator().next();\n\n        System.out.println(id.getValue() + \", \");\n    }\n\n    public void reset() {\n        lastTokenCount = 0;\n    }\n\n    public String getMappedToken(int start, int end) {\n        String token = \"\";\n\n        return token;\n    }\n\n    public String getPreviousTokenMapping(int funcPos, int position) {\n        String token = \"\";\n\n        return token;\n    }\n}\n```"
    },
    {
        "Example": 2,
        "Generated Java Code": "```java\nimport com.google.common.primitives.Bytes;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hasher;\nimport com.google.common.hash.Hashing;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.math.BigInteger;\n\npublic class FileSha256 {\n  private final Sha256Hash hash;\n\n  protected FileSha256(Sha256Hash hash) {\n    this.hash = hash;\n  }\n\n  public static FileSha256 create(File file) throws IOException {\n    final HashFunction sha256 = Hashing.sha256();\n    final Hasher hasher = sha256.newHasher();\n    FileInputStream stream = new FileInputStream(file);\n    try {\n      byte[] buffer = new byte[16384];\n      int bytesRead;\n      while ((bytesRead = stream.read(buffer)) != -1) {\n        hasher.putBytes(buffer, 0, bytesRead);\n      }\n    } finally {\n      stream.close();\n    }\n    return new FileSha256(Sha256Hash.fromBytes(hasher.hash().asBytes()));\n  }\n\n  public static final FileSha256 ZERO_HASH = new FileSha256(Sha256Hash.fromBytes(new byte[32]));\n\n  @Override\n  public int hashCode() {\n    return hash.hashCode();\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (!(obj instanceof FileSha256)) {\n      return false;\n    }\n    return hash.equals(((FileSha256) obj).hash);\n  }\n\n  @Override\n  public String toString() {\n    return hash.toString();\n  }\n\n  public int compareTo(FileSha256 hash) {\n    return Bytes.compare(this.hash.getBytes(), hash.hash.getBytes());\n  }\n\n  public byte[] getBytes() {\n    return hash.getBytes();\n  }\n\n  public BigInteger toBigInteger() {\n    return hash.toBigInteger();\n  }\n\n  public Sha256Hash duplicate() {\n    return hash.duplicate();\n  }\n}\n```"
    },
    {
        "Example": 3,
        "Generated Java Code": "```java\nimport java.util.UUID;\n\npublic class MYCLASS {\n    private static final Logger LOG = Logger.getLogger(MYCLASS.class.getName());\n\n    private String id;\n\n    public MYCLASS(boolean canCreate) {\n        if (canCreate) {\n            this.id = UUID.randomUUID().toString();\n        }\n    }\n\n    public String readObjectID() {\n        return id;\n    }\n\n    public String createObjectID() {\n        if (id == null) {\n            id = UUID.randomUUID().toString();\n        }\n        return id;\n    }\n\n    public String generateID() {\n        return UUID.randomUUID().toString();\n    }\n\n    @Override\n    public String toString() {\n        return \"MYCLASS{\" +\n                \"id='\" + id + '\\'' +\n                '}';\n    }\n}\n```"
    },
    {
        "Example": 4,
        "Generated Java Code": "```java\nimport org.hamcrest.Description;\nimport org.hamcrest.Factory;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeDiagnosingMatcher;\n\npublic class GreaterThan<T extends Comparable<T>> extends TypeSafeDiagnosingMatcher<T> {\n\n    private final T value;\n\n    public GreaterThan(T value) {\n        this.value = value;\n    }\n\n    @Factory\n    public static <T extends Comparable<T>> Matcher<T> greaterThan(T value) {\n        return new GreaterThan<T>(value);\n    }\n\n    @Override\n    protected boolean matchesSafely(T item, Description mismatchDescription) {\n        return item.compareTo(value) > 0;\n    }\n\n    @Override\n    public void describeTo(Description description) {\n        description.appendText(\"a value greater than \").appendValue(value);\n    }\n}\n```"
    },
    {
        "Example": 5,
        "Generated Java Code": "```java\npublic class Fraction {\n    private int num;\n    private int denom;\n\n    public Fraction(int num, int denom) {\n        this.num = num;\n        this.denom = denom;\n    }\n\n    public int getDenom() {\n        return denom;\n    }\n\n    public boolean isOne() {\n        return num == 1 && denom == 1;\n    }\n\n    public int getScaled(int factor) {\n        return num * factor / denom;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Fraction fraction = (Fraction) o;\n        return num == fraction.num && denom == fraction.denom;\n    }\n\n    public int getNum() {\n        return num;\n    }\n}\n```"
    },
    {
        "Example": 6,
        "Generated Java Code": "```java\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.cloud.bigtable.hbase.BigtableConfiguration;\nimport org.apache.hadoop.hbase.TableName;\nimport org.apache.hadoop.hbase.client.Connection;\nimport org.apache.hadoop.hbase.client.Put;\nimport org.apache.hadoop.hbase.client.Table;\nimport org.apache.hadoop.hbase.util.Bytes;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class WriteGenericJSON {\n  private static final byte[] COLUMN_FAMILY_NAME = Bytes.toBytes(\"tweet\");\n\n  public static void writeGenericJSON(String projectId, String instanceId, String tableId) {\n    // String projectId = \"my-project-id\";\n    // String instanceId = \"my-instance-id\";\n    // String tableId = \"mobile-time-series\";\n\n    try (Connection connection = BigtableConfiguration.connect(projectId, instanceId)) {\n      Table table = connection.getTable(TableName.valueOf(Bytes.toBytes(tableId)));\n      long timestamp = System.currentTimeMillis() * 1000; // current time in microseconds\n      byte[] rowKey = Bytes.toBytes(\"tablet#a0b81f74#20190501\");\n      Put put = new Put(rowKey);\n\n      Map<String, String> fields = new HashMap<>();\n      fields.put(\"lat\", \"37.33233141\");\n      fields.put(\"id_str\", \"1125537471509590017\");\n      fields.put(\"screen_name\", null);\n      fields.put(\"place_name\", null);\n      fields.put(\"image\", null);\n      fields.put(\"user_name\", \"@bglick\");\n      fields.put(\"lng\", \"-122.0312186\");\n      fields.put(\"created_at\", \"Mon May 06 19:34:05 +0000 2019\");\n      fields.put(\"loc_radius\", null);\n      fields.put(\"user_id\", \"15245514\");\n      fields.put(\"text\", \"Major incident on the # A1 # M111 # London\");\n      ArrayList<String> extras = new ArrayList<>();\n      extras.add(\"firstExtra\");\n      extras.add(\"secondExtra\");\n\n      // Build a generic JSON object, filling in the fields\n      GenericJSONBuilder builder = new GenericJSONBuilder(timestamp);\n      builder.setIdStr(fields.get(\"id_str\")).setPlaceName(fields.get(\"place_name\")).addText(fields.get(\"text\"))\n          .addField(\"image\", fields.get(\"image\")).setUserid(fields.get(\"user_id\")).addExtras(extras);\n      // Set geospatial coordinate\n      if (fields.containsKey(\"lat\") && fields.containsKey(\"lng\")) {\n        builder.addCoordinate(Double.parseDouble(fields.get(\"lat\")), Double.parseDouble(fields.get(\"lng\")));\n      }\n      // Set author information\n      if (fields.containsKey(\"screen_name\")) {\n        builder.setAuthor(fields.get(\"screen_name\"));\n      }\n      if (fields.containsKey(\"user_name\")) {\n        builder.setAuthor(fields.get(\"user_name\"));\n      }\n      // Set locational radius, if present\n      if (fields.containsKey(\"loc_radius\")) {\n        builder.setCoordinateRadius(Integer.parseInt(fields.get(\"loc_radius\")));\n      }\n      // Set created time\n      if (fields.containsKey(\"created_at\")) {\n        builder.setCreatedTime(new Date(fields.get(\"created_at\")));\n      }\n\n      // Insert the data into a Put\n      put.add(COLUMN_FAMILY_NAME, Bytes.toBytes(\"generic_data\"),\n          Bytes.toBytes(builder.buildFieldJSON().toString()));\n      table.put(put);\n\n      System.out.printf(\"Successfully wrote row %s%n\", Bytes.toString(put.getRow()));\n    } catch (IOException | JSONException e) {\n      System.out.println(\"Error during WriteGenericJSON: \\n\" + e.toString());\n    }\n  }\n\n  public static class GenericJSONBuilder {\n    // core\n    private JSONObject genericJSON = new JSONObject();\n    private long timestamp;\n\n    // optional\n    private String idStr;\n    private String placeName;\n    private JSONArray text = new JSONArray();\n    private JSONObject coordinatesObj;\n    private JSONObject authorObj;\n    private int coordinateRadius;\n    private Date createdTime;\n    private ArrayList<String> extras = new ArrayList<>();\n\n    public GenericJSONBuilder(long timestamp) {\n      this.timestamp = timestamp;\n    }\n\n    public GenericJSONBuilder setIdStr(String idStr) {\n      this.idStr = idStr;\n      return this;\n    }\n\n    public GenericJSONBuilder setPlaceName(String placeName) {\n      this.placeName = placeName;\n      return this;\n    }\n\n    public GenericJSONBuilder addText(String tweetText) {\n      this.text.put(tweetText);\n      return this;\n    }\n\n    public GenericJSONBuilder addField(String name, String value) {\n      this.genericJSON.put(name, value);\n      return this;\n    }\n\n    public GenericJSONBuilder setUserid(String userId) {\n      getJSONObject().put(\"userid\", userId);\n      return this;\n    }\n\n    public JSONObject getJSONObject() {\n      return this.genericJSON;\n    }\n\n    public GenericJSONBuilder setCreatedTime(Date createdTime) {\n      this.createdTime = createdTime;\n      return this;\n    }\n\n    public GenericJSONBuilder setCoordinate(double lat, double lng) {\n      if (this.coordinatesObj == null) {\n        this.coordinatesObj = new JSONObject();\n      }\n      this.coordinatesObj.put(\"latitude\", lat);\n      this.coordinatesObj.put(\"longitude\", lng);\n      return this;\n    }\n\n    public GenericJSONBuilder setCoordinateRadius(int radius) {\n      this.coordinateRadius = radius;\n      return this;\n    }\n\n    public GenericJSONBuilder setAuthor(String author) {\n      if (this.authorObj == null) {\n        this.authorObj = new JSONObject();\n      }\n      this.authorObj.put(\"name\", author);\n      return this;\n    }\n\n    public GenericJSONBuilder addExtras(ArrayList<String> extras) {\n      JSONArray extrasArr = new JSONArray();\n      for (String extra : extras) {\n        extrasArr.put(extra);\n      }\n      this.genericJSON.put(\"extras\", extrasArr);\n      return this;\n    }\n\n    public String buildFieldJSON() throws JSONException {\n      JSONObject builtObject = getJSONObject();\n      if (idStr != null) {\n        builtObject.put(\"id_str\", idStr);\n      }\n      if (placeName != null) {\n        builtObject.put(\"place_name\", placeName);\n      }\n      if (text != null && text.length() > 0) {\n        builtObject.put(\"text\", text);\n      }\n      if (coordinatesObj != null) {\n        builtObject.put(\"coordinates\", coordinatesObj);\n        if (coordinateRadius > 0) {\n          coordinatesObj.put(\"coordinate_radius\", coordinateRadius);\n        }\n      }\n      if (authorObj != null) {\n        builtObject.put(\"author\", authorObj);\n      }\n      if (createdTime != null) {\n        builtObject.put(\"created_at\", createdTime);\n      }\n      return builtObject.toString(2);\n    }\n  }\n}  \n```"
    },
    {
        "Example": 7,
        "Generated Java Code": "```java\npublic void stop(BundleContext bundleContext) throws Exception {\n    if(events != null && sender != null) {\n        events.removeListener(sender);\n    }\n    if(factories != null) {\n        for(Map.Entry<String, XMPPConnectionFactory> entry : factories.entrySet()) {\n            for(XMPPConnection conn : entry.getValue().getConnections()) {\n                conn.disconnect();\n            }\n        }\n    }\n}\n```"
    },
    {
        "Example": 8,
        "Generated Java Code": "```java\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\n\nimport io.github.resilience4j.core.IntervalFunction;\nimport io.vavr.CheckedRunnable;\nimport io.vavr.CheckedSupplier;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.time.Duration;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport javax.annotation.CheckReturnValue;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class BufferedBlockInputStreamSeekTest {\n  private static final int BUFFER_SIZE = 10;\n  private static final byte[] BUFFER =\n      new byte[] {\n        (byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04,\n        (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09\n      };\n  private static final int BLOCK_SIZE = 4;\n\n  @Mock private InputStream innerInputStream;\n\n  @Mock private ScheduledExecutorService executorService;\n\n  @Mock private Retry.Context context;\n\n  @Captor private ArgumentCaptor<CheckedRunnable> actionCaptor;\n\n  @Captor private ArgumentCaptor<CheckedSupplier<Boolean>> conditionCaptor;\n\n  @Captor private ArgumentCaptor<Predicate<Throwable>> retryOnPredicateCaptor;\n\n  @Captor private ArgumentCaptor<Function<Throwable, Duration>> retryIntervalFunctionCaptor;\n\n  private BufferedBlockInputStream mTestStream;\n\n  @Before\n  public void before() throws IOException {\n    mTestStream = new BufferedBlockInputStream(innerInputStream, executorService, BUFFER_SIZE, BLOCK_SIZE);\n    mTestStream.read(BUFFER);\n  }\n\n  @After\n  public void after() throws IOException {\n    assertThat(mTestStream.available()).isEqualTo(0);\n    mTestStream.close();\n  }\n\n  @Test\n  public void bufferRead() throws Throwable {\n    // Seek back to the beginning\n    mTestStream.seek(0);\n\n    // Read 5 bytes from the stream\n    byte[] b = new byte[5];\n    assertThat(mTestStream.read(b, 0, 5)).isEqualTo(5);\n\n    // Verify that the underlying stream was read from once\n    verify(innerInputStream, times(1)).read(actionCaptor.capture());\n    CheckedRunnable action = actionCaptor.getValue();\n    // The read should have been executed exactly once\n    action.run();\n  }\n\n  @Test\n  public void skip() throws Throwable {\n    // Seek back to the beginning\n    mTestStream.seek(0);\n\n    // Skip 5 bytes from the stream\n    assertThat(mTestStream.skip(5)).isEqualTo(5);\n\n    // Verify that the underlying stream was read from once\n    verify(innerInputStream, times(1)).read(actionCaptor.capture());\n    CheckedRunnable action = actionCaptor.getValue();\n    // The read should have been executed exactly once\n    action.run();\n  }\n\n  @Test\n  public void bulkRead() throws Throwable {\n    // Seek back to the beginning\n    mTestStream.seek(0);\n\n    // Read all 10 bytes from the stream\n    byte[] b = new byte[10];\n    assertThat(mTestStream.read(b, 0, 10)).isEqualTo(10);\n\n    // Verify that the underlying stream was read from three times\n    verify(innerInputStream, times(3)).read(actionCaptor.capture());\n    CheckedRunnable action1 = actionCaptor.getAllValues().get(0);\n    CheckedRunnable action2 = actionCaptor.getAllValues().get(1);\n    CheckedRunnable action3 = actionCaptor.getAllValues().get(2);\n    // The first two reads should have been executed exactly once\n    action1.run();\n    action2.run();\n    // The third read should have been executed only once\n    action3.run();\n  }\n\n  @Test\n  public void singleByteRead() throws Throwable {\n    // Seek back to the beginning\n    mTestStream.seek(0);\n\n    // Read a single byte from the stream\n    assertThat(mTestStream.read()).isEqualTo(0x00);\n\n    // Verify that the underlying stream was read from once\n    verify(innerInputStream, times(1)).read(actionCaptor.capture());\n    CheckedRunnable action = actionCaptor.getValue();\n    // The read should have been executed exactly once\n    action.run();\n  }\n\n  @Test\n  public void singleByteReadWithTimeout() throws Throwable {\n    // Seek back to the beginning\n    mTestStream.seek(0);\n\n    // Set a timeout of 10 ms\n    mTestStream.setTimeout(10, TimeUnit.MILLISECONDS);\n\n    // Read a single byte from the stream\n    assertThat(mTestStream.read()).isEqualTo(0x00);\n\n    // Verify that the executor service was scheduled to run once\n    verify(executorService, times(1)).scheduleAtFixedRate(actionCaptor.capture(), conditionCaptor.capture(),\n        anyLong(), anyLong(), any(TimeUnit.class));\n\n    // Get the action and condition\n    CheckedRunnable action = actionCaptor.getValue();\n    CheckedSupplier<Boolean> condition = conditionCaptor.getValue();\n\n    // The action should have been executed exactly once\n    action.run();\n\n    // The condition should have been checked exactly once\n    assertThat(condition.get()).isFalse();\n  }\n\n  @Test\n  public void singleByteReadWithTimeoutAndRetry() throws Throwable {\n    // Seek back to the beginning\n    mTestStream.seek(0);\n\n    // Set a timeout of 10 ms\n    mTestStream.setTimeout(10, TimeUnit.MILLISECONDS);\n\n    // Set a retry policy\n    mTestStream.retry(Retry.anyOf(IOException.class, TimeoutException.class), Retry.fixedDelay(100, TimeUnit.MILLISECONDS));\n\n    // Read a single byte from the stream\n    assertThat(mTestStream.read()).isEqualTo(0x00);\n\n    // Verify that the executor service was scheduled to run once\n    verify(executorService, times(1)).scheduleAtFixedRate(actionCaptor.capture(), conditionCaptor.capture(),\n        anyLong(), anyLong(), any(TimeUnit.class));\n\n    // Get the action and condition\n    CheckedRunnable action = actionCaptor.getValue();\n    CheckedSupplier<Boolean> condition = conditionCaptor.getValue();\n\n    // The action should have been executed exactly once\n    action.run();\n\n    // The condition should have been checked exactly once\n    assertThat(condition.get()).isFalse();\n\n    // Verify that the retry policy was applied\n    verify(context, times(1)).onNextAttempt(retryOnPredicateCaptor.capture(), retryIntervalFunctionCaptor.capture());\n\n    // Get the retry on predicate and retry interval function\n    Predicate<Throwable> retryOnPredicate = retryOnPredicateCaptor.getValue();\n    Function<Throwable, Duration> retryIntervalFunction = retryIntervalFunctionCaptor.getValue();\n\n    // The retry on predicate should match the retry policy\n    assertThat(retryOnPredicate.test(any(IOException.class))).isTrue();\n    assertThat(retryOnPredicate.test(any(TimeoutException.class))).isTrue();\n\n    // The retry interval function should match the retry policy\n    assertThat(retryIntervalFunction.apply(any(IOException.class))).isEqualTo(Duration.ofMillis(100));\n    assertThat(retryIntervalFunction.apply(any(TimeoutException.class))).isEqualTo(Duration.ofMillis(100));\n  }\n\n  @CheckReturnValue\n  private <T> T any(Class<T> clazz) {\n    return clazz.cast(null);\n  }\n}\n```"
    },
    {
        "Example": 9,
        "Generated Java Code": "```java  \n\nimport java.lang.ref.Unreachable;\nimport java.lang.ref.WeakReference;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\npublic final class GcAssertions {\n  private GcAssertions() {}\n  /**\n   * Tries to perform a `` full '' garbage collection cycle including processing of weak references and\n   * invocation of finalize methods and waits for it to complete. Ensures that at least one weak\n   * reference has been cleared and one finalize method has been run before thismethod returns. This\n   * method may be useful when testing the garbage collection mechanism itself, or inhibiting a\n   * spontaneous gc initiation in subsequent code. In contrast, a plain call to\n   * java.lang.System#gc does not ensure finalizationprocessing and may run concurrently, for example,\n   * if the jvm flag -Xmx+ExplicitGCInvokesConcurrent is used. Whenever possible, it is preferable to\n   * test directly for some observable change resulting from gc, as with #awaitClear. Because there are\n   * no guarantees for the order of gc finalization processing, there may still be some unfinished work\n   * for the gc to do after this method returns. This method does not create any memory pressure as\n   * would be required to cause soft references to be processed.\n   *\n   * @param placeHolder a place holder to keep this object from being gc-ed.\n   * @param timeoutSeconds the maximum number of seconds to wait for gc to complete\n   */\n  public static void await(Object placeHolder, long timeoutSeconds) {\n    awaitClear(placeHolder, timeoutSeconds);\n    // Wait for processing of our un-referenced latch.\n    LatchFinalizer latch = createUnreachableLatchFinalizer();\n    awaitDone(latch, timeoutSeconds * 1000);\n    // Ensure the gc has done its job by waiting on the latch.\n    if (!isDone(latch, timeoutSeconds * 1000)) {\n      throw formatRuntimeException(\"gc did not complete as requested\");\n    };\n  }\n\n  private static LatchFinalizer createUnreachableLatchFinalizer() {\n    LatchFinalizer latch = new LatchFinalizer();\n    WeakReference<LatchFinalizer> ref = new WeakReference<>(latch);\n    latch = null;\n    if (ref.get() == null) {\n      // We are unreachable at this point.\n      return ref.get();\n    }\n    throw formatRuntimeException(\"Creating an unreachable latch failed\");\n  }\n\n  /** Wait for `latch` to reach zero. */\n  private static void awaitDone(LatchFinalizer latch, long timeoutMicros) {\n    awaitDone(latch.latch, timeoutMicros);\n  }\n\n  /** Wait for the latch to reach zero. */\n  private static void awaitDone(CountDownLatch latch, long timeoutMicros) {\n    try {\n      if (!latch.await(timeoutMicros, TimeUnit.MICROSECONDS)) {\n        throw formatRuntimeException(\"gc did not finish in time\");\n      }\n    } catch (InterruptedException e) {\n      throw formatRuntimeException(e, \"Interrupted\");\n    }\n  }\n\n  /** Is the latch at zero. */\n  private static boolean isDone(LatchFinalizer latch, long timeoutMicros) {\n    return isDone(latch.latch, timeoutMicros);\n  }\n\n  /** Is the latch at zero. */\n  private static boolean isDone(CountDownLatch latch, long timeoutMicros) {\n    try {\n      return latch.await(timeoutMicros, TimeUnit.MICROSECONDS);\n    } catch (InterruptedException e) {\n      throw formatRuntimeException(e, \"Interrupted\");\n    }\n  }\n\n  private static RuntimeException formatRuntimeException(String message) {\n    return formatRuntimeException(null, message);\n  }\n\n  private static RuntimeException formatRuntimeException(Throwable e, String message) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(message);\n    if (e != null) {\n      sb.append(\"\\n   caused by: \");\n      sb.append(e.toString());\n    }\n    return new RuntimeException(sb.toString());\n  }\n\n  static class LatchFinalizer extends Unreachable {\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    LatchFinalizer() {\n      super();\n    }\n\n    @Override\n    public void finalize() {\n      super.finalize();\n      latch.countDown();\n    }\n  }\n}  \n```"
    },
    {
        "Example": 10,
        "Generated Java Code": "```java  \nimport org.junit.After;\nimport org.junit.Before;\n\nimport java.io.IOException;\n\npublic class LocalTransferManagerIntegrationTest {\n\n  private TransferManager mManager;\n  private String BUCKET_NAME = \"default\";\n  private String KEY = \"random.txt\";\n  private S3ADirectOutputStream mStream;\n\n  @Before\n  public void setUp() throws IOException {\n    // Provide credentials by setting environment variables as shown in AWS SDK for Java\n    // documentation. If you provide credentials in other ways (e.g. using an instance profile)\n    // you will need to modify this so the SDK can find the credentials.\n    mManager = AmazonS3ClientBuilder.defaultClient();\n    mStream = (S3ADirectOutputStream) mManager.openDirectOutputStream(BUCKET_NAME, KEY, \"text/plain\");\n  }\n\n  @After\n  public void tearDown() throws IOException {\n    // Shutting down client and deleting test file\n    mStream.close();\n    mManager.shutdown();\n    mManager.deleteObject(BUCKET_NAME, KEY);\n  }\n\n  //...\n}  \n```"
    },
    {
        "Example": 11,
        "Generated Java Code": "```java\nimport com.google.common.base.Preconditions;\nimport com.google.common.base.Strings;\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.ListMultimap;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class FunctionDocs {\n  // A string which will join all the lines in the documentation\n  protected static final String LINE_SEPARATOR = \"\\n\";\n\n  // The functions comment string\n  private String docs;\n  // A multimap used to store the comments for the parameters\n  private ListMultimap<String, String> parameterComments;\n\n  public FunctionDocs() {\n    this.docs = \"\";\n    this.parameterComments = LinkedListMultimap.create();\n  }\n\n  public FunctionDocs(String text) {\n    this();\n    appendComment(text);\n  }\n\n  public String getComments() {\n    StringBuilder builder = new StringBuilder();\n    String temp = docs;\n    String parameterComment = Strings.emptyToNull(getParameterCommentsAsString());\n    if (!Strings.isNullOrEmpty(parameterComment)) {\n      temp += LINE_SEPARATOR + LINE_SEPARATOR + parameterComment;\n    }\n    builder.append(temp);\n    return builder.toString();\n  }\n\n  private String getParameterCommentsAsString() {\n    List<String> lines = new LinkedList<>();\n    for (String key : parameterComments.keys()) {\n      lines.add(String.format(\"@param %s %s\", key, parameterComments.get(key)));\n    }\n    return Strings.join(lines, LINE_SEPARATOR);\n  }\n\n  public boolean hasDocs() {\n    return !Strings.isNullOrEmpty(docs);\n  }\n\n  public void setDocs(String text) {\n    Preconditions.checkNotNull(text);\n    docs = text.trim();\n  }\n\n  public int appendComment(String text) {\n    Preconditions.checkNotNull(text);\n    docs += formatComment(text).trim();\n    return docs.length();\n  }\n\n  public static String defaultFor(String s) {\n    return Strings.isNullOrEmpty(s) ? \"\" : s;\n  }\n\n  public static String formatComment(String comment) {\n    String[] lines = comment.split(LINE_SEPARATOR);\n    StringBuilder sb = new StringBuilder();\n    sb.append(defaultFor(lines[0])).append(LINE_SEPARATOR);\n    return sb.toString();\n  }\n\n  public List<String> getParameterNames() {\n    return new ArrayList<>(parameterComments.keySet());\n  }\n\n  public String getParameter(String name) {\n    if (parameterComments.containsKey(name)) {\n      return parameterComments.get(name).get(0);\n    }\n    return null;\n  }\n\n  public void setParameter(String name, String comment) {\n    parameterComments.put(name, comment);\n  }\n\n  private static enum Token {\n    CloseParen,\n    Comment,\n    OpenParen,\n    Param,\n    Tag,\n    Text,\n  }\n\n  /**\n   * Break into tokens (comment or text).\n   *\n   * @param in Original c-style comment string.\n   * @return list of Tokens\n   */\n  public static List<Token> lex(String in) {\n    List<Token> tokens = new ArrayList<Token>();\n    boolean escaped = false;\n    int paren = 0; // paren nesting level\n    String tag = null;\n    String name = null;\n    String comment = null;\n    String text = null;\n\n    Deque<String> stack = new ArrayDeque<String>();\n\n    for (char ch : in.toCharArray()) {\n      switch (ch) {\n        case '/':\n          if (escaped) {\n            stack.push(text);\n            text = \"/\";\n            comment = null;\n            escaped = false;\n          } else if (comment == null) {\n            stack.push(text);\n            comment = \"/\";\n            text = null;\n          } else {\n            comment += ch;\n          }\n          break;\n\n        case '*':\n          if (!escaped && comment != null) {\n            comment += ch;\n          }\n          break;\n\n        case '\\r':\n        case '\\n':\n          if (!escaped && comment == null) {\n            break;\n          }\n          // fall through\n\n        case ' ':\n        case '\\t':\n          // consume whitespace inside tags\n          if (text != null) {\n            text += ch;\n          }\n          break;\n\n        case '\\\\':\n          // next char is escaped\n          if (escaped) {\n            // pushes to stack, pops on another escape\n            stack.push(text);\n            text = String.valueOf(ch);\n            escaped = false;\n          } else {\n            escaped = true;\n          }\n          break;\n\n        case ':':\n          if (escaped) {\n            stack.push(text);\n            text = \":\";\n            escaped = false;\n          }\n          break;\n\n        case '.':\n        case '@':\n          tag = \"\";\n          name = \"\";\n          comment = null; // must be param comment\n          text = null;\n          tokens.add(Token.Tag);\n          break;\n\n        case '(':\n          if (paren == 0) {\n            if (tag != null) {\n              tokens.add(Token.Param);\n            } else {\n              tokens.add(Token.OpenParen);\n            }\n          }\n          paren++;\n          break;\n\n        case ')':\n          paren--;\n          if (paren == 0) {\n            if (tag != null) {\n              tokens.add(Token.Tag);\n            } else {\n              tokens.add(Token.CloseParen);\n            }\n          }\n          break;\n\n        default:\n          if (tag == null) {\n            if (comment == null) {\n              if (text == null) {\n                text = \"\";\n              }\n              text += ch;\n            } else {\n              comment += ch;\n            }\n          } else {\n            if (name == null) {\n              name += ch;\n            } else {\n              comment += ch;\n            }\n          }\n      }\n      if (!stack.isEmpty()) {\n        if (text == null) {\n          text = stack.pop();\n        } else {\n          text += stack.pop();\n        }\n      }\n      if (tag != null && name != null && comment != null) {\n        tokens.add(Token.Tag);\n        tag = null;\n        name = null;\n        comment = null;\n      }\n    }\n    tokens.add(Token.Text); // fake token denoting end of text\n\n    List<Token> merged = new ArrayList<Token>();\n    Token last = Token.Text;\n    for (Token token : tokens) {\n      if (token != Token.Text || last != Token.Text) {\n        merged.add(token);\n      }\n      last = token;\n    }\n\n    return merged;\n  }\n\n  /**\n   * Extract Javadoc from c-style comment.\n   *\n   * @param in Original c-style comment string.\n   * @return map of param names to comments\n   */\n  public static FunctionDocs parse(String in) {\n    FunctionDocs docs = new FunctionDocs();\n\n    List<Token> tokens = lex(in);\n    List<String> names = new ArrayList<String>();\n\n    String text = null;\n    String tag = null;\n    String comment = null;\n\n    boolean inDoc = false;\n\n    for (Token token : tokens) {\n      switch (token) {\n\n        case OpenParen:\n          text = \"\";\n          break;\n\n        case CloseParen:\n          if (inDoc) {\n            docs.appendComment(text);\n          }\n          text = null;\n          break;\n\n        case Tag:\n          if (inDoc) {\n            docs.appendComment(text);\n          }\n          if (tag == null) {\n            if (comment != null) {\n              // assume last tag has ended\n              tag = comment;\n              comment = null;\n            }\n          } else {\n            if (comment != null) {\n              if (tag.equals(\"@param\")) {\n                if (names.isEmpty()) {\n                  // reuse the text from the @function tag\n                  docs.setParameter(text, comment);\n                } else {\n                  docs.setParameter(names.get(0), comment);\n                  names = names.subList(1, names.size());\n                }\n              } else {\n                // assume all others are the @function tag\n                docs.setDocs(comment);\n              }\n              comment = null;\n            }\n            tag = null;\n          }\n          text = \"\";\n          break;\n\n        case Comment:\n          if (inDoc) {\n            "
    },
    {
        "Example": 12,
        "Generated Java Code": "```java\nimport java.util.List;\nimport java.util.logging.Logger;\n\nclass MyClass {\n  private static final Logger LOG = Logger.getLogger(MyClass.class.getName());\n  private long delayBetweenRetries;\n  private List<String> alternateAddresses;\n\n  public void selectAlternateAddress() {\n    LOG.info(\"Selecting an alternate address from: \" + alternateAddresses);\n    // Logic to select an alternate address from 'alternateAddresses'\n    String selectedAddress = ...;\n    // Logic to set the delay between retries\n    long delay = ...;\n    setDelayBetweenRetries(delay);\n  }\n\n  public void setDelayBetweenRetries(long delayBetweenRetries) {\n    this.delayBetweenRetries = delayBetweenRetries;\n  }\n\n  public List<Endpoint> getEndpoints() {\n    // Logic to get a list of endpoints\n    return ...;\n  }\n\n  public Endpoint getNextAlternate() {\n    // Logic to get the next alternate endpoint\n    return ...;\n  }\n\n  public long getDelayBetweenRetries() {\n    return delayBetweenRetries;\n  }\n\n  public void setAlternateAddresses(List<String> alternateAddresses) {\n    this.alternateAddresses = alternateAddresses;\n  }\n\n  public List<Endpoint> getAlternateEndpoints() {\n    // Logic to get a list of alternate endpoints\n    return ...;\n  }\n\n  public Endpoint selectAlternateEndpoint() {\n    // Logic to select an alternate endpoint\n    return ...;\n  }\n\n  public List<String> getAlternateAddresses() {\n    return alternateAddresses;\n  }\n}\n```"
    },
    {
        "Example": 13,
        "Generated Java Code": "```java\nimport java.util.*;\n\nclass TSTNode {\n    char data;\n    TSTNode left;\n    TSTNode root;\n    TSTNode right;\n    ArrayList<String> al;\n    boolean is_End_Of_String;\n\n    TSTNode(char ch) {\n        data = ch;\n        left = null;\n        root = null;\n        right = null;\n        al = new ArrayList<>();\n        is_End_Of_String = false;\n    }\n}\n\nclass TrieST {\n    TSTNode root = null;\n\n    // If TST is empty\n    boolean isEmpty() {\n        return root == null;\n    }\n\n    // If current TSTNode is null\n    boolean isEmpty(TSTNode temp) {\n        return temp == null;\n    }\n\n    // Insert a new word to the TST\n    void insert(String key, String value) {\n        if (root == null) {\n            root = new TSTNode(key.charAt(0));\n        }\n        insert(root, key, 1, value);\n    }\n\n    // Insert a new word to the TST\n    void insert(TSTNode temp, String key, int index, String value) {\n        if (isEmpty(temp)) {\n            temp = new TSTNode(key.charAt(index));\n        }\n\n        if (key.charAt(index) < temp.data) {\n            insert(temp.left, key, index, value);\n        } else if (key.charAt(index) > temp.data) {\n            insert(temp.right, key, index, value);\n        } else {\n            if (index == key.length() - 1) {\n                temp.al.add(value);\n                temp.is_End_Of_String = true;\n            } else {\n                insert(temp.root, key, index + 1, value);\n            }\n        }\n    }\n\n    // Search a word in the TST\n    boolean search(String key) {\n        return search(root, key, 0);\n    }\n\n    // Search a word in the TST\n    boolean search(TSTNode temp, String key, int index) {\n        if (isEmpty(temp)) {\n            return false;\n        }\n        if (key.charAt(index) < temp.data) {\n            return search(temp.left, key, index);\n        } else if (key.charAt(index) > temp.data) {\n            return search(temp.right, key, index);\n        } else {\n            if (index == key.length() - 1) {\n                return temp.is_End_Of_String;\n            } else {\n                return search(temp.root, key, index + 1);\n            }\n        }\n    }\n\n    // Delete a word from the TST\n    void delete(String key) {\n        delete(root, key, 0);\n    }\n\n    // Delete a word from the TST\n    void delete(TSTNode temp, String key, int index) {\n        if (isEmpty(temp)) {\n            return;\n        }\n        if (key.charAt(index) < temp.data) {\n            delete(temp.left, key, index);\n        } else if (key.charAt(index) > temp.data) {\n            delete(temp.right, key, index);\n        } else {\n            if (index == key.length() - 1) {\n                temp.is_End_Of_String = false;\n                temp.al.clear();\n            } else {\n                delete(temp.root, key, index + 1);\n            }\n        }\n    }\n\n    // Traverse the TST\n    void traverse(TSTNode temp, String s) {\n        if (temp == null) {\n            return;\n        }\n        traverse(temp.left, s);\n\n        if (temp.is_End_Of_String) {\n            for (String str : temp.al) {\n                System.out.println(s + temp.data + str);\n            }\n        }\n\n        traverse(temp.root, s + temp.data);\n\n        traverse(temp.right, s);\n    }\n\n    // Make the TST empty\n    void makeEmpty() {\n        root = null;\n    }\n\n    // Convert the TST to String\n    String toString() {\n        StringBuilder sb = new StringBuilder();\n        traverse(root, \" \");\n        return sb.toString();\n    }\n\n    // Main function\n    public static void main(String[] args) {\n        TrieST t = new TrieST();\n        t.insert(\"the\", \"a\");\n        t.insert(\"a\", \"b\");\n        t.insert(\"there\", \"c\");\n        t.insert(\"answer\", \"d\");\n        t.insert(\"any\", \"e\");\n        t.insert(\"by\", \"f\");\n        t.insert(\"bye\", \"g\");\n        t.insert(\"their\", \"h\");\n\n        System.out.println(t.search(\"the\"));\n        System.out.println(t.search(\"these\"));\n        System.out.println(t.search(\"their\"));\n        System.out.println(t.toString());\n        t.delete(\"there\");\n        System.out.println(t.toString());\n        t.makeEmpty();\n        System.out.println(t.isEmpty());\n    }\n}\n```"
    },
    {
        "Example": 14,
        "Generated Java Code": "```java  \n        results = new TreeMap<String, SortedMap<String, SortedMap<String, SortedMap<String, byte[]>>>>();\n        byte[] Row = null;\n        Scan scan = new Scan().setMaxVersions();\n        scan.setCacheBlocks(false);\n        scan.setBatch(100);\n        Table hTable = conn.getTable(tableName);\n        ResultScanner scanner = hTable.getScanner(scan);\n        for (Result r : scanner) {\n          Row = r.getRow();\n          String[] keys = Bytes.toString(Row).split(\"\\t\");\n          if (results.containsKey(keys[0])) {\n            if (results.get(keys[0]).containsKey(keys[1])) {\n              if (results.get(keys[0]).get(keys[1]).containsKey(keys[2])) {\n                results.get(keys[0]).get(keys[1]).get(keys[2]).put(keys[3], r.getValue(fam3, qual3));\n              } else {\n                SortedMap<String, SortedMap<String, byte[]>> m4 = new TreeMap<String, SortedMap<String, byte[]>>();\n                m4.put(keys[3], r.getValue(fam3, qual3));\n                results.get(keys[0]).get(keys[1]).put(keys[2], m4);\n              }\n            } else {\n              SortedMap<String, SortedMap<String, byte[]>> m3 = new TreeMap<String, SortedMap<String, byte[]>>();\n              SortedMap<String, byte[]> m4 = new TreeMap<String, byte[]>();\n              m4.put(keys[3], r.getValue(fam3, qual3));\n              m3.put(keys[2], m4);\n              results.get(keys[0]).put(keys[1], m3);\n            }\n          } else {\n            SortedMap<String, SortedMap<String, SortedMap<String, byte[]>>> m2 =\n                new TreeMap<String, SortedMap<String, SortedMap<String, byte[]>>>();\n            SortedMap<String, SortedMap<String, byte[]>> m3 = new TreeMap<String, SortedMap<String, byte[]>>();\n            SortedMap<String, byte[]> m4 = new TreeMap<String, byte[]>();\n            m4.put(keys[3], r.getValue(fam3, qual3));\n            m3.put(keys[2], m4);\n            m2.put(keys[1], m3);\n            results.put(keys[0], m2);\n          }\n        }\n        scanner.close();\n        hTable.close();  \n```"
    },
    {
        "Example": 15,
        "Generated Java Code": "```java\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nclass UserStoreManager {\n    private final Map<String, Map<String, String>> userStoreManagers = new HashMap<>();\n    private final Set<String> availableDomainNames = new HashSet<>();\n\n    public void clearUserStoreManager() {\n        userStoreManagers.clear();\n    }\n\n    public void addUserStoreManager(String domainName, String username, String password) {\n        if (!availableDomainNames.contains(domainName)) {\n            availableDomainNames.add(domainName);\n        }\n        Map<String, String> credentials = new HashMap<>();\n        credentials.put(\"username\", username);\n        credentials.put(\"password\", password);\n        userStoreManagers.put(domainName, credentials);\n    }\n\n    public Map<String, String> getUserStoreManager(String domainName) {\n        return userStoreManagers.get(domainName);\n    }\n}\n```"
    },
    {
        "Example": 16,
        "Generated Java Code": "```java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Iterator;\nimport java.util.Map;\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.w3c.dom.Document;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\npublic class XmlParser {\n\n    private Document doc;\n    private XPath xPath;\n\n    public XmlParser(InputStream stream) throws ParserConfigurationException, IOException, SAXException {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        doc = builder.parse(new InputSource(stream));\n        xPath = XPathFactory.newInstance().newXPath();\n        xPath.setNamespaceContext(new NamespaceContext() {\n            @Override\n            public String getNamespaceURI(String prefix) {\n                return doc.lookupNamespaceURI(prefix);\n            }\n\n            @Override\n            public String getPrefix(String namespaceURI) {\n                return doc.lookupPrefix(namespaceURI);\n            }\n\n            @Override\n            public Iterator getPrefixes(String namespaceURI) {\n                return null;\n            }\n        });\n    }\n\n    public Map<String, String> getNamespaces() {\n        return null;\n    }\n\n    public URI[] getLinks(String XML_NAMESPACE) {\n        return null;\n    }\n\n    public String getPrefix(String XML_NAMESPACE) {\n        return null;\n    }\n\n    public <T> T[] getNodes(String XML_NAMESPACE, QName qName) {\n        return null;\n    }\n\n    public <T> T[] getNodes(String XML_NAMESPACE, String xPathExpression) {\n        return null;\n    }\n\n    public void setBuffering(boolean b) {}\n\n    public String getValue(String XML_NAMESPACE, QName qName) {\n        return null;\n    }\n\n    public String getValue(String XML_NAMESPACE, String xPathExpression) {\n        String result = null;\n        try {\n            result = xPath.evaluate(xPathExpression, doc, XPathConstants.STRING.type());\n        } catch (XPathExpressionException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public <T> T getValue(String XML_NAMESPACE, QName qName, Class<T> type) {\n        return null;\n    }\n\n    public URI getLink(String XML_NAMESPACE, QName qName) {\n        return null;\n    }\n\n    public URI getLink(String XML_NAMESPACE, String xPathExpression) {\n        return null;\n    }\n\n    public String getNamespaceURI(String XML_NAMESPACE, String prefix) {\n        return null;\n    }\n\n    public Iterator<?> getPrefixes(String XML_NAMESPACE) {\n        return null;\n    }\n\n    public Object readPrimitiveValue(String XML_NAMESPACE, QName qName) {\n        return null;\n    }\n\n    public <T> T getNode(String XML_NAMESPACE, QName qName) {\n        return null;\n    }\n\n    public <T> T getNode(String XML_NAMESPACE, String xPathExpression) {\n        return null;\n    }\n\n    public URI getBaseURI() {\n        return null;\n    }\n\n    public Object evaluate(String XML_NAMESPACE, String expression) {\n        return null;\n    }\n\n    public <T> T readNode(String XML_NAMESPACE, QName qName) {\n        return null;\n    }\n}\n```"
    },
    {
        "Example": 17,
        "Generated Java Code": "```java\nList<JavaFileObject> outputFiles = validate(extensionInfo, loader, eq, outputFiles, allExtensions, jobs, outputWidth);\nif (eq.hasErrors()) {\n  return false;\n}\n\nfor (ExtensionInfo ext : allExtensions) {\n  ext.getOverriddenFields();\n  ext.addExtension(sourceExtension);\n  ext.serializeClassInfo();\n}\nreturn runToGoal(sourceExtension, compileFiles);\n\n```"
    },
    {
        "Example": 18,
        "Generated Java Code": "```java\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.location.LocationManager;\n\npublic class GpsUtils {\n\n    public static boolean getGPS(Context context) {\n        // TODO: Implement this method to enable/disable GPS\n        // Return true if GPS is enabled, false otherwise.\n        boolean gpsEnabled = false;\n        try {\n            LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\n            gpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return gpsEnabled;\n    }\n\n    public static void enableGPS(Context context) {\n        // TODO: Implement this method to enable GPS\n        SharedPreferences preferences = context.getSharedPreferences(\"GpsUtils\", Context.MODE_PRIVATE);\n        boolean gpsEnabled = preferences.getBoolean(\"gpsEnabled\", false);\n        if (!gpsEnabled) {\n            LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\n            try {\n                locationManager.setTestProviderEnabled(LocationManager.GPS_PROVIDER, true);\n                preferences.edit().putBoolean(\"gpsEnabled\", true).apply();\n            } catch (SecurityException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void disableGPS(Context context) {\n        // TODO: Implement this method to disable GPS\n        SharedPreferences preferences = context.getSharedPreferences(\"GpsUtils\", Context.MODE_PRIVATE);\n        boolean gpsEnabled = preferences.getBoolean(\"gpsEnabled\", false);\n        if (gpsEnabled) {\n            LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\n            try {\n                locationManager.setTestProviderEnabled(LocationManager.GPS_PROVIDER, false);\n                preferences.edit().putBoolean(\"gpsEnabled\", false).apply();\n            } catch (SecurityException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
    },
    {
        "Example": 19,
        "Generated Java Code": "```java\npublic static int isLayoutDirectionRTL(View view) {\n    TypedValue mTmpValue = new TypedValue();\n    if (!view.getContext().getTheme().resolveAttribute(android.R.attr.layoutDirection, mTmpValue, true)) {\n        return 0;\n    }\n    if (mTmpValue.data == View.LAYOUT_DIRECTION_RTL) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n```"
    },
    {
        "Example": 20,
        "Generated Java Code": "```java  \n    api.register(\n        ApiFutures.transform(\n            api.get(element),\n            new Function<ApiFuture<Element>, ApiFuture<Void>>() {\n              @Nullable\n              @Override\n              public ApiFuture<Void> apply(ApiFuture<Element> input) {\n                final Element element = input.get();\n                final Checklist checklist = element.getChecklist();\n                if (checklist == null || checklist.isEmpty()) {\n                  return Futures.immediateFuture(null);\n                }\n                Set<String> statusKeys = checklist.getKeySet();\n                for (String aStatusKey : statusKeys) {\n                  api.register(\n                      ApiFutures.transform(\n                          api.get(checklist.getStatus(aStatusKey)),\n                          new Function<ApiFuture<ChecklistStatus>, ApiFuture<Void>>() {\n                            @Nullable\n                            @Override\n                            public ApiFuture<Void> apply(ApiFuture<ChecklistStatus> input) {\n                              final ChecklistStatus status = input.get();\n                              status.register(\n                                  ApiFutures.transform(\n                                      api.get(status.getMetadata()),\n                                      new Function<\n                                          ApiFuture<Metadata>, ApiFuture<Void>>() {\n                                        @Nullable\n                                        @Override\n                                        public ApiFuture<Void> apply(\n                                            ApiFuture<Metadata> input) {\n                                          final Metadata metadata = input.get();\n                                          System.out.printf(\"User %s: %s\\n\",\n                                              metadata.getUser().getEmail(), status.getName());\n                                          return Futures.immediateFuture(null);\n                                        }\n                                      }));\n                              return Futures.immediateFuture(null);\n                            }\n                          }));\n                }\n                return Futures.immediateFuture(null);\n              }\n            }));  \n```"
    },
    {
        "Example": 21,
        "Generated Java Code": "```java\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport net.sf.marineapi.nmea.util.Date;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n * Unit tests\n *\n * @author Garth Wells (gwells@gwells.org)\n */\npublic class DateTest\n{\n   private Date testSubject;\n\n   @Before\n   public void setUp()\n   {\n      this.testSubject = new Date();\n      this.testSubject.setYear(2003);\n      this.testSubject.setMonth(2);\n      this.testSubject.setDay(1);\n   }\n\n   @Test\n   public void testMethodForNetSfMarineapiNmeaUtil_date_setdayInt()\n   {\n      this.testSubject.setDay(1);\n      assertEquals(1, this.testSubject.getDay());\n   }\n\n   @Test\n   public void testGetMonth()\n   {\n      assertEquals(2, this.testSubject.getMonth());\n   }\n\n   @Test\n   public void testEqualsItself()\n   {\n      assertTrue(this.testSubject.equals(this.testSubject));\n   }\n\n   @Test\n   public void testSetYearNegative()\n   {\n      this.testSubject.setYear(-79);\n      assertEquals(-79, this.testSubject.getYear());\n   }\n\n   @Test\n   public void testConstructorWithValues()\n   {\n      Date d = new Date(1, 2003, 7);\n      assertEquals(1, d.getMonth());\n      assertEquals(2003, d.getYear());\n      assertEquals(7, d.getDay());\n   }\n\n   @Test\n   public void testGetYear()\n   {\n      assertEquals(2003, this.testSubject.getYear());\n   }\n\n   @Test\n   public void testToISO8601WithTimeAndZeroZone()\n   {\n      assertEquals(\"2003-03-01T00:00:00.000Z\", this.testSubject.toISO8601WithTimeAndZeroZone());\n   }\n\n   @Test\n   public void testToISO8601FourDigitYear()\n   {\n      assertEquals(\"2003-03-01\", this.testSubject.toISO8601WithFourDigitYear());\n   }\n\n   @Test\n   public void testSetDay()\n   {\n      this.testSubject.setDay(7);\n      assertEquals(7, this.testSubject.getDay());\n   }\n\n   @Test\n   public void testSetYearFourDigit()\n   {\n      this.testSubject.setYear(2003);\n      assertEquals(2003, this.testSubject.getYear());\n   }\n\n   @Test\n   public void testToStringTwoDigitYear()\n   {\n      this.testSubject.setYear(99);\n      assertEquals(\"03-01-99\", this.testSubject.toString());\n   }\n\n   @Test\n   public void testToISO8601WithTimeAndPositiveOffset()\n   {\n      Calendar cal = GregorianCalendar.getInstance();\n      assertEquals(cal.getTimeZone().getOffset(cal.getTimeInMillis()), this.testSubject.toISO8601WithTimeAndOffset(cal.getTimeZone().getOffset(cal.getTimeInMillis())).length() - 6);\n   }\n\n   @Test\n   public void testToISO8601TwoDigitYear()\n   {\n      this.testSubject.setYear(99);\n      assertEquals(\"03-01-99\", this.testSubject.toISO8601WithTwoDigitYear());\n   }\n\n   @Test\n   public void testSetYearFiveDigits()\n   {\n      this.testSubject.setYear(01234);\n      assertEquals(1234, this.testSubject.getYear());\n   }\n\n   @Test\n   public void testToISO8601WithTimeAndNegativeOffset()\n   {\n      Calendar cal = GregorianCalendar.getInstance();\n      assertEquals(cal.getTimeZone().getOffset(cal.getTimeInMillis()), this.testSubject.toISO8601WithTimeAndOffset(-cal.getTimeZone().getOffset(cal.getTimeInMillis())).length() - 6);\n   }\n\n   @Test\n   public void testGetDay()\n   {\n      assertEquals(1, this.testSubject.getDay());\n   }\n\n   @Test\n   public void testSetMonthOutOfBounds()\n   {\n      try\n      {\n         this.testSubject.setMonth(20);\n         fail();\n      }\n      catch(IllegalArgumentException e)\n      {\n         // ignore\n      }\n   }\n\n   @Test\n   public void testConstructor()\n   {\n      Date d = new Date();\n      assertNotNull(d);\n   }\n\n   @Test\n   public void testToStringFourDigitYear()\n   {\n      assertEquals(\"2003-03-01\", this.testSubject.toString());\n   }\n\n   @Test\n   public void testEqualsAfterInit()\n   {\n      Date d = new Date(3, 2003, 1);\n      assertEquals(d, this.testSubject);\n   }\n\n   @Test\n   public void testEqualsWrongType()\n   {\n      assertFalse(this.testSubject.equals(\"abc\"));\n   }\n\n   @Test\n   public void testSetYearTwoDigit()\n   {\n      this.testSubject.setYear(99);\n      assertEquals(99, this.testSubject.getYear());\n   }\n\n   @Test\n   public void testEqualsWhenChanged()\n   {\n      Date d = new Date(3, 2003, 1);\n      this.testSubject.setMonth(3);\n      assertFalse(d.equals(this.testSubject));\n   }\n\n   @Test\n   public void testToISO8601WithTime()\n   {\n      assertEquals(\"2003-03-01T00:00:00.000Z\", this.testSubject.toISO8601WithTime());\n   }\n\n   @Test\n   public void testConstructorWithString()\n   {\n      Date d = new Date(\"2003-03-01\");\n      assertEquals(3, d.getMonth());\n      assertEquals(2003, d.getYear());\n      assertEquals(1, d.getDay());\n   }\n\n   @Test\n   public void testToStringTwoDigitYear()\n   {\n      this.testSubject.setYear(99);\n      assertEquals(\"03-01-99\", this.testSubject.toString());\n   }\n\n   @Test\n   public void testGetMonthOutOfBounds()\n   {\n      try\n      {\n         new Date(20, 2003, 1);\n         fail();\n      }\n      catch(IllegalArgumentException e)\n      {\n         // ignore\n      }\n   }\n\n   @Test\n   public void testSetYearThreeDigits()\n   {\n      this.testSubject.setYear(101);\n      assertEquals(101, this.testSubject.getYear());\n   }\n\n}\n```"
    },
    {
        "Example": 22,
        "Generated Java Code": "```java\npublic int nextAvailableTile(Array<Array<Array<Card>>> tiles, int player, int lane) {\n    if (player == HUMAN_PLAYER) {\n        lane = getMaxLane(tiles, lane, enemyBaseAttacked, laneWithLessAllies);\n    } else if (player == COMPUTER_PLAYER) {\n        lane = getMaxLane(tiles, lane, playerBaseAttacked, laneWithMoreEnemiesInvading);\n    } else {\n        return -1;\n    }\n    for(int i = 4; i >= 1; i--) {\n        if (tiles.get(lane).get(i).length == 0) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nprivate int getMaxLane(Array<Array<Array<Card>>> map, int lane, int playerBaseAttacked, int laneWithMoreEnemies) {\n    if (playerBaseAttacked != -1) {\n        if (map.get(lane).length > 4) {\n            return lane;\n        } else if (map.get(laneWithMoreEnemies).length > 4) {\n            return laneWithMoreEnemies;\n        } else {\n            return playerBaseAttacked;\n        }\n    } else {\n        return lane;\n    }\n}\n```"
    },
    {
        "Example": 23,
        "Generated Java Code": "```java\nimport java.util.Arrays;\nimport java.util.Objects;\n\npublic class InverseMatrix {\n    public static void main(String[] args) {\n        double[][] input = {{1, 2}, {3, 4}};\n        Matrix matrix = new Matrix(input);\n\n        try {\n            Matrix inverse = matrix.inverse();\n            System.out.println(\"Inverse of the matrix:\");\n            System.out.println(inverse);\n        } catch (Exception e) {\n            System.out.println(\"The matrix is not invertible.\");\n        }\n    }\n\n    static class Matrix {\n        private final double[][] values;\n\n        public Matrix(double[][] values) {\n            this.values = values;\n        }\n\n        public Matrix inverse() {\n            if (!isSquare()) {\n                throw new IllegalArgumentException(\"Matrix must be square to find inverse.\");\n            }\n\n            double determinant = determinant();\n            if (determinant == 0) {\n                throw new IllegalArgumentException(\"Matrix is not invertible.\");\n            }\n\n            double[][] cofactorMatrix = cofactorMatrix();\n            double[][] adjugateMatrix = transpose(cofactorMatrix);\n            return multiply(adjugateMatrix, 1 / determinant);\n        }\n\n        public double determinant() {\n            if (!isSquare()) {\n                throw new IllegalArgumentException(\"Matrix must be square to find determinant.\");\n            }\n\n            int n = values.length;\n            if (n == 1) {\n                return values[0][0];\n            }\n\n            double determinant = 0;\n            for (int i = 0; i < n; i++) {\n                determinant += values[0][i] * cofactor(0, i);\n            }\n\n            return determinant;\n        }\n\n        private double[][] cofactorMatrix() {\n            int n = values.length;\n            double[][] cofactorMatrix = new double[n][n];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    cofactorMatrix[i][j] = cofactor(i, j);\n                }\n            }\n\n            return cofactorMatrix;\n        }\n\n        private double cofactor(int row, int column) {\n            int n = values.length;\n            int sign = (row + column) % 2 == 0 ? 1 : -1;\n\n            double[][] subMatrix = createSubMatrix(row, column);\n            return sign * determinant(new Matrix(subMatrix));\n        }\n\n        private double[][] transpose(double[][] matrix) {\n            int n = matrix.length;\n            double[][] transposed = new double[n][n];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    transposed[i][j] = matrix[j][i];\n                }\n            }\n\n            return transposed;\n        }\n\n        private double[][] multiply(double[][] matrix, double scalar) {\n            int n = matrix.length;\n            double[][] multiplied = new double[n][n];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    multiplied[i][j] = matrix[i][j] * scalar;\n                }\n            }\n\n            return multiplied;\n        }\n\n        private double[][] createSubMatrix(int row, int column) {\n            int n = values.length;\n            double[][] subMatrix = new double[n - 1][n - 1];\n\n            for (int i = 0; i < n; i++) {\n                if (i == row) {\n                    continue;\n                }\n\n                for (int j = 0; j < n; j++) {\n                    if (j == column) {\n                        continue;\n                    }\n\n                    subMatrix[i - (i > row ? 1 : 0)][j - (j > column ? 1 : 0)] = values[i][j];\n                }\n            }\n\n            return subMatrix;\n        }\n\n        private boolean isSquare() {\n            return values.length == values[0].length;\n        }\n\n        @Override\n        public String toString() {\n            return Arrays.deepToString(values);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Matrix matrix = (Matrix) o;\n            return Arrays.deepEquals(values, matrix.values);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(values);\n        }\n    }\n}\n```"
    },
    {
        "Example": 24,
        "Generated Java Code": "```java\nimport java.util.List;\n\npublic class JobExitStatus {\n\n    public static final JobExitStatus NOOP = new JobExitStatus(\"NOOP\");\n    public static final JobExitStatus FILES_AVAILABLE = new JobExitStatus(\"FILES_AVAILABLE\");\n    public static final JobExitStatus CAPTURE_SOURCE_METADATA_ERRORS = new JobExitStatus(\"CAPTURE_SOURCE_METADATA_ERRORS\");\n    public static final JobExitStatus SOURCE_DELETION_ERRORS = new JobExitStatus(\"SOURCE_DELETION_ERRORS\");\n    public static final JobExitStatus DOWNLOAD_ERRORS = new JobExitStatus(\"DOWNLOAD_ERRORS\");\n    public static final JobExitStatus CONFIG_VALIDATION_FAIL = new JobExitStatus(\"CONFIG_VALIDATION_FAIL\");\n    public static final JobExitStatus MOVEFILES_WORKAREA_ERRORS = new JobExitStatus(\"MOVEFILES_WORKAREA_ERRORS\");\n    public static final JobExitStatus EXECUTING = new JobExitStatus(\"EXECUTING\");\n    public static final JobExitStatus DB_NOT_ACCESSABLE = new JobExitStatus(\"DB_NOT_ACCESSABLE\");\n    public static final JobExitStatus ANOTHER_FETCHER_IS_RUNNING = new JobExitStatus(\"ANOTHER_FETCHER_IS_RUNNING\");\n    public static final JobExitStatus RUNFAILED = new JobExitStatus(\"RUNFAILED\");\n    public static final JobExitStatus MULTIPLE_PARTIAL_ERRORS = new JobExitStatus(\"MULTIPLE_PARTIAL_ERRORS\");\n    public static final JobExitStatus MOVEFILES_DESTINATION_ERRORS = new JobExitStatus(\"MOVEFILES_DESTINATION_ERRORS\");\n    public static final JobExitStatus NO_NEW_FILES_FOUND = new JobExitStatus(\"NO_NEW_FILES_FOUND\");\n    public static final JobExitStatus WORK_AREA_NOT_ACCESSABLE = new JobExitStatus(\"WORK_AREA_NOT_ACCESSABLE\");\n    public static final JobExitStatus PROCESS_VALIDATION_FAIL = new JobExitStatus(\"PROCESS_VALIDATION_FAIL\");\n    public static final JobExitStatus DESTINATION_NOT_ACCESSABLE = new JobExitStatus(\"DESTINATION_NOT_ACCESSABLE\");\n    public static final JobExitStatus UNKNOWN = new JobExitStatus(\"UNKNOWN\");\n    public static final JobExitStatus DELAYERING_ERRORS = new JobExitStatus(\"DELAYERING_ERRORS\");\n    public static final JobExitStatus NO_FILES_FOUND = new JobExitStatus(\"NO_FILES_FOUND\");\n    public static final JobExitStatus SOURCE_NOT_ACCESSABLE = new JobExitStatus(\"SOURCE_NOT_ACCESSABLE\");\n    public static final JobExitStatus COMPLETED = new JobExitStatus(\"COMPLETED\");\n    private static final List<JobExitStatus> partialFailureCodes =\n        List.of(CAPTURE_SOURCE_METADATA_ERRORS, SOURCE_DELETION_ERRORS, DOWNLOAD_ERRORS,\n            CONFIG_VALIDATION_FAIL, MOVEFILES_WORKAREA_ERRORS, MOVEFILES_DESTINATION_ERRORS,\n            WORK_AREA_NOT_ACCESSABLE, PROCESS_VALIDATION_FAIL, DESTINATION_NOT_ACCESSABLE,\n            DELAYERING_ERRORS);\n\n    private final String thisExitStatus;\n    private final List<JobExitStatus> partialExitCodes;\n\n    public JobExitStatus(String thisExitStatus) {\n        this(thisExitStatus, List.of());\n    }\n\n    public JobExitStatus(String thisExitStatus, List<JobExitStatus> partialExitCodes) {\n        this.thisExitStatus = thisExitStatus;\n        this.partialExitCodes = partialExitCodes;\n    }\n\n    public ExitStatus getExitStatus() {\n        return ExitStatus.valueOf(thisExitStatus.toUpperCase());\n    }\n\n    public List<JobExitStatus> getPartialFailureCodes() {\n        return partialExitCodes;\n    }\n\n    public boolean isPartialFailureCode() {\n        return partialFailureCodes.contains(this);\n    }\n\n    @Override\n    public String toString() {\n        return thisExitStatus;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n\n        JobExitStatus that = (JobExitStatus) o;\n\n        if (!thisExitStatus.equals(that.thisExitStatus)) {\n            return false;\n        }\n        return partialExitCodes.equals(that.partialExitCodes);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = thisExitStatus.hashCode();\n        result = 31 * result + partialExitCodes.hashCode();\n        return result;\n    }\n\n    public String getExitDescription() {\n        return thisExitStatus;\n    }\n}\n```"
    },
    {
        "Example": 25,
        "Generated Java Code": "```java  \nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Area;\nimport java.awt.geom.Rectangle2D;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JEditorPane;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListCellRenderer;\nimport javax.swing.SwingUtilities;\nimport javax.swing.border.Border;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.text.html.HTMLDocument;\nimport javax.swing.text.html.StyleSheet;\nimport javax.swing.text.html.HTMLDocument.HTMLReader.TagAction;\nimport javax.swing.text.html.ObjectView;\n\nimport org.apache.commons.io.FileUtils;\nimport org.knopflerfish.eclipse.core.SwingWorker;\nimport org.osgi.framework.Bundle;\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.BundleEvent;\nimport org.osgi.framework.BundleListener;\nimport org.osgi.framework.FrameworkEvent;\nimport org.osgi.framework.FrameworkListener;\nimport org.osgi.framework.ServiceEvent;\nimport org.osgi.framework.ServiceListener;\nimport org.osgi.framework.ServiceReference;\nimport org.osgi.framework.ServiceRegistration;\nimport org.osgi.service.component.ComponentContext;\nimport org.osgi.util.tracker.ServiceTracker;\n\nimport com.ardor3d.util.GameTaskQueueManager;\nimport com.ardor3d.util.GarbageCollector.HeapDump;\nimport com.jettison.json.JSONArray;\nimport com.jettison.json.JSONException;\nimport com.jettison.json.JSONObject;\nimport com.yeelight.sdk.YeelightClient;\nimport com.yeelight.sdk.YeelightDevice;\nimport com.yeelight.sdk. YeelightDeviceEvent;\n\nimport uk.co.caprica.vlcj.component.EmbeddedMediaListPlayerComponent;\nimport uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;\nimport uk.co.caprica.vlcj.player.media.Media;\nimport uk.co.caprica.vlcj.player.media.MediaRef;\nimport uk.co.caprica.vlcj.player.MediaPlayer;\nimport uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;\nimport uk.co.caprica.vlcj.player.MediaPlayerFactory;\nimport uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;\n\n  \n```"
    },
    {
        "Example": 26,
        "Generated Java Code": "```java\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableList.Builder;\nimport com.google.common.collect.Iterables;\nimport com.google.inject.Inject;\nimport com.google.inject.name.Named;\nimport java.security.Key;\nimport java.util.List;\nimport org.joda.time.DateTime;\nimport org.joda.time.Duration;\nimport org.opensaml.core.xml.AbstractXMLObjectBuilder;\nimport org.opensaml.core.xml.XMLObject;\nimport org.opensaml.core.xml.XMLObjectBuilder;\nimport org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport;\nimport org.opensaml.saml.common.SAMLObjectBuilder;\nimport org.opensaml.saml.saml2.core.AttributeStatement;\nimport org.opensaml.saml.saml2.core.AuthnRequest;\nimport org.opensaml.saml.saml2.core.Conditions;\nimport org.opensaml.saml.saml2.core.Issuer;\nimport org.opensaml.saml.saml2.core.NameID;\nimport org.opensaml.saml.saml2.core.NameIDType;\nimport org.opensaml.saml.saml2.core.RequestAbstractType;\nimport org.opensaml.saml.saml2.core.Response;\nimport org.opensaml.saml.saml2.core.Status;\nimport org.opensaml.saml.saml2.core.StatusCode;\nimport org.opensaml.saml.saml2.core.StatusMessage;\nimport org.opensaml.saml.saml2.core.Subject;\nimport org.opensaml.saml.saml2.core.SubjectConfirmation;\nimport org.opensaml.saml.saml2.core.SubjectConfirmationData;\nimport org.opensaml.saml.saml2.core.impl.AttributeStatementBuilder;\nimport org.opensaml.saml.saml2.core.impl.AuthnRequestBuilder;\nimport org.opensaml.saml.saml2.core.impl.ConditionsBuilder;\nimport org.opensaml.saml.saml2.core.impl.IssuerBuilder;\nimport org.opensaml.saml.saml2.core.impl.NameIDBuilder;\nimport org.opensaml.saml.saml2.core.impl.ResponseBuilder;\nimport org.opensaml.saml.saml2.core.impl.StatusBuilder;\nimport org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\nimport org.opensaml.saml.saml2.core.impl.StatusMessageBuilder;\nimport org.opensaml.saml.saml2.core.impl.SubjectBuilder;\nimport org.opensaml.saml.saml2.core.impl.SubjectConfirmationBuilder;\nimport org.opensaml.saml.saml2.core.impl.SubjectConfirmationDataBuilder;\nimport org.opensaml.xmlsec.signature.Signature;\nimport org.opensaml.xmlsec.signature.impl.SignatureBuilder;\n\npublic class SamlTokenProvider implements TokenProvider {\n\n  private static final Duration AUTHN_REQUEST_VALIDITY = Duration.standardDays(1);\n  private static final String SAML2_PROTOCOL_URN = \"urn:oasis:names:tc:SAML:2.0:protocol\";\n  private static final String LONE_SAML_ISSUER_VALUE = \"LOCAL_SAML_ISSUER\";\n\n  private final SamlAssertionWrapper samlAssertionWrapper;\n  private final SubjectProvider subjectProvider;\n  private final ConditionsProvider conditionsProvider;\n  private final List<AttributeStatementProvider> attributeStatementProviders;\n  private final Logger log;\n  private final boolean signToken;\n\n  @Inject\n  public SamlTokenProvider(\n      SamlAssertionWrapper samlAssertionWrapper,\n      @Named(\"subjectProvider\") SubjectProvider subjectProvider,\n      @Named(\"conditionsProvider\") ConditionsProvider conditionsProvider,\n      @Named(\"attributeStatementProviders\") List<AttributeStatementProvider> attributeStatementProviders,\n      Logger log,\n      @Named(\"signToken\") boolean signToken) {\n    this.samlAssertionWrapper = Preconditions.checkNotNull(samlAssertionWrapper);\n    this.subjectProvider = Preconditions.checkNotNull(subjectProvider);\n    this.conditionsProvider = Preconditions.checkNotNull(conditionsProvider);\n    this.attributeStatementProviders =\n        Preconditions.checkNotNull(attributeStatementProviders);\n    this.log = Preconditions.checkNotNull(log);\n    this.signToken = signToken;\n  }\n\n  @Override\n  public boolean canHandleToken(TokenCallback callback) {\n    return callback instanceof SamlCallbackHandler;\n  }\n\n  @Override\n  public TokenProviderResponse createToken(TokenCallback callback) throws CallbackHandlingException {\n    SamlCallbackHandler handler = (SamlCallbackHandler) callback;\n\n    NameID nameId =\n        new NameIDBuilder()\n            .setName(subjectProvider.getId())\n            .setFormat(NameIDType.TRANSIENT)\n            .setSPNameQualifier(handler.issuer())\n            .buildObject();\n\n    Subject subject =\n        new SubjectBuilder()\n            .setNameID(nameId)\n            .addSubjectConfirmation(generateConfirmation(handler.getClientAddress()))\n            .buildObject();\n\n    Response.Builder responseBuilder = buildResponse(handler.issuer());\n    responseBuilder.setSubject(subject);\n    responseBuilder.setConditions(conditionsProvider.getConditions());\n\n    XMLObjectBuilder<?> issuerBuilder =\n        XMLObjectProviderRegistrySupport.getBuilderFactory().getBuilder(Issuer.DEFAULT_ELEMENT_NAME);\n    Issuer issuer =\n        ((IssuerBuilder) issuerBuilder).buildObject(Issuer.DEFAULT_ELEMENT_NAME, Issuer.TYPE_NAME);\n    issuer.setValue(LONE_SAML_ISSUER_VALUE);\n    responseBuilder.setIssuer(issuer);\n\n    List<Assertion> assertions =\n        ImmutableList.<Assertion>builder()\n            .add(\n                samlAssertionWrapper.createAssertion(\n                    samlAssertionWrapper.createSamlObject(nameId, subject), createAttributeStatements()))\n            .addAll(samlAssertionWrapper.provideAdditionalAssertions())\n            .build();\n\n    for (Assertion a : assertions) {\n      responseBuilder.getAssertions().add(a);\n    }\n\n    Response response = responseBuilder.buildObject();\n    if (signToken) {\n      signSamlToken(response, handler.getSigningKey());\n      log.info(\"Signed response \" + response.getID());\n    }\n\n    return new TokenProviderResponse(response.toString(), \"SAMLResponse\", null, samlAssertionWrapper.getAuthnContext());\n  }\n\n  private List<AttributeStatement> createAttributeStatements() {\n    Builder<AttributeStatement> statements = ImmutableList.builder();\n    if (subjectProvider.getAttributes() != null) {\n      AttributeStatement statement =\n          new AttributeStatementBuilder()\n              .addAttributeStatements(subjectProvider.getAttributes())\n              .buildObject();\n      statements.add(statement);\n    }\n    for (AttributeStatementProvider provider : attributeStatementProviders) {\n      statements.addAll(provider.getAttributeStatements());\n    }\n    return statements.build();\n  }\n\n  private SubjectConfirmation generateConfirmation(String clientAddress) {\n    SubjectConfirmation.Builder confirmation = new SubjectConfirmationBuilder();\n    SubjectConfirmationData data = new SubjectConfirmationDataBuilder().buildObject();\n    data.setInResponseTo(samlAssertionWrapper.getRequestId());\n    data.setAddress(clientAddress);\n    data.setNotOnOrAfter(new DateTime().plus(AUTHN_REQUEST_VALIDITY));\n    confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n    confirmation.setSubjectConfirmationData(data);\n    return confirmation.buildObject();\n  }\n\n  private Response.Builder buildResponse(String issuer) {\n    Response.Builder response =\n        new ResponseBuilder()\n            .setDestination(samlAssertionWrapper.getResponseUrl())\n            .setIssuer(Issuer.DEFAULT_ELEMENT_NAME)\n            .setStatus(buildStatus())\n            .setVersion(samlAssertionWrapper.getSamlVersion());\n    if (samlAssertionWrapper.getIssueInstant() != null) {\n      response.setIssueInstant(samlAssertionWrapper.getIssueInstant());\n    } else {\n      response.setIssueInstant(new DateTime());\n    }\n    response.setID(samlAssertionWrapper.getId());\n    response.setInResponseTo(samlAssertionWrapper.getInResponseTo());\n    return response;\n  }\n\n  private Status buildStatus() {\n    StatusBuilder statusBuilder = new StatusBuilder();\n    Status status = statusBuilder.buildObject();\n    StatusCode statusCode = new StatusCodeBuilder().setValue(StatusCode.SUCCESS).buildObject();\n    status.setStatusCode(statusCode);\n    return status;\n  }\n\n  private void signSamlToken(Response samlObject, Key key) {\n"
    },
    {
        "Example": 27,
        "Generated Java Code": "```java\npublic class AssetManager {\n    private static final String LOG = AssetManager.class.getSimpleName();\n    private static AssetManager instance;\n\n    private TiledMapManager tiledMapManager;\n\n    private Array<Asset> textures = new Array<>();\n    private Array<Asset> sounds = new Array<>();\n    private Array<Asset> rpgMaps = new Array<>();\n    private Array<Asset> textureRegions = new Array<>();\n\n    private Array<Asset> assetsToLoad = new Array<>();\n\n    private AssetManager() {\n    }\n\n    public static AssetManager getInstance() {\n        if (instance == null) {\n            instance = new AssetManager();\n        }\n        return instance;\n    }\n\n    public void loadAssets() {\n        for (Asset asset : assetsToLoad) {\n            if (asset.getType().equals(\"TextureAtlas\")) {\n                loadTextureAtlas(asset.getName());\n            } else if (asset.getType().equals(\"Texture\")) {\n                loadTextures(asset.getName());\n            } else if (asset.getType().equals(\"TiledMap\")) {\n                loadMaps(asset.getName());\n            } else if (asset.getType().equals(\"Sound\")) {\n                loadSounds(asset.getName());\n            }\n        }\n    }\n\n    public void loadTextureAtlas(String assetName) {\n        Asset atlasAsset = new Asset(\"TextureAtlas\", assetName);\n        if (textures.contains(atlasAsset, true)) {\n            return;\n        }\n        textures.add(atlasAsset);\n        Atlas atlas = new Atlas(Gdx.files.internal(assetName + \".atlas\"), Texture.TextureFilter.Nearest, true);\n        TextureAtlas textureAtlas = new TextureAtlas(atlas);\n        assetManager.load(assetName + \".atlas\", TextureAtlas.class);\n        assetManager.finishLoadingAsset(assetName + \".atlas\");\n        textures.add(new Asset(\"TextureAtlas\", assetName + \".atlas\", textureAtlas));\n    }\n\n    public void loadTextures(String assetName) {\n        Asset textureAsset = new Asset(\"Texture\", assetName);\n        if (textures.contains(textureAsset, true)) {\n            return;\n        }\n        textures.add(new Asset(\"Texture\", assetName));\n        assetManager.load(assetName, Texture.class);\n        assetManager.finishLoadingAsset(assetName);\n    }\n\n    public void loadMaps(String assetName) {\n        Asset rpgMapAsset = new Asset(\"TiledMap\", assetName);\n        if (rpgMaps.contains(rpgMapAsset, true)) {\n            return;\n        }\n        rpgMaps.add(new Asset(\"TiledMap\", assetName));\n        assetManager.load(assetName, TiledMap.class);\n        assetManager.finishLoadingAsset(assetName);\n    }\n\n    public void loadSounds(String assetName) {\n        Asset soundAsset = new Asset(\"Sound\", assetName);\n        if (sounds.contains(soundAsset, true)) {\n            return;\n        }\n        sounds.add(new Asset(\"Sound\", assetName));\n        assetManager.load(assetName, Sound.class);\n        assetManager.finishLoadingAsset(assetName);\n    }\n\n    public void unloadSounds() {\n        for (Asset sound : sounds) {\n            sound.getResource(\"Sound\").dispose();\n        }\n        sounds.clear();\n    }\n\n    public void dispose() {\n        disposeTextures();\n        disposeMaps();\n        disposeAtlas();\n    }\n\n    public void disposeTextures() {\n        for (Asset texture : textures) {\n            texture.getResource(\"Texture\").dispose();\n        }\n        textures.clear();\n    }\n\n    public void disposeMaps() {\n        for (Asset rpgMap : rpgMaps) {\n            rpgMap.getResource(\"TiledMap\").dispose();\n        }\n        rpgMaps.clear();\n    }\n\n    public void disposeAtlas() {\n        for (Asset textureAtlas : textures) {\n            if (textureAtlas.getType().equals(\"TextureAtlas\")) {\n                textureAtlas.getResource(\"TextureAtlas\").dispose();\n            }\n        }\n        textures.clear();\n    }\n\n    public TextureRegion getTextureRegion(String assetName) {\n        for (Asset textureRegion : textureRegions) {\n            if (textureRegion.getName().equals(assetName)) {\n                return textureRegion.getResource(\"TextureRegion\");\n            }\n        }\n        return null;\n    }\n\n    public TiledMap getTiledMap(String assetName) {\n        for (Asset rpgMap : rpgMaps) {\n            if (rpgMap.getName().equals(assetName)) {\n                return rpgMap.getResource(\"TiledMap\");\n            }\n        }\n        return null;\n    }\n\n    public Texture getTexture(String assetName) {\n        for (Asset texture : textures) {\n            if (texture.getName().equals(assetName)) {\n                return texture.getResource(\"Texture\");\n            }\n        }\n        return null;\n    }\n\n    public void setAssetsToLoad(Array<Asset> assetsToLoad) {\n        this.assetsToLoad = assetsToLoad;\n    }\n}\n```"
    },
    {
        "Example": 28,
        "Generated Java Code": "```java\nimport com.google.devtools.build.lib.analysis.config.InvalidConfigurationException;\nimport com.google.devtools.build.lib.runtime.RepositoryManager;\nimport com.google.devtools.build.lib.runtime.StoredSettings;\nimport com.google.devtools.build.lib.skyframe.packages.ProjectModel;\nimport com.google.devtools.build.lib.util.io.TimestampGranularityMonitor;\nimport com.google.devtools.build.lib.vfs.FileSystemUtils;\nimport com.google.devtools.build.lib.vfs.Path;\nimport com.google.devtools.build.skyframe.SkyFunction;\nimport com.google.devtools.build.skyframe.SkyKey;\nimport com.google.devtools.build.skyframe.SkyValue;\nimport java.io.IOException;\nimport java.util.Map;\nimport javax.annotation.Nullable;\n\npublic class ProjectManager implements SkyFunction {\n  private final StoredSettings settings;\n  private final RepositoryManager repositoryManager;\n  private final FileBasedConfig projectConfigs;\n  private final Logger logger;\n\n  private Map<String, ProjectModel> projectCache;\n\n  public ProjectManager(\n      StoredSettings settings,\n      RepositoryManager repositoryManager,\n      FileBasedConfig projectConfigs,\n      Logger logger) {\n    this.settings = settings;\n    this.repositoryManager = repositoryManager;\n    this.projectConfigs = projectConfigs;\n    this.logger = logger;\n  }\n\n  @Nullable\n  @Override\n  public SkyValue compute(SkyKey skyKey, Environment env)\n      throws ProjectEvaluationException, InvalidConfigurationException, InterruptedException {\n    String projectId = (String) skyKey.argument();\n    try {\n      if (projectCache != null) {\n        ProjectModel projectModel = projectCache.get(projectId);\n        if (projectModel != null) {\n          return projectModel;\n        }\n      }\n\n      projectConfigs.sync();\n      if (!FileSystemUtils.isDirectory(projectConfigs.getProjectDirectory(projectId))) {\n        projectCache.put(projectId, null);\n        return null;\n      }\n\n      Path projectDirectory = projectConfigs.getProjectDirectory(projectId);\n      ProjectModel projectModel =\n          ProjectModel.builder(projectId, projectDirectory)\n              .readOnlyFileSystem(projectConfigs.getFileSystem(projectId))\n              .settings(settings)\n              .repositoryManager(repositoryManager)\n              .logger(logger)\n              .build();\n      projectCache.put(projectId, projectModel);\n      return projectModel;\n    } catch (IOException e) {\n      throw new ProjectEvaluationException(e);\n    }\n  }\n\n  @Nullable\n  @Override\n  public String extractTag(SkyKey skyKey) {\n    return null;\n  }\n\n  public void start(\n      Map<String, ProjectModel> projectCache,\n      ObjectCache<String> projectMarkdownCache,\n      ObjectCache<String> projectRepositoriesMarkdownCache) {\n    this.projectCache = projectCache;\n\n    // RepositoryManager and BuildtoolRuntimeProvider assume default project config on startup, get it\n    // here.\n    try {\n      getProjectConfigs();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Error getting project configs on startup\", e);\n    }\n\n    projectConfigs.addReloadListener(\n        () -> {\n          // NOTE: This only reloads the main project config. Unloading/reloading projects is handled\n          // lazily over the lifetime of the build by the ProjectConfigTarget to avoid leaking the\n          // configuration cache, and invalidating any caching/memoization that uses ProjectConfigs or\n          // ProjectModel.\n          projectMarkdownCache.invalidateAll();\n          projectRepositoriesMarkdownCache.invalidateAll();\n          reloadProjectMarkdown();\n        });\n    FileSystemUtils.addContentChangedListener(projectConfigs.getProductPathForLogging(), projectCache);\n    TimestampGranularityMonitor.INSTANCE.addChangeListener(projectCache);\n  }\n\n  public Map<String, ProjectModel> getProjectConfigs() throws IOException {\n    return projectConfigs.readProjectConfigs();\n  }\n\n  public List<ProjectModel> getProjectModels() {\n    if (projectCache == null) {\n      return ImmutableList.of();\n    }\n    return ImmutableList.copyOf(projectCache.values());\n  }\n\n  public void reloadProjectMarkdown() {\n    if (projectCache != null) {\n      for (ProjectModel projectModel : projectCache.values()) {\n        projectModel.getMarkdownCache().invalidate();\n        projectModel.getRepositoryMarkdownCache().invalidate();\n      }\n    }\n  }\n\n  public void stop() {}\n}\n```"
    },
    {
        "Example": 29,
        "Generated Java Code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class Color {\n\n    private final int r;\n    private final int g;\n    private final int b;\n    private final Map<RGB, String> namedColors;\n\n    public Color(int r, int g, int b, Map<RGB, String> namedColors) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.namedColors = namedColors;\n    }\n\n    public static Color of(int r, int g, int b) {\n        return new Color(r, g, b, new HashMap<>());\n    }\n\n    public static Color of(int r, int g, int b, Map<RGB, String> namedColors) {\n        return new Color(r, g, b, namedColors);\n    }\n\n    public int getR() {\n        return r;\n    }\n\n    public int getG() {\n        return g;\n    }\n\n    public int getB() {\n        return b;\n    }\n\n    public Optional<String> getNamedColor() {\n        return Optional.ofNullable(namedColors.get(new RGB(r, g, b)));\n    }\n\n    public Optional<String> getNamedColor(double maxDist) {\n        return namedColors.entrySet().stream()\n                .filter(entry -> calculateColorDistSq(r, g, b, entry.getKey().getR(), entry.getKey().getG(), entry.getKey().getB()) < maxDist * maxDist)\n                .max(Map.Entry.comparingByValue(Function.identity()))\n                .map(Map.Entry::getValue);\n    }\n\n    public double calculateColorDistSq(int r1, int g1, int b1, int r2, int g2, int b2) {\n        return (r1 - r2) * (r1 - r2) + (g1 - g2) * (g1 - g2) + (b1 - b2) * (b1 - b2);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Color color = (Color) o;\n        return r == color.r &&\n                g == color.g &&\n                b == color.b;\n    }\n\n    @Override\n    public int hashCode() {\n        return r * 10000 + g * 100 + b;\n    }\n\n    public static class RGB {\n\n        private final int r;\n        private final int g;\n        private final int b;\n\n        public RGB(int r, int g, int b) {\n            this.r = r;\n            this.g = g;\n            this.b = b;\n        }\n\n        public int getR() {\n            return r;\n        }\n\n        public int getG() {\n            return g;\n        }\n\n        public int getB() {\n            return b;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            RGB rgb = (RGB) o;\n            return r == rgb.r &&\n                    g == rgb.g &&\n                    b == rgb.b;\n        }\n\n        @Override\n        public int hashCode() {\n            return r * 10000 + g * 100 + b;\n        }\n    }\n}\n```"
    },
    {
        "Example": 30,
        "Generated Java Code": "```java\nimport java.util.logging.Logger;\n\npublic class BigQuerySourceConfiguration implements Cloneable {\n\n  private static final Logger LOG = Logger.getLogger(BigQuerySourceConfiguration.class.getName());\n\n  private static String getSuffixFromType(String type) {\n    switch (type) {\n      case \"STRING\":\n      case \"BYTES\":\n      case \"BOOLEAN\":\n      case \"FLOAT\":\n      case \"DOUBLE\":\n      case \"GEOGRAPHY\":\n      case \"NUMERIC\":\n      case \"DATETIME\":\n      case \"DATE\":\n      case \"TIME\":\n      case \"TIMESTAMP\":\n      case \"INTEGER\":\n      case \"BIGINT\":\n        return \"beam-bq-row.avro\";\n      case \"ARRAY\":\n      case \"STRUCT\":\n      case \"UNION\":\n      case \"RECORD\":\n      case \"ENUM\":\n        return \"beam-bq-row_proto.avro\";\n      default:\n        throw new IllegalArgumentException(\n            String.format(\"Unrecognized BigQuery type: %s\", type));\n    }\n  }\n\n  private final String CLASS_NAME = this.getClass().getName();\n\n  private String name;\n  private String schema;\n  private String type;\n  private String revision;\n\n  public BigQuerySourceConfiguration() {\n    // For Jackson\n  }\n\n  public BigQuerySourceConfiguration(\n      String name, String schema, String type, String revision) {\n    setName(name);\n    setSchema(schema);\n    setType(type);\n    setRevision(revision);\n  }\n\n  @Override\n  public BigQuerySourceConfiguration clone() {\n    try {\n      return (BigQuerySourceConfiguration) super.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"Failed to Clone BigQuerySourceConfiguration\", e);\n    }\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getSchema() {\n    return schema;\n  }\n\n  public void setSchema(String schema) {\n    this.schema = schema;\n  }\n\n  public String getType() {\n    return type;\n  }\n\n  public void setType(String type) {\n    this.type = type;\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\n        \"%s(name=%s, schema=%s, type=%s, revision=%s)\",\n        CLASS_NAME, name, schema, type, revision);\n  }\n\n  public void setRevision(String revision) {\n    this.revision = revision;\n  }\n\n  public String getRevision() {\n    return revision;\n  }\n}\n```"
    },
    {
        "Example": 31,
        "Generated Java Code": "```java\nimport com.google.common.base.Objects;\nimport org.darkcoinj.core.*;\n\nimport java.math.BigInteger;\nimport java.util.*;\n\n/**\n * Network parameters used by the dashj library.\n */\npublic class DashNetParams extends NetworkParameters {\n    public static final int ALERT_HEADER = 0xe9b6c11d; // 0xe9b6c11d == BIP0005 \"alert\" headerbits\n    public static final int ADDRESS_HEADER = 76; // starts with 'X'\n    public static final int P2SH_HEADER = 16; // starts with '7'\n    public static final int DUMPED_PRIVATE_KEY_HEADER = 128; // starts with 'P'\n    public static final int INTERVAL = 10 * 60; // 10 minutes\n    public static final int TARGET_TIMESPAN = 3 * 7 * 24 * 60 * 60; // 3.5 days\n    public static final int TARGET_SPACING = 150; // 2.5 minutes\n    public static final long MAX_MONEY = 20000000 * Coin.CENT; // 20 million wealth\n    public static final int RETARGET_BLOCK_COUNT = 100;\n    public static final int DIP0001_WINDOW_SIZE = 100;\n    public static final int DIP0001_SWITCH_HEIGHT = 214500;\n    public static final int SPENDABLE_COINBASE_DEPTH = 100;\n    private static DashNetParams regTestParams;\n    private static DashNetParams prodNetParams;\n    private static DashNetParams testNet3Params;\n    private static DashNetParams testNet2Params;\n    private static DashNetParams unitTests;\n\n    public static synchronized NetworkParameters getParametersFromAddressByte(int addressByte) {\n        switch (addressByte) {\n            case ADDRESS_HEADER:\n                return prodNetParams;\n            case 76:\n                return prodNetParams; // what the hell is 76?\n            case 196:\n                return testNet3Params;\n            case 0x6f: // testnet prefix 'o'\n                return testNet2Params;\n            default:\n                throw new RuntimeException(\"Invalid address byte \" + addressByte);\n        }\n    }\n\n    public static synchronized NetworkParameters getUnitTest() {\n        if (unitTests == null) {\n            unitTests = new DashNetParams(UnitTestParams.get());\n        }\n        return unitTests;\n    }\n\n    public static synchronized NetworkParameters getRegTest() {\n        if (regTestParams == null) {\n            regTestParams = new DashNetParams(RegTestParams.get());\n        }\n        return regTestParams;\n    }\n\n    public static synchronized NetworkParameters getTestNet2() {\n        if (testNet2Params == null) {\n            testNet2Params = new DashNetParams(TestNet2Params.get());\n        }\n        return testNet2Params;\n    }\n\n    public static synchronized NetworkParameters getTestNet3() {\n        if (testNet3Params == null) {\n            testNet3Params = new DashNetParams(TestNet3Params.get());\n        }\n        return testNet3Params;\n    }\n\n    public static synchronized NetworkParameters getProdNet() {\n        if (prodNetParams == null) {\n            prodNetParams = new DashNetParams(ProdNetParams.get());\n        }\n        return prodNetParams;\n    }\n\n    private DashNetParams() {\n        super();\n    }\n\n    public DashNetParams(NetworkParameters copiedParams) {\n        super(copiedParams);\n        paramsSet.clear(); // Dash does not support multi-signature transactions\n    }\n\n    final static Map<Integer, Sha256Hash> checkpoints = new HashMap<Integer, Sha256Hash>();\n\n    static {\n        checkpoints.put(0, Sha256Hash.wrap(\"0000093926437d74b1b497007f32a93ebf568384d39883f0dba8e94dca489d43\"));\n        checkpoints.put(2100, Sha256Hash.wrap(\"000000029e2c98221250727b88b969a5dba9012510668f0a4f1e4de94b98988c\"));\n        checkpoints.put(20900, Sha256Hash.wrap(\"000000006800fe2a9190e32f80c99841ae65d371ccadeb97a0de23de4f4633ad\"));\n        checkpoints.put(25000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(50000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(75000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(100000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(125000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(150000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(175000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(200000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(225000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(250000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints.put(275000, Sha256Hash.wrap(\"000000005364f7845b7111da8f39b2b8a59d172ae99a28b52925992ab5dbc2c8\"));\n        checkpoints."
    },
    {
        "Example": 32,
        "Generated Java Code": "```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nimport redis.clients.jedis.Jedis;\n\npublic class Indexer {\n\n    private Jedis jedis;\n    private String urlSetKey = \"urlSet\";\n    private String termCounterKey = \"termCounter\";\n\n    public Indexer() {\n        // connect to redis server on localhost\n        jedis = new Jedis(\"localhost\");\n    }\n\n    public void indexPage(String url, String content) {\n        // add the url to the urlset\n        jedis.sadd(urlSetKey, url);\n\n        // parse the content and get the terms\n        Set<String> terms = getTerms(content);\n\n        // for each term, increment the count in the term counter\n        for (String term : terms) {\n            jedis.hincrBy(termCounterKey, term, 1);\n        }\n    }\n\n    public void deleteURLSets() {\n        jedis.del(urlSetKey);\n    }\n\n    public void deleteTermCounters() {\n        jedis.del(termCounterKey);\n    }\n\n    public Set<String> getURLs() {\n        return jedis.smembers(urlSetKey);\n    }\n\n    public Map<String, Integer> getCounts() {\n        Map<String, Integer> counts = new HashMap<>();\n        for (Entry<String, String> entry : jedis.hgetAll(termCounterKey).entrySet()) {\n            counts.put(entry.getKey(), Integer.parseInt(entry.getValue()));\n        }\n        return counts;\n    }\n\n    public Map<String, Integer> getCountsFaster() {\n        // Get the keys for the term counters\n        Set<String> termCounterKeys = jedis.hkeys(termCounterKey);\n\n        // Create a map to store the counts\n        Map<String, Integer> counts = new HashMap<>();\n\n        // Get the counts for each term counter\n        for (String termCounterKey : termCounterKeys) {\n            counts.put(termCounterKey, Integer.parseInt(jedis.hget(termCounterKey, \"count\")));\n        }\n\n        return counts;\n    }\n\n    public void loadIndex() {\n        try {\n            // open the index file\n            BufferedReader reader = new BufferedReader(new FileReader(new File(\"index.txt\")));\n\n            // read the urls and terms from the file\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] parts = line.split(\" \");\n                String url = parts[0];\n                String term = parts[1];\n\n                // add the url to the urlset\n                jedis.sadd(urlSetKey, url);\n\n                // increment the count for the term\n                jedis.hincrBy(termCounterKey, term, 1);\n            }\n\n            // close the file\n            reader.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean isIndexed(String url) {\n        return jedis.sismember(urlSetKey, url);\n    }\n\n    public void deleteAllKeys() {\n        jedis.flushAll();\n    }\n\n    public static void main(String[] args) {\n        // create an indexer instance\n        Indexer indexer = new Indexer();\n\n        // add some pages to the index\n        indexer.indexPage(\"http://www.example.com\", \"this is a test page\");\n        indexer.indexPage(\"http://www.example.com/about\", \"this is the about page\");\n        indexer.indexPage(\"http://www.example.com/blog\", \"this is the blog page\");\n\n        // print the index\n        indexer.printIndex();\n\n        // delete the index\n        indexer.deleteAllKeys();\n    }\n\n    public void printIndex() {\n        // get the urls and terms from the index\n        Set<String> urls = getURLs();\n        Map<String, Integer> counts = getCounts();\n\n        // print the urls and terms\n        for (String url : urls) {\n            System.out.println(url);\n            for (Entry<String, Integer> entry : counts.entrySet()) {\n                if (jedis.sismember(url, entry.getKey())) {\n                    System.out.println(\"\\t\" + entry.getKey() + \" (\" + entry.getValue() + \")\");\n                }\n            }\n        }\n    }\n\n    private Set<String> getTerms(String content) {\n        // split the content into words\n        String[] words = content.split(\" \");\n\n        // create a set to store the terms\n        Set<String> terms = new TreeSet<>();\n\n        // add the words to the set\n        for (String word : words) {\n            terms.add(word.toLowerCase());\n        }\n\n        // return the set of terms\n        return terms;\n    }\n\n}\n```"
    },
    {
        "Example": 33,
        "Generated Java Code": "```java\nimport com.google.common.collect.Sets;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic class BlockMetadataManagerView {\n\n  private final StorageDir mDir;\n  private final long mBlocksToMoveOutSize = 0;\n  private final long mBlocksToMoveInSize = 0;\n  private final StorageTierView mTierView;\n  private final Set<Long> mBlocksToMoveIn = Sets.newConcurrentHashSet();\n  private final Set<Long> mBlocksToMoveOut = Sets.newConcurrentHashSet();\n\n  public long getEvitableBytes() {\n    return 0;\n  }\n\n  public StorageTierView getParentTierView() {\n    return null;\n  }\n\n  public boolean isMarkedToMoveOut(long blockId) {\n    return mBlocksToMoveOut.contains(blockId);\n  }\n\n  public void markBlockMoveIn(long blockId, TempBlockMeta tempBlockMeta) {\n    mBlocksToMoveIn.add(blockId);\n    mBlocksToMoveOut.remove(blockId);\n    mTierView.addBlockMeta(blockId, tempBlockMeta);\n  }\n\n  public TempBlockMeta createTempBlockMeta(int dirViewIndex) {\n    return null;\n  }\n\n  public int getDirViewIndex() {\n    return 0;\n  }\n\n  public long getCommittedBytes() {\n    return 0;\n  }\n\n  public List<BlockMeta> getEvictableBlocks() {\n    return null;\n  }\n\n  public long getCapacityBytes() {\n    return 0;\n  }\n\n  public long getAvailableBytes() {\n    return 0;\n  }\n\n  public BlockStoreLocation toBlockStoreLocation() {\n    return null;\n  }\n\n  public void markBlockMoveOut(long blockId) {\n    mBlocksToMoveOut.add(blockId);\n    mBlocksToMoveIn.remove(blockId);\n    mTierView.removeBlockMeta(blockId);\n  }\n}\n```"
    },
    {
        "Example": 34,
        "Generated Java Code": "```java\nimport java.util.List;\n\npublic interface OAuthAuthorization {\n\n    void setScopes(List<OAuthPermission> scopes);\n\n    void setPreAuthorized(boolean preAuthorized);\n\n    void setSubject(UserSubject subject);\n\n    String getTokenKey();\n\n    boolean isPreAuthorized();\n\n    long getLifetime();\n\n    Client getClient();\n\n    long getIssuedAt();\n\n    String getTokenSecret();\n\n    List<OAuthPermission> getScopes();\n}\n```"
    },
    {
        "Example": 35,
        "Generated Java Code": "```java\npublic final class Repeater {\n\n    private static final int RPT_STR = 1 << 0;\n    private static final int RPT_CHAR = 1 << 1;\n    private static final int RPT_BYTE = 1 << 2;\n    private static final int RPT_INT = 1 << 3;\n\n    private static final char CHAR_EOF = 0x2000;\n\n    private final int bitVec;\n    private final char type;\n    private int repeatCount;\n    private int charByte;\n\n    public Repeater(int bitVec, char type, int repeatCount, int charByte) {\n        this.bitVec = bitVec;\n        this.type = type;\n        this.repeatCount = repeatCount;\n        this.charByte = charByte;\n    }\n\n    public int getFormatRepeatCount() {\n        if ((bitVec & RPT_STR) != 0 || (bitVec & RPT_CHAR) != 0) {\n            return repeatCount;\n        }\n        return (type == 'x') ? 1 : 0;\n    }\n\n}\n```"
    },
    {
        "Example": 36,
        "Generated Java Code": "```java\nimport java.util.Date;\n\npublic class DataValidationDetails {\n\n    private Long expectedDataUnitId;\n    private Long seqNo;\n    private Long dataSetId;\n    private Long dataUnitId;\n    private String expectedValue;\n    private String actualValue;\n    private Long expectedDataSetId;\n    private String errorCode;\n    private Long testId;\n    private String failedAttributeName;\n    private Date errorTime;\n    private String srcFileName;\n    private String errorMsg;\n\n    public Long getExpectedDataUnitId() {\n        return expectedDataUnitId;\n    }\n\n    public void setExpectedDataUnitId(Long expectedDataUnitId) {\n        this.expectedDataUnitId = expectedDataUnitId;\n    }\n\n    public Long getSeqNo() {\n        return seqNo;\n    }\n\n    public void setSeqNo(Long seqNo) {\n        this.seqNo = seqNo;\n    }\n\n    public Long getDataSetId() {\n        return dataSetId;\n    }\n\n    public void setDataSetId(Long dataSetId) {\n        this.dataSetId = dataSetId;\n    }\n\n    public Long getDataUnitId() {\n        return dataUnitId;\n    }\n\n    public void setDataUnitId(Long dataUnitId) {\n        this.dataUnitId = dataUnitId;\n    }\n\n    public String getExpectedValue() {\n        return expectedValue;\n    }\n\n    public void setExpectedValue(String expectedValue) {\n        this.expectedValue = expectedValue;\n    }\n\n    public String getActualValue() {\n        return actualValue;\n    }\n\n    public void setActualValue(String actualValue) {\n        this.actualValue = actualValue;\n    }\n\n    public Long getExpectedDataSetId() {\n        return expectedDataSetId;\n    }\n\n    public void setExpectedDataSetId(Long expectedDataSetId) {\n        this.expectedDataSetId = expectedDataSetId;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n\n    public Long getTestId() {\n        return testId;\n    }\n\n    public void setTestId(Long testId) {\n        this.testId = testId;\n    }\n\n    public String getFailedAttributeName() {\n        return failedAttributeName;\n    }\n\n    public void setFailedAttributeName(String failedAttributeName) {\n        this.failedAttributeName = failedAttributeName;\n    }\n\n    public Date getErrorTime() {\n        return errorTime;\n    }\n\n    public void setErrorTime(Date errorTime) {\n        this.errorTime = errorTime;\n    }\n\n    public String getSrcFileName() {\n        return srcFileName;\n    }\n\n    public void setSrcFileName(String srcFileName) {\n        this.srcFileName = srcFileName;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    @Override\n    public String toString() {\n        return \"DataValidationDetails{\" +\n                \"expectedDataUnitId=\" + expectedDataUnitId +\n                \", seqNo=\" + seqNo +\n                \", dataSetId=\" + dataSetId +\n                \", dataUnitId=\" + dataUnitId +\n                \", expectedValue='\" + expectedValue + '\\'' +\n                \", actualValue='\" + actualValue + '\\'' +\n                \", expectedDataSetId=\" + expectedDataSetId +\n                \", errorCode='\" + errorCode + '\\'' +\n                \", testId=\" + testId +\n                \", failedAttributeName='\" + failedAttributeName + '\\'' +\n                \", errorTime=\" + errorTime +\n                \", srcFileName='\" + srcFileName + '\\'' +\n                \", errorMsg='\" + errorMsg + '\\'' +\n                '}';\n    }\n}\n```"
    },
    {
        "Example": 37,
        "Generated Java Code": "```java\nimport java.util.HashMap;\nimport java.util.Iterator;\n\npublic class SymbolSet {\n\n    private HashMap<String, Symbol> _all;\n\n    public SymbolSet() {\n        _all = new HashMap<String, Symbol>();\n    }\n\n    public boolean add(String sym) {\n        Symbol s = new Symbol(sym);\n        if (_all.containsKey(sym)) {\n            return false;\n        }\n        _all.put(sym, s);\n        return true;\n    }\n\n    public Iterator<Symbol> iterator() {\n        return _all.values().iterator();\n    }\n\n    public int size() {\n        return _all.size();\n    }\n\n    public void not_null() {\n        for (Symbol s : _all.values()) {\n            if (s.isNull()) {\n                throw new IllegalArgumentException(\"SymbolSet contains null symbol\");\n            }\n        }\n    }\n\n    public int hashCode() {\n        int hc = 0;\n        for (Symbol s : _all.values()) {\n            hc += s.hashCode();\n        }\n        return hc;\n    }\n\n    public boolean is_superset_of(SymbolSet other) {\n        for (Symbol s : other._all.values()) {\n            if (!_all.containsKey(s.getText())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean equals(Object other) {\n        if (!(other instanceof SymbolSet)) {\n            return false;\n        }\n        SymbolSet otherSet = (SymbolSet) other;\n        return is_superset_of(otherSet) && otherSet.is_superset_of(this);\n    }\n\n    public boolean equals(SymbolSet other) {\n        return is_superset_of(other) && other.is_superset_of(this);\n    }\n\n    public boolean is_subset_of(SymbolSet other) {\n        return other.is_superset_of(this);\n    }\n\n    public String toString() {\n        return _all.toString();\n    }\n\n    public void remove(String sym) {\n        _all.remove(sym);\n    }\n\n    public void remove(Symbol sym) {\n        _all.remove(sym.getText());\n    }\n\n    public static class Symbol {\n\n        private String _text;\n\n        public Symbol(String text) {\n            _text = text;\n        }\n\n        public String getText() {\n            return _text;\n        }\n\n        public boolean isNull() {\n            return _text.equals(\"$$\");\n        }\n\n        public int hashCode() {\n            return _text.hashCode();\n        }\n\n        public boolean equals(Object other) {\n            if (!(other instanceof Symbol)) {\n                return false;\n            }\n            Symbol otherSymbol = (Symbol) other;\n            return _text.equals(otherSymbol._text);\n        }\n\n        public String toString() {\n            return _text;\n        }\n    }\n}\n```"
    },
    {
        "Example": 38,
        "Generated Java Code": "```java\nprivate static void handleWsRec(Node node, PrintWriter out, boolean stripWhitespace, Map<QName, String> attributes) throws IOException {\n    boolean basic = getQName(node).equals(BASIC);\n    if (basic) {\n        String ws = getWhitespaceString(node, stripWhitespace);\n        out.write(ws);\n    }\n\n    boolean leadingSep = basic;\n    for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n        short nodeType = child.getNodeType();\n        switch (nodeType) {\n            case Node.TEXT_NODE:\n            case Node.CDATA_SECTION_NODE:\n                // These blocks are handled in the normalizeWhitespace method\n                break;\n            case Node.ELEMENT_NODE:\n                if (leadingSep) {\n                    out.write(SEPARATOR);\n                    leadingSep = false;\n                }\n                handleWsRec(child, out, stripWhitespace, attributes);\n                break;\n            case Node.COMMENT_NODE:\n                break;\n            default:\n                LOGGER.warning(\"Unexpected node type \" + node.getNodeType() + \". Will be ignored.\");\n        }\n    }\n    if (basic) {\n        // handle trailing whitespace\n        String ws = getWhitespaceString(node, stripWhitespace);\n        if (ws.length() > 0) {\n            if (!leadingSep) {\n                out.write(SEPARATOR);\n            }\n            out.write(ws);\n        }\n    }\n}\n```"
    },
    {
        "Example": 39,
        "Generated Java Code": "```java\nimport javax.xml.bind.MarshalledObject;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\n\npublic class MarshalRegistry implements java.io.Serializable {\n    private Map<Object, String> instances = Collections.<Object, String>emptyMap();\n    private Map<String, Object> notMarshalled = Collections.<String, Object>emptyMap();\n    private static int nextId = 0;\n\n    public MarshalRegistry() {\n    }\n\n    public MarshalledObject create(Object object, MarshalRegistry.Context context, Marshaller marshaller) throws Exception {\n        String id = getInstanceId(object, context);\n        if (id == null) {\n            id = \"object_\" + nextId++;\n            instances = new HashMap<>(instances);\n            instances.put(object, id);\n        }\n        return marshaller.getXMLAdapter(MarshalledObject.class).marshal(id);\n    }\n\n    public Object unmarshal(MarshalledObject objectObj, MarshalRegistry.Context context, Unmarshaller unmarshaller) throws Exception {\n        Object original = null;\n        String id = objectObj.get();\n        if (id != null) {\n            original = instances.get(id);\n            if (original == null) {\n                original = notMarshalled.get(id);\n                if (original == null) {\n                    // Not referenced previously\n                    // most likely the target object will be annotated with @XmlAnyElement\n                    Object r = unmarshaller.unmarshal(objectObj.getReader(), Object.class);\n                    addNotMarshalled(id, r);\n                    original = r;\n                }\n            }\n        }\n        if (original == null) {\n            original = unmarshaller.unmarshal(objectObj.getReader());\n        }\n        return original;\n    }\n\n    public String getInstanceId(Object object, MarshalRegistry.Context context) {\n        for (Iterator<Object> iter = iterator(context); iter.hasNext();) {\n            Object other = iter.next();\n            if (object == other) {\n                return instances.get(other);\n            }\n        }\n        return null;\n    }\n\n    public Iterator<Object> iterator(MarshalRegistry.Context context) {\n        return instances.keySet().iterator();\n    }\n\n    public void addNotMarshalled(String id, Object object) {\n        notMarshalled = new HashMap<>(notMarshalled);\n        notMarshalled.put(id, object);\n    }\n\n    public static class Context implements java.io.Serializable {\n        private MarshalRegistry registry;\n\n        public Context(MarshalRegistry registry) {\n            this.registry = registry;\n        }\n\n        public MarshalRegistry getRegistry() {\n            return registry;\n        }\n    }\n\n    public static class Adapter extends XmlAdapter<MarshalledObject, Object> {\n        private transient MarshalRegistry registry;\n\n        @Override\n        public void setContext(Object context) {\n            registry = ((MarshalRegistry.Context) context).getRegistry();\n        }\n\n        @Override\n        public MarshalledObject marshal(Object object) throws Exception {\n            return registry.create(object, (MarshalRegistry.Context) getContext(), (Marshaller) ((XMLAdapter.UnmarshallingBinder) getContext()).getUnmarshaller().getUnmarshaller());\n        }\n\n        @Override\n        public Object unmarshal(MarshalledObject object) throws Exception {\n            return registry.unmarshal(object, (MarshalRegistry.Context) getContext(), (Unmarshaller) ((XMLAdapter.MarshallingBinder) getContext()).getMarshaller().getMarshaller());\n        }\n    }\n}\n```"
    },
    {
        "Example": 40,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<Integer> list = new ArrayList<>();\n    list.add(1);\n    list.add(2);\n    List<Integer> newList = Main.nonNullList(list);\n    System.out.println(newList);\n\n    List<Integer> list2 = new ArrayList<>();\n    list2.add(1);\n    list2.add(2);\n\n    List<String> map = Main.map(list2, (Integer i) -> Integer.toString(i));\n    System.out.println(map);\n\n    List<Integer> list3 = new ArrayList<>();\n    list3.add(1);\n    list3.add(2);\n\n    List<Integer> list4 = new ArrayList<>();\n    list4.add(1);\n    list4.add(2);\n\n    Iterator<Pair<Integer, Integer>> pairs = Main.pairs(list3, list4);\n    while (pairs.hasNext()) {\n      System.out.println(pairs.next());\n    }\n  }\n\n  public static <T> List<T> nonNullList(List<T> list) {\n    return Optional.ofNullable(list).orElse(new ArrayList<>());\n  }\n\n  public static <T, U> List<U> map(List<T> list, Function<T, U> mapper) {\n    return list.stream().map(mapper).toList();\n  }\n\n  public static <T> Iterator<Pair<T, T>> pairs(List<T> list1, List<T> list2) {\n    return Stream.of(list1, list2).flatMap(list -> list.stream()).distinct().sorted().map(e -> Pair.of(e, e)).iterator();\n  }\n}\n\nclass Pair<T> {\n  private final T first;\n  private final T second;\n\n  public static <T> Pair<T> of(T first, T second) {\n    return new Pair<>(first, second);\n  }\n\n  public Pair(T first, T second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  public T first() {\n    return first;\n  }\n\n  public T second() {\n    return second;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Pair<?> pair = (Pair<?>) o;\n    return first.equals(pair.first) && second.equals(pair.second);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(first, second);\n  }\n\n  @Override\n  public String toString() {\n    return \"(\" + first + \", \" + second + \")\";\n  }\n}\n\n```"
    },
    {
        "Example": 41,
        "Generated Java Code": "```java  \nimport com.google.cloud.dataplex.v1.MetadataServiceClient;\nimport com.google.cloud.dataplex.v1.MetaData.ParametersMetaData;\nimport com.google.cloud.dataplex.v1.MetaData.Template;\nimport com.google.cloud.dataplex.v1.MetaData.Template.ParameterValue;\nimport com.google.cloud.dataplex.v1.MetaData.Template.SQLParameter;\nimport com.google.cloud.dataplex.v1.MetaData.WorkflowImpl;\nimport com.google.protobuf.FieldMask;\nimport com.google.protobuf.util.FieldMaskUtil;\nimport java.io.IOException;\n\npublic class UpdateTemplate {\n\n  public static void updateTemplate() throws IOException {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"my-project-id\";\n    String location = \"us-central1\";\n    String lakeId = \"my-lake-id\";\n    String zoneId = \"my-zone-id\";\n    String templateId = \"my-template-id\";\n    updateTemplate(projectId, location, lakeId, zoneId, templateId);\n  }\n\n  // Updates the Template.\n  public static void updateTemplate(\n      String projectId,\n      String location,\n      String lakeId,\n      String zoneId,\n      String templateId)\n      throws IOException {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (MetadataServiceClient client = MetadataServiceClient.create()) {\n      // Construct the full Template name.\n      String templateName =\n          String.format(\n              \"projects/%s/locations/%s/lakes/%s/zones/%s/templates/%s\",\n              projectId, location, lakeId, zoneId, templateId);\n\n      // Construct the Template object to update.\n      Template template =\n          Template.newBuilder()\n              .setName(templateName)\n              .setDescription(\"Updated Template\")\n              .putParameterValues(\"param_1\", ParameterValue.newBuilder().setNumberValue(1234).build())\n              .putParameterValues(\n                  \"param_2\", ParameterValue.newBuilder().setStringValue(\"updated-value\").build())\n              .putSqlParameters(\n                  \"param_3\", SQLParameter.newBuilder().setDefaultValue(\"new-default-value\").build())\n              .build();\n\n      // Construct the field mask.\n      FieldMask fieldMask =\n          FieldMaskUtil.fromString(\"description,parameter_values,sql_parameters\");\n\n      // Send the update request to the API.\n      Template result = client.updateTemplate(template, fieldMask);\n      System.out.println(\"Template update successful: \" + result.getName());\n    }\n  }\n}  \n```"
    },
    {
        "Example": 42,
        "Generated Java Code": "```java\nimport java.io.Serializable;\n\npublic class About implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private String aboutName;\n    private static final Logger LOG = Logger.getLogger(About.class);\n\n    public String getName() {\n        return aboutName;\n    }\n\n    public String getInfo() {\n        return LOG.getName();\n    }\n\n    public boolean enable() {\n        return true;\n    }\n\n    public boolean disable() {\n        return false;\n    }\n}\n```"
    },
    {
        "Example": 43,
        "Generated Java Code": "```java\nimport java.io.StringReader;\nimport java.util.Iterator;\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.events.Attribute;\nimport javax.xml.stream.events.Characters;\nimport javax.xml.stream.events.EndElement;\nimport javax.xml.stream.events.EntityReference;\nimport javax.xml.stream.events.Namespace;\nimport javax.xml.stream.events.ProcessingInstruction;\nimport javax.xml.stream.events.StartElement;\nimport javax.xml.stream.events.XMLEvent;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\npublic class stax {\n    public static void main(String[] args) {\n        try {\n            String xml = \"<root xmlns=\\\"http://example.com/root\\\">\" + \"  <a xmlns=\\\"http://example.com/a\\\" attribute='value'/>\" + \"  <b xmlns=\\\"http://example.com/b\\\" attribute='value'/>\" + \"</root>\";\n            XMLInputFactory factory = XMLInputFactory.newInstance();\n            XMLEventReader reader = factory.createXMLEventReader(new StringReader(xml));\n            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n            NamespaceContext namespaceContext = new NamespaceContext() {\n                public String getNamespaceURI(String prefix) {\n                    if (\"root\".equals(prefix)) {\n                        return \"http://example.com/root\";\n                    } else if (\"a\".equals(prefix)) {\n                        return \"http://example.com/a\";\n                    } else if (\"b\".equals(prefix)) {\n                        return \"http://example.com/b\";\n                    } else {\n                        return null;\n                    }\n                }\n\n                public String getPrefix(String uri) {\n                    return null;\n                }\n\n                public Iterator getPrefixes(String namespaceUri) {\n                    return null;\n                }\n            };\n            Document document = documentBuilder.newDocument();\n            Element rootElement = document.createElementNS(\"http://example.com/root\", \"root\");\n            document.appendChild(rootElement);\n            while (reader.hasNext()) {\n                XMLEvent event = reader.nextEvent();\n                if (event.isStartElement()) {\n                    StartElement startElement = event.asStartElement();\n                    Element element = document.createElementNS(startElement.getName().getNamespaceURI(), startElement.getName().getLocalPart());\n                    rootElement.appendChild(element);\n                    Iterator<Attribute> attributes = startElement.getAttributes();\n                    while (attributes.hasNext()) {\n                        Attribute attribute = attributes.next();\n                        element.setAttributeNS(attribute.getName().getNamespaceURI(), attribute.getName().getLocalPart(), attribute.getValue());\n                    }\n                } else if (event.isEndElement()) {\n                    EndElement endElement = event.asEndElement();\n                    String uri = endElement.getName().getNamespaceURI();\n                    String localName = endElement.getName().getLocalPart();\n                    NodeList childNodes = rootElement.getElementsByTagNameNS(uri, localName);\n                    Element element = (Element) childNodes.item(childNodes.getLength() - 1);\n                    element.getParentNode().removeChild(element);\n                } else if (event.isCharacters()) {\n                    Characters characters = event.asCharacters();\n                    rootElement.appendChild(document.createTextNode(characters.getData()));\n                } else if (event.isProcessingInstruction()) {\n                    ProcessingInstruction processingInstruction = event.asProcessingInstruction();\n                    rootElement.appendChild(document.createProcessingInstruction(processingInstruction.getTarget(), processingInstruction.getData()));\n                } else if (event.isEntityReference()) {\n                    EntityReference entityReference = event.asEntityReference();\n                    rootElement.appendChild(document.createEntityReference(entityReference.getName()));\n                } else if (event.isNamespace()) {\n                    Namespace namespace = event.asNamespace();\n                    String prefix = namespace.getPrefix();\n                    String uri = namespace.getNamespaceURI();\n                    rootElement.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix, uri);\n                }\n            }\n            System.out.println(document.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
    },
    {
        "Example": 44,
        "Generated Java Code": "```java\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;\n\npublic class DataUnitInfo {\n\n    private static final long serialVersionUID = 1L;\n    private String isSystemDerived;\n    private String isActive;\n    private BigDecimal predecessorId;\n    private String srcFileName;\n    private BigDecimal successorId;\n    private BigDecimal feedId;\n    private String checksum;\n    private String transmissionDatasetId;\n    private String comments;\n    private String inactivationReasonType;\n    private String isFormatValid;\n    private long dataUnitId;\n    private Timestamp receiptDate;\n    private String srcUniqueFileName;\n    private Timestamp createdDate;\n    private Long dataSetId;\n    private BigDecimal fileSize;\n    private String destFileName;\n    private String loadedInCats;\n    private String checksumType;\n    private Timestamp modifiedDate;\n    private BigDecimal runId;\n    private String isPrepopulated;\n    private String isBulk;\n    private String isUpdate;\n    private String receiptDateType;\n    private String status;\n\n    public void setIsSystemDerived(String isSystemDerived) {\n        this.isSystemDerived = isSystemDerived;\n    }\n\n    public void setIsPrepopulated(String isPrepopulated) {\n        this.isPrepopulated = isPrepopulated;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public String getIsUpdate() {\n        return isUpdate;\n    }\n\n    public long getDataUnitId() {\n        return dataUnitId;\n    }\n\n    public BigDecimal getFileSize() {\n        return fileSize;\n    }\n\n    public void setInactivationReasonType(String inactivationReasonType) {\n        this.inactivationReasonType = inactivationReasonType;\n    }\n\n    public void setDataUnitId(long dataUnitId) {\n        this.dataUnitId = dataUnitId;\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public Timestamp getCreatedDate() {\n        return createdDate;\n    }\n\n    public void setFileSize(BigDecimal fileSize) {\n        this.fileSize = fileSize;\n    }\n\n    public BigDecimal getPredecessorId() {\n        return predecessorId;\n    }\n\n    public void setIsUpdate(String isUpdate) {\n        this.isUpdate = isUpdate;\n    }\n\n    public String getReceiptDateType() {\n        return receiptDateType;\n    }\n\n    public BigDecimal getFeedId() {\n        return feedId;\n    }\n\n    public void setReceiptDate(Timestamp receiptDate) {\n        this.receiptDate = receiptDate;\n    }\n\n    public Timestamp getModifiedDate() {\n        return modifiedDate;\n    }\n\n    public void setSuccessorId(BigDecimal successorId) {\n        this.successorId = successorId;\n    }\n\n    public void setDestFileName(String destFileName) {\n        this.destFileName = destFileName;\n    }\n\n    public void setIsBulk(String isBulk) {\n        this.isBulk = isBulk;\n    }\n\n    public String getIsFormatValid() {\n        return isFormatValid;\n    }\n\n    public void setDataSetId(Long dataSetId) {\n        this.dataSetId = dataSetId;\n    }\n\n    public void setIsActive(String isActive) {\n        this.isActive = isActive;\n    }\n\n    public void setChecksumType(String checksumType) {\n        this.checksumType = checksumType;\n    }\n\n    public void setFeedId(BigDecimal feedId) {\n        this.feedId = feedId;\n    }\n\n    public String getInactivationReasonType() {\n        return inactivationReasonType;\n    }\n\n    public String getSrcUniqueFileName() {\n        return srcUniqueFileName;\n    }\n\n    public Long getDataSetId() {\n        return dataSetId;\n    }\n\n    public void setReceiptDateType(String receiptDateType) {\n        this.receiptDateType = receiptDateType;\n    }\n\n    public BigDecimal getRunId() {\n        return runId;\n    }\n\n    public void setSrcFileName(String srcFileName) {\n        this.srcFileName = srcFileName;\n    }\n\n    public String getChecksumType() {\n        return checksumType;\n    }\n\n    public String getSrcFileName() {\n        return srcFileName;\n    }\n\n    public String getChecksum() {\n        return checksum;\n    }\n\n    public String getDestFileName() {\n        return destFileName;\n    }\n\n    public Timestamp getReceiptDate() {\n        return receiptDate;\n    }\n\n    public void setTransmissionDatasetId(String transmissionDatasetId) {\n        this.transmissionDatasetId = transmissionDatasetId;\n    }\n\n    public String getTransmissionDatasetId() {\n        return transmissionDatasetId;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n    }\n\n    public String getLoadedInCats() {\n        return loadedInCats;\n    }\n\n    public BigDecimal getSuccessorId() {\n        return successorId;\n    }\n\n    public void setLoadedInCats(String loadedInCats) {\n        this.loadedInCats = loadedInCats;\n    }\n\n    public String getIsPrepopulated() {\n        return isPrepopulated;\n    }\n\n    public void setSrcUniqueFileName(String srcUniqueFileName) {\n        this.srcUniqueFileName = srcUniqueFileName;\n    }\n\n    public void setChecksum(String checksum) {\n        this.checksum = checksum;\n    }\n\n    public void setIsFormatValid(String isFormatValid) {\n        this.isFormatValid = isFormatValid;\n    }\n\n    public String getIsBulk() {\n        return isBulk;\n    }\n\n    public void setRunId(BigDecimal runId) {\n        this.runId = runId;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public void setModifiedDate(Timestamp modifiedDate) {\n        this.modifiedDate = modifiedDate;\n    }\n\n    public void setCreatedDate(Timestamp createdDate) {\n        this.createdDate = createdDate;\n    }\n\n    public void setPredecessorId(BigDecimal predecessorId) {\n        this.predecessorId = predecessorId;\n    }\n\n    public String getIsSystemDerived() {\n        return isSystemDerived;\n    }\n}\n```"
    },
    {
        "Example": 45,
        "Generated Java Code": "```java\nimport com.codahale.metrics.Counter;\nimport com.codahale.metrics.Gauge;\nimport com.codahale.metrics.Histogram;\nimport com.codahale.metrics.Meter;\nimport com.codahale.metrics.MetricRegistry;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class DataServerMetrics {\n  private static final AtomicInteger ID_GENERATOR = new AtomicInteger();\n  private final MetricRegistry metricRegistry;\n  public final String name;\n\n  public DataServerMetrics(String name) {\n    this.name = name;\n    this.metricRegistry = new MetricRegistry();\n    this.metricRegistry.register(name + \".queries\", new Meter());\n  }\n\n  public Counter getQueries() {\n    return metricRegistry.counter(name + \".queries\");\n  }\n\n  // ... and similar accessor methods for other metric types\n}\n```"
    },
    {
        "Example": 46,
        "Generated Java Code": "```java\nimport org.bitcoinj.core.*;\nimport org.bitcoinj.script.*;\nimport java.util.*;\n\npublic class GetRedeemScriptKey {\n    public static void main(String[] args) {\n        // TODO: Replace these with real values.\n        String privateKey = \"yourPrivateKey\";\n        String address = \"yourAddress\";\n\n        EcKey key = ECKey.fromPrivate(new BigInteger(privateKey));\n        Address addressFromKey = Address.fromKey(NetworkParameters.prodNet(), key);\n        if (!addressFromKey.toString().equals(address)) {\n            throw new RuntimeException(\"Addresses don't match\");\n        }\n\n        redeemScript = ScriptBuilder.createP2SHOutputScript(address);\n        // Create RedeemData using key and redeemScript\n        RedeemData redeemData = RedeemData.of(key, redeemScript);\n        // Get the first key that has private bytes\n        ECKey firstKey = RedeemData.keysWithPrivateBytes(Arrays.asList(redeemData)).iterator().next();\n    }\n}\n```"
    },
    {
        "Example": 47,
        "Generated Java Code": "```java\nimport com.google.monitoring.runtime.instrumentation.Instrumentation;\nimport java.util.logging.Logger;\n\nfinal class InstrumentationService {\n  private final Logger log = Logger.getLogger(InstrumentationService.class.getName());\n  private final Instrumentation instrumentation;\n\n  InstrumentationService() {\n    instrumentation = Instrumentation.get();\n    log.info(\"Initialized instrumentation service\");\n  }\n\n  /** We're using Instrumentation here as a placeholder. */\n  Class<? extends Service> getInterface() {\n    return Instrumentation.class;\n  }\n}\n```"
    },
    {
        "Example": 48,
        "Generated Java Code": "```java  \nimport com.google.cloud.security.privateca.v1.JwtParameters;\n\npublic class SetMaxSigningKeySet {\n\n  public static void main(String[] args) {\n    // TODO(developer): Replace these variables before running the sample.\n    /* Project ID or project number of the Cloud project you want to use. */\n    String projectId = \"YOUR_PROJECT_ID\";\n\n    /*\n     * Full path of the location where the CA resides in. For a list of locations,\n     * see: https://cloud.google.com/certificate-authority-service/docs/locations.\n     */\n    String location = \"YOUR_CA_LOCATION\";\n    /* The resource name for this CA google.cloud.security.privateca.v1.CertificateAuthorityName. */\n    String caPoolName = \"YOUR_CA_POOL_NAME\";\n\n    setMaxSigningKeySet(projectId, location, caPoolName);\n  }\n\n  // Set the maximum key size used to generate a symmetric key to sign the issued certificate.\n  public static void setMaxSigningKeySet(\n      String projectId, String location, String caPoolName) {\n    try (CertificateAuthorityServiceClient client =\n        CertificateAuthorityServiceClient.create()) {\n\n      // Initialize request argument(s).\n      JwtParameters jwtParameters =\n          JwtParameters.newBuilder().setMaximumKeySize(256).build();\n\n      // Set fields in the CertificateAuthority.\n      CaPool.Builder caPool = CaPool.newBuilder().setJwtParameters(jwtParameters);\n\n      // Build the name from the project, location, and ca pool.\n      CaPoolName name = CaPoolName.of(projectId, location, caPoolName);\n\n      // Create and update the certificate authority pool.\n      CaPool response = client.updateCaPool(name, caPool.build());\n      System.out.println(\"Updated maximum key size for signing key: \" + response.getName());\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't create client.\", e);\n    }\n  }\n}  \n```"
    },
    {
        "Example": 49,
        "Generated Java Code": "```java  \nimport com.google.cloud.bigquery.BigQuery;\nimport com.google.cloud.bigquery.BigQueryException;\nimport com.google.cloud.bigquery.BigQueryOptions;\nimport com.google.cloud.bigquery.QueryJobConfiguration;\nimport com.google.cloud.bigquery.QueryParameterValue;\nimport com.google.cloud.bigquery.TableResult;\n\n// Sample to get field value\npublic class GetFieldValue {\n\n  public static void main(String[] args) {\n    // TODO(developer): Replace these variables before running the sample.\n    String query = \"SELECT @field_name FROM [bigquery-public-data:samples.shakespeare] LIMIT 1\";\n    String fieldName = \"word_count\";\n    getFieldValue(query, fieldName);\n  }\n\n  public static void getFieldValue(String query, String fieldName) {\n    try {\n      // Initialize client that will be used to send requests. This client only needs to be created\n      // once, and can be reused for multiple requests.\n      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n\n      // Note: Standard SQL is required to use query parameters.\n      QueryJobConfiguration queryConfig =\n          QueryJobConfiguration.newBuilder(query)\n              .addNamedParameter(\"field_name\", QueryParameterValue.string(fieldName))\n              .build();\n\n      TableResult results = bigquery.query(queryConfig);\n\n      results\n          .iterateAll()\n          .forEach(row -> row.forEach(val -> System.out.printf(\"%s\\n\", val.toString())));\n\n      System.out.println(\"Field value retrieved successfully\");\n    } catch (BigQueryException | InterruptedException e) {\n      System.out.println(\"Field value not retrieved. \\n\" + e.toString());\n    }\n  }\n}  \n```"
    },
    {
        "Example": 50,
        "Generated Java Code": "```java\nimport java.lang.String;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface NetworkParameters {\n  /**\n   * Shortcut for parameters for the production network.\n   * @deprecated use NetworkParameters.mainNet() instead.\n   */\n  @Deprecated\n  NetworkParameters prodNet = mainNet();\n\n  /**\n   * Shortcut for parameters for testing an unspendable coin.\n   */\n  NetworkParameters unitTests = unitTests();\n\n  /**\n   * Shortcut for parameters for the testnet.\n   */\n  NetworkParameters testNet = testNet();\n\n  /**\n   * Shortcut for parameters for the regtest mode.\n   */\n  NetworkParameters regTests = regTests();\n\n  /**\n   * Shortcut for parameters for the testnet2 mode.\n   */\n  NetworkParameters testNet2 = testNet2();\n\n  /**\n   * Shortcut for parameters for the testnet3 mode.\n   */\n  NetworkParameters testNet3 = testNet3();\n\n  /**\n   * Get the {@link NetworkParameters} object for the given string ID, or null if a matching ID is not known.\n   * @param id a string network ID.\n   * @return networkParameters or null.\n   * @throws NullPointerException if ID is null.\n   */\n  static NetworkParameters fromID(String id) {\n      for (NetworkParameters p : NetworkParameters.values()) {\n          if (p.id.equals(id)) {\n              return p;\n          }\n      }\n      return null;\n  }\n\n  /**\n   * Get the {@link NetworkParameters} object for the given payment protocol ID, or null if a matching ID is not known.\n   * @param pmtProtocolId a string payment protocol ID.\n   * @return networkParameters or null.\n   * @throws NullPointerException if PmtProtocolId is null.\n   */\n  static NetworkParameters fromPmtProtocolID(String pmtProtocolId) {\n      for (NetworkParameters p : NetworkParameters.values()) {\n          if (p.paymentProtocolId.equals(pmtProtocolId)) {\n              return p;\n          }\n      }\n      return null;\n  }\n\n  /**\n   * Returns the network parameters for Bitcoin's production (live) network.\n   * @return a NetworkParameters object.\n   */\n  static NetworkParameters mainNet() {\n      NetworkParameters params = new NetworkParameters();\n      params.id = \"org.bitcoin.production\";\n      params.paymentProtocolId = \"main\";\n      params.acceptableAddressCodes = new int[] { 0 };\n      params.dumpedPrivateKeyHeader = 128;\n      params.addressHeader = 0;\n      params.p2shHeader = 5;\n      params.bip32HeaderPub = 0x0488B21E; //The 4 byte header that serializes in base58 to \"xpub\".\n      params.bip32HeaderPriv = 0x0488ADE4; //The 4 byte header that serializes in base58 to \"xprv\"\n      params.interval = INTERVAL; // 10 minutes\n      params.targetTimespan = TARGET_TIMESPAN; // 14 days\n      params.maxTarget = MAX_TARGET;\n      params.port = 8333;\n      params.packetMagic = 0xf9beb4d9L;\n      params.genesisBlock = genesisBlock;\n      params.dnsSeeds = new String[] {\n          \"seed.bitcoin.sipa.be\",         // Pieter Wuille\n          \"dnsseed.bluematt.me\",         // Matt Corallo\n          \"dnsseed.bitcoin.dashjr.org\",  // Luke Dashjr\n          \"seed.bitcoinstats.com\",       // Chris Decker\n          \"seed.bitcoin.jonasschnelli.ch\",// Jonas Schnelli\n          \"seed.btc.petertodd.org\",      // Peter Todd\n          \"seed.bitcoin.sprovoost.nl\",   // Sjors Provoost\n          \"dnsseed.emzy.de\",             // Stephan Oeste\n      };\n      params.subsidyDecreaseBlockCount = 210000;\n      params.spendableCoinbaseDepth = 100;\n      params.subsidyDecreaseBlockCount = 210000;\n      params.dumpedPrivateKeyHeader = 128;\n      params.acceptableAddressCodes = new int[] { 0 };\n      params.alertSigningKey = SATOSHI_KEY;\n      return params;\n  }\n\n  /**\n   * Returns a testnet {@link NetworkParameters} object.\n   * @return a TestNetParams object.\n   */\n  static NetworkParameters testNet() {\n      NetworkParameters params = NetworkParameters.prodNet();\n      params.id = \"org.bitcoin.test\";\n      params.addressHeader = 111;\n      params.p2shHeader = 196;\n      params.port = 18333;\n      params.packetMagic = 0xfabfb5daL;\n      params.dnsSeeds = new String[] {\n          \"testnet-seed.bitcoin.petertodd.org\",\n          \"testnet-seed.bluematt.me\",\n      };\n      params.genesisBlock = testNetGenesisBlock;\n      params.subsidyDecreaseBlockCount = 20160;\n      params.spendableCoinbaseDepth = 100;\n      params.alertSigningKey = TESTNET_SATOSHI_KEY;\n      return params;\n  }\n\n  /**\n   * Returns a regtest {@link NetworkParameters} object.\n   * @return a TestNetParams object.\n   */\n  static NetworkParameters regTests() {\n      NetworkParameters params = NetworkParameters.prodNet();\n      params.id = \"org.bitcoin.regtest\";\n      params.addressHeader = 111;\n      params.p2shHeader = 196;\n      params.port = 18444;\n      params.interval = INTERVAL;\n      params.targetTimespan = TARGET_TIMESPAN;\n      params.maxTarget = MAX_TARGET;\n      params.dnsSeeds = null;\n      params.genesisBlock = regTestGenesisBlock;\n      params.subsidyDecreaseBlockCount = 150;\n      params.spendableCoinbaseDepth = 0;\n      params.alertSigningKey = TESTNET_SATOSHI_KEY;\n      return params;\n  }\n\n  /**\n   * Returns a unit test {@link NetworkParameters} object.\n   * @return a UnitTestParams object.\n   */\n  static NetworkParameters unitTests() {\n      NetworkParameters params = NetworkParameters.prodNet();\n      params.id = \"org.bitcoin.unittest\";\n      params.addressHeader = 111;\n      params.p2shHeader = 196;\n      params.port = 18334;\n      params.genesisBlock = unitTestGenesisBlock;\n      params.dnsSeeds = null;\n      params.spendableCoinbaseDepth = 0;\n      params.subsidyDecreaseBlockCount = 100;\n      params.alertSigningKey = TESTNET_SATOSHI_KEY;\n      return params;\n  }\n\n  /**\n   * Returns a testnet2 {@link NetworkParameters} object.\n   * @return a TestNet2Params object.\n   */\n  static NetworkParameters testNet2() {\n      NetworkParameters params = NetworkParameters.prodNet();\n      params.id = \"org.bitcoin.test2\";\n      // Difficulty adjustment interval is 2015 seconds, no retargets\n      params.interval = 2015;\n      params.targetTimespan = 2015 * 4;  // 34 minutes\n      params.maxTarget = NetworkParameters.MAX_TARGET;\n      params.addressHeader = 111;\n      params.p2shHeader = 196;\n      params.port = 17334;\n      params.packetMagic = 0xfcc1b7dcL;\n      params.genesisBlock = testNet2GenesisBlock;\n      params.dnsSeeds = new String[] {\n          \"testnet2-seed.bitcoin.petertodd.org\",\n          \"testnet2-seed.bluematt.me\",\n      };\n      params.spendableCoinbaseDepth = 0;\n      params.subsidyDecreaseBlockCount = 20160;\n      params.alertSigningKey = TESTNET_SATOSHI_KEY;\n      return params;\n  }\n\n  /**\n   * Returns a testnet3 {@link NetworkParameters} object.\n   * @return a TestNet3Params object.\n   */\n  static NetworkParameters testNet3() {\n      NetworkParameters params = NetworkParameters.prodNet();\n      params.id = \"org.bitcoin.test3\";\n      // Difficulty adjustment interval is 2015 seconds,"
    },
    {
        "Example": 51,
        "Generated Java Code": "```java\nimport org.bitcoinj.core.Coin;\nimport org.bitcoinj.core.Monetary;\n\npublic class MonetaryTest {\n\n    Coin coin = Coin.COIN;\n    int smallestUnitExponent = coin.smallestUnitExponent;\n    long satoshis = coin.satoshis;\n    String toString = coin.toString();\n    long value = coin.getValue();\n    Coin add = Coin.add(coin, coin);\n    Coin subtract = Coin.subtract(coin, coin);\n    boolean signum = coin.signum() > 0;\n    Coin[] divideAndRemainder = Coin.divideAndRemainder(coin, 2);\n    int compareTo = coin.compareTo(coin);\n    long longValue = coin.longValue();\n    String toFriendlyString = coin.toFriendlyString();\n    String toPlainString = coin.toPlainString();\n    Coin negated = coin.negate();\n    boolean equals = coin.equals(coin);\n    int compareTo2 = Monetary.CENT.compareTo(Monetary.MILLICOIN);\n    Coin amount = Monetary.CENT;\n    boolean isZero = coin.isZero();\n    Coin divide = coin.divide(2);\n    long divide2 = coin.divide(2);\n    Coin shiftRight = coin.shiftRight(2);\n    Coin shiftLeft = coin.shiftLeft(2);\n    Coin multiply = coin.multiply(2);\n    boolean isGreaterThan = coin.isGreaterThan(coin);\n    boolean isLessThan = coin.isLessThan(coin);\n    boolean isPositive = coin.isPositive();\n    boolean isNegative = coin.isNegative();\n    Coin valueOf = Coin.valueOf(satoshis);\n    Coin valueOf2 = Coin.valueOf(2, satoshis);\n    Coin parseCoin = Coin.parseCoin(\"0.00000001\");\n    int hashCode = coin.hashCode();\n    long satoshiMax = Coin.MAX_SATOSHIS;\n\n}\n```"
    },
    {
        "Example": 52,
        "Generated Java Code": "```java\nMenuItem mMenuItem = ...;\nmMenuItem.setActionView(R.layout.action_view);\n\n```"
    },
    {
        "Example": 53,
        "Generated Java Code": "```java\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.when;\n\nimport com.google.cloud.securitycenter.v1.NotificationMessage;\nimport com.google.cloud.securitycenter.v1.SecurityMarks;\nimport com.google.cloud.servicedirectory.v1.RegistrationServiceClient;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.assertj.core.api.Assertions;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\n/**\n * Unit tests for NotificationController.\n */\n@RunWith(JUnit4.class)\npublic class NotificationControllerTest {\n  // The System Property key for user notification channels.\n  private static final String PROPERTY_USER_STREAMING_CHANNEL =\n      System.getenv(\"PUBSUB_VERIFICATION_TOKEN\");\n  // The System Property key for service account notification channels.\n  private static final String PROPERTY_PROJECT_STREAMING_CHANNEL =\n      System.getenv(\"PUBSUB_VERIFICATION_TOKEN_SA\");\n  // The value of the user property key.\n  private static final String USER_STREAMING_CHANNEL = PROPERTY_USER_STREAMING_CHANNEL;\n  // The value of the service account property key.\n  private static final String PROJECT_STREAMING_CHANNEL = PROPERTY_PROJECT_STREAMING_CHANNEL;\n  // The alert names for the NotificationMessage.\n  private static final List<String> ALERT_IDS = Arrays.asList(\"alertId1\", \"alertId2\");\n  // The message of the NotificationMessage.\n  private static final String MESSAGE = \"message\";\n  // The project identifier for user notifications.\n  private static final String TEST_PROJECT_ID = \"test-project-id\";\n  // The project identifier for service account notifications.\n  private static final String TEST_SA_PROJECT_ID = \"test-sa-project-id\";\n  // The user id for user notifications.\n  private static final String TEST_USER_ID = \"test-user-id\";\n  // The list of known notification clients.\n  private static final Map<String, NotificationClient> KNOWN_CLIENTS = new HashMap<>();\n  // The verification signature for user notifications.\n  private static final String TEST_SIGNATURE = \"testSignature\";\n  // The encoded verification signature for user notifications.\n  private static final String TEST_ENCODED_SIGNATURE = Base64.getEncoder().encodeToString(TEST_SIGNATURE.getBytes());\n  // The verification signature for service account notifications.\n  private static final String TEST_SA_SIGNATURE = \"test-sa-signature\";\n  // The encoded verification signature for service account notifications.\n  private static final String TEST_SA_ENCODED_SIGNATURE = Base64.getEncoder().encodeToString(TEST_SA_SIGNATURE.getBytes());\n  // The testServerSession object to pass into the NotificationController methods.\n  private ServerSession mockServerSession;\n  // The mockServerMessage object to pass into the NotificationController methods.\n  private ServerMessage mockServerMessage;\n  // The mock serverServiceClient object to pass into the NotificationController methods.\n  @Mock\n  private RegistrationServiceClient mockServiceClient;\n  // The user notification client to be used by the NotificationController.\n  private final NotificationClient userNotificationClient =\n      new NotificationClient(\n          TEST_PROJECT_ID,\n          USER_STREAMING_CHANNEL,\n          KNOWN_CLIENTS,\n          TEST_SIGNATURE,\n          mockServerSession,\n          mockServiceClient);\n  // The service account notification client to be used by the NotificationController.\n  private final NotificationClient saNotificationClient =\n      new NotificationClient(\n          TEST_SA_PROJECT_ID,\n          PROJECT_STREAMING_CHANNEL,\n          KNOWN_CLIENTS,\n          TEST_SA_SIGNATURE,\n          mockServerSession,\n          mockServiceClient);\n  // The NotificationController to be tested.\n  private NotificationController notificationController;\n\n  @Captor\n  private ArgumentCaptor<NotificationMessage> notificationMessageCaptor;\n\n  @Before\n  public void setUp() throws Exception {\n    MockitoAnnotations.initMocks(this);\n    notificationController = new NotificationController(userNotificationClient, saNotificationClient);\n    mockServerSession = mock(ServerSession.class);\n    mockServerMessage = mock(ServerMessage.class);\n    when(mockServerSession.getId()).thenReturn(MOCK_SESSION_ID);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullUser() {\n    when(mockServerMessage.getDict()).thenReturn(new HashMap<>());\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullTitle() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    eventDict.put(\"timestamp\", \"testTime\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    eventDict.put(\"timestamp\", \"testTime\");\n    eventDict.put(\"title\", \"\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullMessage() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    eventDict.put(\"timestamp\", \"testTime\");\n    eventDict.put(\"title\", \"testTitle\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    eventDict.put(\"timestamp\", \"testTime\");\n    eventDict.put(\"title\", \"testTitle\");\n    eventDict.put(\"message\", \"\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullApplication() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    eventDict.put(\"timestamp\", \"testTime\");\n    eventDict.put(\"title\", \"testTitle\");\n    eventDict.put(\"message\", \"testMessage\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication() {\n    Map<String, Object> eventDict = new HashMap<>();\n    eventDict.put(\"user\", \"testUser\");\n    eventDict.put(\"timestamp\", \"testTime\");\n    eventDict.put(\"title\", \"testTitle\");\n    eventDict.put(\"message\", \"testMessage\");\n    eventDict.put(\"application\", \"\");\n    when(mockServerMessage.getDict()).thenReturn(eventDict);\n    Assertions.assertThatThrownBy(() -> {\n      notificationController.handleEvent(mockServerSession, mockServerMessage);\n    }).isInstanceOf(IllegalArgumentException.class);\n  }\n\n  @Test\n  public void testDeletePersistentNotificationThrows"
    },
    {
        "Example": 54,
        "Generated Java Code": "```java\nimport java.time.OffsetTime;\nimport java.time.temporal.ChronoField;\nimport java.time.temporal.Temporal;\n\npublic class OffsetTimeExample {\n\n    public static void main(String[] args) {\n        OffsetTime offsetTime = OffsetTime.of(10, 15, 30, 0, ZoneOffset.ofHours(1));\n\n        // Get seconds of minute\n        double seconds = offsetTime.get(ChronoField.SECOND_OF_MINUTE);\n        System.out.println(seconds); // 30.0\n\n        // Set seconds of minute\n        offsetTime = offsetTime.with(ChronoField.SECOND_OF_MINUTE, 45);\n        System.out.println(offsetTime); // 10:15:45+01:00\n\n        // Get offset hours\n        int offsetHours = offsetTime.getOffset().get(ChronoField.OFFSET_SECONDS) / 3600;\n        System.out.println(offsetHours); // 1\n\n        // Set offset hours\n        offsetTime = offsetTime.withOffsetSameInstant(ZoneOffset.ofHours(2));\n        System.out.println(offsetTime); // 10:15:45+02:00\n\n        // Get minutes\n        int minutes = offsetTime.getMinute();\n        System.out.println(minutes); // 15\n\n        // Set minutes\n        offsetTime = offsetTime.withMinute(30);\n        System.out.println(offsetTime); // 10:30:45+02:00\n\n        // Get hour\n        int hour = offsetTime.getHour();\n        System.out.println(hour); // 10\n\n        // Set hour\n        offsetTime = offsetTime.withHour(12);\n        System.out.println(offsetTime); // 12:30:45+02:00\n\n        // Get time as a string\n        String timeString = offsetTime.toString();\n        System.out.println(timeString); // 12:30:45+02:00\n\n        // Parse a time string\n        offsetTime = OffsetTime.parse(timeString);\n        System.out.println(offsetTime); // 12:30:45+02:00\n\n        // Get time as milliseconds since epoch\n        long milliseconds = offsetTime.toEpochSecond() * 1000;\n        System.out.println(milliseconds); // 1654858645000\n\n        // Set time as milliseconds since epoch\n        offsetTime = OffsetTime.ofEpochSecond(milliseconds / 1000, 0, ZoneOffset.ofHours(2));\n        System.out.println(offsetTime); // 12:30:45+02:00\n    }\n}\n```"
    },
    {
        "Example": 55,
        "Generated Java Code": "```java\nimport java.net.*;\n\npublic class DatagramPacket {\n    public DatagramPacket(byte[] data, int offset, int length, ServiceID serviceID, int capacity, InetAddress address) {}\n\n    public ServiceID getServiceID() {}\n\n    public void setLengthOnly() {}\n\n    public void setLength() {}\n\n    public void setAddress() {}\n\n    public void setData() {}\n\n    public void setData() {}\n\n    public SocketAddress getSocketAddress() {}\n\n    public int getOffset() {}\n\n    public int getLength() {}\n\n    public InetAddress getAddress() {}\n\n    public void setSocketAddress() {}\n\n    public byte[] getData() {}\n\n    public int getCapacity() {}\n}\n```"
    },
    {
        "Example": 56,
        "Generated Java Code": "```java\npackage org.spongycastle.crypto.util.store;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.channels.OverlappingFileLockException;\nimport java.nio.file.StandardOpenOption;\nimport java.security.GeneralSecurityException;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.spongycastle.crypto.ExtendedDigest;\nimport org.spongycastle.crypto.params.KeyParameter;\nimport org.spongycastle.crypto.util.DigestFactory;\nimport org.spongycastle.crypto.util.StreamBlockCipher;\nimport org.spongycastle.crypto.util.Store;\nimport org.spongycastle.util.encoders.Hex;\n\npublic class MappedFileChainStore<T>\n    implements Store<T>\n{\n    private static final boolean REMOVE_FROM_KEY_CACHE = true;\n    private static final boolean DO_NOT_REMOVE_FROM_KEY_CACHE = false;\n\n    private static final String HEADER_MAGIC = \"SC\";\n\n    private static final int RECORD_SIZE = 16 + 32 + 4;  // hash + value + length\n\n    private static final int FILE_PROLOGUE_BYTES = 4 + 4 + 4;  // version + header length + padding\n\n    private static int DEFAULT_NUM_HEADERS = 1024;\n\n    private final File file;\n    private final int numHeaders;\n    private final Object notFoundMarker = new Object();\n    private final ReentrantLock lock = new ReentrantLock();\n    private final Logger log;\n\n    private FileLock fileLock;\n    private RandomAccessFile randomAccessFile;\n    private MappedByteBuffer buffer;\n    private StoredBlock<T> lastChainHead;\n\n    private LinkedHashMap<Sha256Hash, Object> notFoundCache = new LinkedHashMap<Sha256Hash, Object>()\n    {\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, Object> eldest)\n        {\n            return size() > 1000;\n        }\n    };\n\n    private LinkedHashMap<Sha256Hash, StoredBlock<T>> blockCache = new LinkedHashMap<Sha256Hash, StoredBlock<T>>()\n    {\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, StoredBlock<T>> eldest)\n        {\n            return size() > 1000;\n        }\n    };\n\n    public MappedFileChainStore(File file)\n    {\n        this(file, DEFAULT_NUM_HEADERS);\n    }\n\n    public MappedFileChainStore(File file, int numHeaders)\n    {\n        this(file, numHeaders, null);\n    }\n\n    public MappedFileChainStore(File file, int numHeaders, Logger log)\n    {\n        this.file = file;\n        this.numHeaders = numHeaders;\n        this.log = log;\n    }\n\n    public T get(Sha256Hash chainHeadHash)\n        throws IOException\n    {\n        lock.lock();\n        try\n        {\n            StoredBlock<T> result = getChainHead();\n\n            if (result != null)\n            {\n                while (!result.hash.equals(chainHeadHash))\n                {\n                    result = result.previous;\n                    if (result == null)\n                    {\n                        log(\"Chain head not found: \" + chainHeadHash);\n                        return null;\n                    }\n                }\n                if (notFoundCache.containsKey(result.hash))\n                {\n                    log(\"Returning not found marker: \" + result.hash);\n                    return null;\n                }\n                if (result.value == null)\n                {\n                    result = initValue(result);\n                    if (result == null)\n                    {\n                        notFoundCache.put(result.hash, notFoundMarker);\n                        if (chainHeadHash.equals(getChainHead().hash))\n                        {\n                            setChainHead(result);\n                        }\n                        log(\"Returning not found marker: \" + result.hash);\n                        return null;\n                    }\n                }\n                return result.value;\n            }\n\n            log(\"Returning not found marker: \" + chainHeadHash);\n            return null;            \n        }\n        finally\n        {\n            lock.unlock();\n        }\n    }\n\n    public void put(Sha256Hash chainHeadHash, T value)\n        throws IOException\n    {\n        lock.lock();\n        try\n        {\n            StoredBlock<T> newChainHead = initBlock(value);\n\n            if (getChainHead() == null)\n            {\n                setChainHead(newChainHead);\n                return;\n            }\n\n            while (chainHeadHash.compareTo(getChainHead().hash) != 0)\n            {\n                StoredBlock<T> next = initBlock(getChainHead().value);\n                if (next == null)\n                {\n                    setChainHead(newChainHead);\n                    return;\n                }\n                newChainHead = next;\n            }\n\n            setChainHead(newChainHead);\n        }\n        finally\n        {\n            lock.unlock();\n        }\n    }\n\n    public void init(KeyParameter key)\n        throws GeneralSecurityException\n    {\n        if (fileLock == null || !fileLock.isValid())\n        {\n            if (file.exists())\n            {\n                file.delete();\n            }\n            try\n            {\n                file.createNewFile();\n                FileChannel channel = FileChannel.open(file.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n                try\n                {\n                    fileLock = channel.tryLock();\n                    randomAccessFile = new RandomAccessFile(file, \"rw\");\n\n                    if (randomAccessFile.length() == 0)\n                    {\n                        initNewStore(key);\n                    }\n                    else\n                    {\n                        buffer = map();\n                    }\n                }\n                finally\n                {\n                    if (fileLock == null || !fileLock.isValid())\n                    {\n                        channel.close();\n                        if (file.exists())\n                        {\n                            file.delete();\n                        }\n                    }\n                }\n            }\n            catch (OverlappingFileLockException e)\n            {\n                // already in use\n                log(\"OverlappingFileLockException\");\n            }\n            catch (IOException e)\n            {\n                log(\"IOException locking\", e);\n            }\n        }\n    }\n\n    public void close()\n        throws IOException\n    {\n        synchronized (lock)\n        {\n            if (fileLock != null && fileLock.isValid())\n            {\n                fileLock.release();\n                fileLock = null;\n            }\n\n            if (buffer != null)\n            {\n                unmap();\n                buffer = null;\n            }\n\n            if (randomAccessFile != null)\n            {\n                randomAccessFile.close();\n                randomAccessFile = null;\n            }\n        }\n    }\n\n    private void initNewStore(KeyParameter keyParameter)\n        throws IOException\n    {\n        ExtendedDigest digest = DigestFactory.createSHA256();\n        StreamBlockCipher cipher = new StreamBlockCipher(digest);\n        KeyParameter key = new KeyParameter(Hex.decode(HEADER_MAGIC + String.format(\"%08x\", randomAccessFile.length())));\n        cipher.init(false, key);\n\n        byte[] zeroes = new byte[digest.getDigestSize()];\n\n        try\n        {\n            randomAccessFile.write(cipher.process(zeroes));\n            randomAccessFile.writeInt(numHeaders);\n            randomAccessFile.writeInt(0);\n            randomAccessFile.write(cipher.process(zeroes));\n\n            unmap();\n            buffer = map();\n\n            writeHeader(cipher, keyParameter);\n\n            // just put a bogus chain head at the start\n            StoredBlock<T> initChainHead = new StoredBlock<T>(new Sha256Hash(zeroes));\n            setBlock(initChainHead.hash, initChainHead);\n            setChainHead(initChainHead);\n        }\n        finally\n        {\n            cipher.reset();\n        }\n    }\n\n    private void log(String string)\n    {\n        if (log != null)\n        {\n            log.info((new StringBuilder()).append(file).append(\" \").append(string).toString());\n        }\n    }\n\n    private void log(String string, Throwable t)\n    {\n        if (log != null)\n        {\n            log.info((new StringBuilder()).append(file).append(\" \").append(string).toString(), t);\n        }\n    }\n\n    private MappedByteBuffer map()\n"
    },
    {
        "Example": 57,
        "Generated Java Code": "```java\npublic class DirectedAcyclicGraphNode<T> {\n\n  private List<DirectedAcyclicGraphNode<T>> mParents;\n  private List<DirectedAcyclicGraphNode<T>> mChildren;\n  private T mPayload;\n\n  public DirectedAcyclicGraphNode(T payload) {\n    mPayload = payload;\n    mParents = new ArrayList<>();\n    mChildren = new ArrayList<>();\n  }\n\n  public List<DirectedAcyclicGraphNode<T>> getParents() {\n    return mParents;\n  }\n\n  public List<DirectedAcyclicGraphNode<T>> getChildren() {\n    return mChildren;\n  }\n\n  public void removeChild(DirectedAcyclicGraphNode<T> child) {\n    mChildren.remove(child);\n  }\n\n  public void addParent(DirectedAcyclicGraphNode<T> parent) {\n    mParents.add(parent);\n  }\n\n  public void addChild(DirectedAcyclicGraphNode<T> child) {\n    mChildren.add(child);\n  }\n\n  public T getPayload() {\n    return mPayload;\n  }\n\n  public void setPayload(T payload) {\n    mPayload = payload;\n  }\n}\n```"
    },
    {
        "Example": 58,
        "Generated Java Code": "```java\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Stats implements Cloneable, Comparable<Stats> {\n    private String ext;\n    private Date addedDate;\n    private int rating;\n    private int previousPlayCounter;\n    private Date ratingModifDate;\n    private Date lastPlayed;\n    private String relativeFullPath;\n    private boolean updateRatingModifDate;\n    private int idPath;\n    private String filename;\n    private boolean deleted;\n    private float BPM;\n    private String relativePath;\n    private int idFile;\n    private String sourceName;\n    private int playCounter;\n\n    public String getFormattedRatingModifDate() {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return sdf.format(ratingModifDate);\n    }\n\n    public void setIdPath(int idPath) {\n        this.idPath = idPath;\n    }\n\n    public void setAddedDate(Date addedDate) {\n        this.addedDate = addedDate;\n    }\n\n    public String getSourceName() {\n        return sourceName;\n    }\n\n    public boolean equalsStats(Stats other) {\n        return this.rating == other.rating && this.previousPlayCounter == other.previousPlayCounter && this.lastPlayed.equals(other.lastPlayed) && this.relativeFullPath.equals(other.relativeFullPath) && this.updateRatingModifDate == other.updateRatingModifDate && this.idPath == other.idPath && this.filename.equals(other.filename) && this.deleted == other.deleted && this.BPM == other.BPM && this.relativePath.equals(other.relativePath) && this.idFile == other.idFile && this.sourceName.equals(other.sourceName) && this.playCounter == other.playCounter;\n    }\n\n    public int getIdFile() {\n        return idFile;\n    }\n\n    public int compareTo(Stats other) {\n        return this.rating - other.rating;\n    }\n\n    public void setFilename(String filename) {\n        this.filename = filename;\n    }\n\n    public void setRelativePath(String relativePath) {\n        this.relativePath = relativePath;\n    }\n\n    public int getPreviousPlayCounter() {\n        return previousPlayCounter;\n    }\n\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    public int hashCode() {\n        return this.rating + this.previousPlayCounter + this.lastPlayed.hashCode() + this.relativeFullPath.hashCode() + (this.updateRatingModifDate ? 1 : 0) + this.idPath + this.filename.hashCode() + (this.deleted ? 1 : 0) + Float.floatToIntBits(this.BPM) + this.relativePath.hashCode() + this.idFile + this.sourceName.hashCode() + this.playCounter;\n    }\n\n    public void setPlayCounter(int playCounter) {\n        this.playCounter = playCounter;\n    }\n\n    public String getLastPlayedLocalTime() {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return sdf.format(lastPlayed);\n    }\n\n    public void setBPM(float BPM) {\n        this.BPM = BPM;\n    }\n\n    public String getRelativeFullPath() {\n        return relativeFullPath;\n    }\n\n    public String getAddedDateLocalTime() {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return sdf.format(addedDate);\n    }\n\n    public float getBPM() {\n        return BPM;\n    }\n\n    public void setIdFile(int idFile) {\n        this.idFile = idFile;\n    }\n\n    public Date getAddedDate() {\n        return addedDate;\n    }\n\n    public String getExt() {\n        return ext;\n    }\n\n    public Date getRatingModifDate() {\n        return ratingModifDate;\n    }\n\n    public void setLastPlayed(Date lastPlayed) {\n        this.lastPlayed = lastPlayed;\n    }\n\n    public void setRelativeFullPath(String relativeFullPath) {\n        this.relativeFullPath = relativeFullPath;\n    }\n\n    public void setPath(String path) {\n        this.filename = path.substring(path.lastIndexOf(\"/\") + 1);\n        this.relativeFullPath = path.substring(path.indexOf(\"Music/\") + 6);\n        this.relativePath = path.substring(path.indexOf(\"Music/\") + 6, path.lastIndexOf(\"/\") + 1);\n    }\n\n    public void setSourceName(String sourceName) {\n        this.sourceName = sourceName;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    public String getFormattedLastPlayed() {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return sdf.format(lastPlayed);\n    }\n\n    public Date getLastPlayed() {\n        return lastPlayed;\n    }\n\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Stats)) return false;\n        Stats stats = (Stats) o;\n        return this.rating == stats.rating && this.previousPlayCounter == stats.previousPlayCounter && this.lastPlayed.equals(stats.lastPlayed) && this.relativeFullPath.equals(stats.relativeFullPath) && this.updateRatingModifDate == stats.updateRatingModifDate && this.idPath == stats.idPath && this.filename.equals(stats.filename) && this.deleted == stats.deleted && this.BPM == stats.BPM && this.relativePath.equals(stats.relativePath) && this.idFile == stats.idFile && this.sourceName.equals(stats.sourceName) && this.playCounter == stats.playCounter;\n    }\n\n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String toString() {\n        return \"Stats{ext='\" + ext + '\\'' + \", addedDate=\" + addedDate + \", rating=\" + rating + \", previousPlayCounter=\" + previousPlayCounter + \", ratingModifDate=\" + ratingModifDate + \", lastPlayed=\" + lastPlayed + \", relativeFullPath='\" + relativeFullPath + '\\'' + \", updateRatingModifDate=\" + updateRatingModifDate + \", idPath=\" + idPath + \", filename='\" + filename + '\\'' + \", deleted=\" + deleted + \", BPM=\" + BPM + \", relativePath='\" + relativePath + '\\'' + \", idFile=\" + idFile + \", sourceName='\" + sourceName + '\\'' + \", playCounter=\" + playCounter + '}';\n    }\n\n    public void setUpdateRatingModifDate(boolean updateRatingModifDate) {\n        this.updateRatingModifDate = updateRatingModifDate;\n    }\n\n    public int getIdPath() {\n        return idPath;\n    }\n\n    public String getRelativePath() {\n        return relativePath;\n    }\n\n    public void setRating(int rating) {\n        this.rating = rating;\n    }\n\n    public int getPlayCounter() {\n        return playCounter;\n    }\n\n    public int getRating() {\n        return rating;\n    }\n}\n```"
    },
    {
        "Example": 59,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DirectedAcyclicGraphNode<T> {\n  private List<DirectedAcyclicGraphNode<T>> mParents;\n  private List<DirectedAcyclicGraphNode<T>> mChildren;\n  private T mPayload;\n\n  public DirectedAcyclicGraphNode(T payload) {\n    this(payload, new ArrayList<DirectedAcyclicGraphNode<T>>(), new ArrayList<DirectedAcyclicGraphNode<T>>());\n  }\n\n  private DirectedAcyclicGraphNode(T payload, List<DirectedAcyclicGraphNode<T>> parents,\n      List<DirectedAcyclicGraphNode<T>> children) {\n    mParents = parents;\n    mChildren = children;\n    mPayload = payload;\n  }\n\n  public List<DirectedAcyclicGraphNode<T>> getParents() {\n    return mParents;\n  }\n\n  public T getPayload() {\n    return mPayload;\n  }\n\n  public void removeChild(DirectedAcyclicGraphNode<T> child) {\n    mChildren.remove(child);\n  }\n\n  public void addParent(DirectedAcyclicGraphNode<T> parent) {\n    if (!mParents.contains(parent)) {\n      mParents.add(parent);\n    }\n  }\n\n  public void addChild(DirectedAcyclicGraphNode<T> child) {\n    if (!mChildren.contains(child)) {\n      mChildren.add(child);\n    }\n  }\n}\n```"
    },
    {
        "Example": 60,
        "Generated Java Code": "```java\nint itemPosition = mOrientationProvider.getScrolledHeaderPosition(mDimensionCalculator, mAdapter);\n    if (itemPosition == -1) {\n      return null;\n    }\n    if (!hasNewHeader(itemPosition)) {\n      // If the current header is entirely obscured by another header, stop early.\n      if (itemIsObscuredByHeader(itemPosition, mDimensionCalculator)) {\n        return null;\n      }\n      int listLeft = getListLeft();\n      int listTop = getListTop();\n      Rect headerBounds = getHeaderBounds(itemPosition, mAdapter, mDimensionCalculator);\n      Rect defaultHeaderOffset = getDefaultHeaderOffset();\n\n      int dx = listLeft - (headerBounds.left - defaultHeaderOffset.left);\n      int dy = listTop - (headerBounds.top - defaultHeaderOffset.top);\n      translateHeaderWithNextHeader(itemPosition, dx, dy);\n      return headerBounds;\n    }\n    return null;\n```"
    },
    {
        "Example": 61,
        "Generated Java Code": "```java\nimport java.util.Date;\nimport java.util.List;\n\npublic class TestRunDetailsDTO {\n    private Long testId;\n    private Long runId;\n    private String feedId;\n    private Date fetcherStartTimeStamp;\n    private Date fetcherEndTimeStamp;\n    private OutcomeType outcome;\n    private RunStatusType runStatus;\n    private String errorMsg;\n    private List<TestResultDetailsDTO> regTestResultDetailsLst;\n    private Date createTimeStamp;\n    private Date lastModifiedTimeStamp;\n    private String createdBy;\n\n    public Long getTestId() {\n        return testId;\n    }\n\n    public void setTestId(Long testId) {\n        this.testId = testId;\n    }\n\n    public Long getRunId() {\n        return runId;\n    }\n\n    public void setRunId(Long runId) {\n        this.runId = runId;\n    }\n\n    public String getFeedId() {\n        return feedId;\n    }\n\n    public void setFeedId(String feedId) {\n        this.feedId = feedId;\n    }\n\n    public Date getFetcherStartTimeStamp() {\n        return fetcherStartTimeStamp;\n    }\n\n    public void setFetcherStartTimeStamp(Date fetcherStartTimeStamp) {\n        this.fetcherStartTimeStamp = fetcherStartTimeStamp;\n    }\n\n    public Date getFetcherEndTimeStamp() {\n        return fetcherEndTimeStamp;\n    }\n\n    public void setFetcherEndTimeStamp(Date fetcherEndTimeStamp) {\n        this.fetcherEndTimeStamp = fetcherEndTimeStamp;\n    }\n\n    public OutcomeType getOutcome() {\n        return outcome;\n    }\n\n    public void setOutcome(OutcomeType outcome) {\n        this.outcome = outcome;\n    }\n\n    public RunStatusType getRunStatus() {\n        return runStatus;\n    }\n\n    public void setRunStatus(RunStatusType runStatus) {\n        this.runStatus = runStatus;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public List<TestResultDetailsDTO> getRegTestResultDetailsLst() {\n        return regTestResultDetailsLst;\n    }\n\n    public void setRegTestResultDetailsLst(List<TestResultDetailsDTO> regTestResultDetailsLst) {\n        this.regTestResultDetailsLst = regTestResultDetailsLst;\n    }\n\n    public Date getCreateTimeStamp() {\n        return createTimeStamp;\n    }\n\n    public void setCreateTimeStamp(Date createTimeStamp) {\n        this.createTimeStamp = createTimeStamp;\n    }\n\n    public Date getLastModifiedTimeStamp() {\n        return lastModifiedTimeStamp;\n    }\n\n    public void setLastModifiedTimeStamp(Date lastModifiedTimeStamp) {\n        this.lastModifiedTimeStamp = lastModifiedTimeStamp;\n    }\n\n    public String getCreatedBy() {\n        return createdBy;\n    }\n\n    public void setCreatedBy(String createdBy) {\n        this.createdBy = createdBy;\n    }\n\n    @Override\n    public String toString() {\n        return \"TestRunDetailsDTO [testId=\" + testId + \", runId=\" + runId + \", feedId=\" + feedId + \", fetcherStartTimeStamp=\" + fetcherStartTimeStamp + \", fetcherEndTimeStamp=\" + fetcherEndTimeStamp + \", outcome=\" + outcome + \", runStatus=\" + runStatus + \", errorMsg=\" + errorMsg + \", regTestResultDetailsLst=\" + regTestResultDetailsLst + \", createTimeStamp=\" + createTimeStamp + \", lastModifiedTimeStamp=\" + lastModifiedTimeStamp + \", createdBy=\" + createdBy + \"]\";\n    }\n}\n```"
    },
    {
        "Example": 62,
        "Generated Java Code": "```java\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Timestamp;\nimport javax.persistence.ElementCollection;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Temporal;\nimport javax.persistence.TemporalType;\n\n@Entity\npublic class RegPCLTestResultEntity {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private long testId;\n\n    @Temporal(TemporalType.TIMESTAMP)\n    private Timestamp lastModifiedTimeStamp;\n\n    @Temporal(TemporalType.TIMESTAMP)\n    private Timestamp fetcherStartTimestamp;\n\n    @Temporal(TemporalType.TIMESTAMP)\n    private Timestamp createTimeStamp;\n\n    private static final long serialVersionUID = 1L;\n    private BigDecimal batchId;\n    private String errorMsg;\n    @Enumerated(EnumType.STRING)\n    private OutcomeType outcomeType;\n    private String createdBy;\n    private BigDecimal feedId;\n    private BigDecimal runId;\n    @Temporal(TemporalType.TIMESTAMP)\n    private Timestamp fetcherEndTimeStamp;\n    @ElementCollection\n    private List<RegPCLTestResultDetailsEntity> regPclTestResultDetails;\n    @Enumerated(EnumType.STRING)\n    private RunStatusType runStatus;\n\n    public void setLastModifiedTimeStamp(Timestamp lastModifiedTimeStamp) {\n        this.lastModifiedTimeStamp = lastModifiedTimeStamp;\n    }\n\n    public void setFeedId(BigDecimal feedId) {\n        this.feedId = feedId;\n    }\n\n    public void setFetcherStartTimestamp(Timestamp fetcherStartTimestamp) {\n        this.fetcherStartTimestamp = fetcherStartTimestamp;\n    }\n\n    public OutcomeType getOutcomeType() {\n        return outcomeType;\n    }\n\n    public void updateLastModifiedTimeStamp(Timestamp newLastModifiedTimeStamp) {\n        this.lastModifiedTimeStamp = newLastModifiedTimeStamp;\n    }\n\n    public void updateCreateTimeStamp(Timestamp newCreateTimeStamp) {\n        this.createTimeStamp = newCreateTimeStamp;\n    }\n\n    public BigDecimal getRunId() {\n        return runId;\n    }\n\n    public void setBatchId(BigDecimal batchId) {\n        this.batchId = batchId;\n    }\n\n    public List<RegPCLTestResultDetailsEntity> getRegPclTestResultDetails() {\n        return regPclTestResultDetails;\n    }\n\n    public void setTestId(BigDecimal testId) {\n        this.testId = testId;\n    }\n\n    public RegPCLTestResultDetailsEntity removeRegPclTestResultDetail(RegPCLTestResultDetailsEntity regPclTestResultDetails) {\n        regPclTestResultDetails.remove(regPclTestResultDetails);\n        return regPclTestResultDetails;\n    }\n\n    public void setRegPclTestResultDetails(List<RegPCLTestResultDetailsEntity> regPclTestResultDetails) {\n        this.regPclTestResultDetails = regPclTestResultDetails;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public RunStatusType getRunStatus() {\n        return runStatus;\n    }\n\n    public RegPCLTestResultDetailsEntity addRegPclTestResultDetail(RegPCLTestResultDetailsEntity regPclTestResultDetails) {\n        regPclTestResultDetails.add(regPclTestResultDetails);\n        return regPclTestResultDetails;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setRunStatus(RunStatusType runStatus) {\n        this.runStatus = runStatus;\n    }\n\n    public Timestamp getFetcherEndTimeStamp() {\n        return fetcherEndTimeStamp;\n    }\n\n    public Timestamp getLastModifiedTimeStamp() {\n        return lastModifiedTimeStamp;\n    }\n\n    public BigDecimal getFeedId() {\n        return feedId;\n    }\n\n    public void setRunId(BigDecimal runId) {\n        this.runId = runId;\n    }\n\n    public Timestamp getFetcherStartTimestamp() {\n        return fetcherStartTimestamp;\n    }\n\n    public void setFetcherEndTimeStamp(Timestamp fetcherEndTimeStamp) {\n        this.fetcherEndTimeStamp = fetcherEndTimeStamp;\n    }\n\n    public void setCreateTimeStamp(Timestamp createTimeStamp) {\n        this.createTimeStamp = createTimeStamp;\n    }\n\n    public void setCreatedBy(String createdBy) {\n        this.createdBy = createdBy;\n    }\n\n    public Timestamp getCreateTimeStamp() {\n        return createTimeStamp;\n    }\n\n    public BigDecimal getBatchId() {\n        return batchId;\n    }\n\n    public void setOutcomeType(OutcomeType outcomeType) {\n        this.outcomeType = outcomeType;\n    }\n\n    public String getCreatedBy() {\n        return createdBy;\n    }\n}\n```"
    },
    {
        "Example": 63,
        "Generated Java Code": "```java\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.ZonedDateTime;\nimport org.junit.Test;\n\npublic class TimeOnlyTest {\n\n  @Test\n  public void testParseTimeWithOneDecimal() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07.1\");\n    assertEquals(10, time.getHour());\n    assertEquals(15, time.getMinute());\n    assertEquals(7, time.getSecond());\n    assertEquals(100_000_000, time.getNano());\n  }\n\n  @Test\n  public void testSetNegativeMinutes() {\n    ZonedDateTime time = TimeOnly.setMinutes(ZonedDateTime.now(), -25);\n    assertEquals(-25, time.getMinute());\n  }\n\n  @Test\n  public void testFormatTimeWithOneDecimal() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07.1\");\n    assertEquals(\"10:15:07.1\", time.format(TimeOnly.TIME_FORMAT));\n  }\n\n  @Test\n  public void testSetMinutes() {\n    ZonedDateTime time = TimeOnly.setMinutes(ZonedDateTime.now(), 25);\n    assertEquals(25, time.getMinute());\n  }\n\n  @Test\n  public void testParseTimeWithoutDecimals() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(10, time.getHour());\n    assertEquals(15, time.getMinute());\n    assertEquals(7, time.getSecond());\n    assertEquals(0, time.getNano());\n  }\n\n  @Test\n  public void testGetMinutes() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(15, time.getMinute());\n  }\n\n  @Test\n  public void testParseTimeWithDecimals() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07.123\");\n    assertEquals(10, time.getHour());\n    assertEquals(15, time.getMinute());\n    assertEquals(7, time.getSecond());\n    assertEquals(123_000_000, time.getNano());\n  }\n\n  @Test\n  public void testSetInvalidSeconds() {\n    ZonedDateTime time = TimeOnly.setSeconds(ZonedDateTime.now(), 61);\n    assertEquals(0, time.getSecond());\n    assertEquals(1, time.getMinute());\n  }\n\n  @Test\n  public void testSetNegativeHour() {\n    ZonedDateTime time = TimeOnly.setHour(ZonedDateTime.now(), -2);\n    assertEquals(22, time.getHour());\n  }\n\n  @Test\n  public void testToDate() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(\"1970-01-01\", time.toLocalDate().toString());\n  }\n\n  @Test\n  public void testGetSeconds() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(7, time.getSecond());\n  }\n\n  @Test\n  public void testSetHour() {\n    ZonedDateTime time = TimeOnly.setHour(ZonedDateTime.now(), 15);\n    assertEquals(15, time.getHour());\n  }\n\n  @Test\n  public void testGetHour() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(10, time.getHour());\n  }\n\n  @Test\n  public void testSetSeconds() {\n    ZonedDateTime time = TimeOnly.setSeconds(ZonedDateTime.now(), 25);\n    assertEquals(25, time.getSecond());\n  }\n\n  @Test\n  public void testSetTime() {\n    ZonedDateTime time = TimeOnly.setTime(ZonedDateTime.now(), \"10:15:07\");\n    assertEquals(10, time.getHour());\n    assertEquals(15, time.getMinute());\n    assertEquals(7, time.getSecond());\n  }\n\n  @Test\n  public void testGetMilliseconds() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07.123\");\n    assertEquals(123, time.getMillisecond());\n  }\n\n  @Test\n  public void testSetInvalidHour() {\n    ZonedDateTime time = TimeOnly.setHour(ZonedDateTime.now(), 61);\n    assertEquals(1, time.getHour());\n  }\n\n  @Test\n  public void testSetNegativeSeconds() {\n    ZonedDateTime time = TimeOnly.setSeconds(ZonedDateTime.now(), -2);\n    assertEquals(58, time.getSecond());\n  }\n\n  @Test\n  public void setUp() {\n    // No operation\n  }\n\n  @Test\n  public void testSetInvalidMinutes() {\n    ZonedDateTime time = TimeOnly.setMinutes(ZonedDateTime.now(), 61);\n    assertEquals(1, time.getHour());\n    assertEquals(1, time.getMinute());\n  }\n\n  @Test\n  public void testFormatTimeNoDecimals() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(\"10:15:07\", time.format(TimeOnly.TIME_FORMAT_NO_DECIMALS));\n  }\n\n  @Test\n  public void testFormatTimeWithDecimals() {\n    ZonedDateTime time = TimeOnly.parseTime(\"10:15:07.123\");\n    assertEquals(\"10:15:07.123\", time.format(TimeOnly.TIME_FORMAT_WITH_DECIMALS));\n  }\n\n  @Test\n  public void testEquals() {\n    ZonedDateTime time1 = TimeOnly.parseTime(\"10:15:07\");\n    ZonedDateTime time2 = TimeOnly.parseTime(\"10:15:07\");\n    assertEquals(time1, time2);\n  }\n}\n```"
    },
    {
        "Example": 64,
        "Generated Java Code": "```java\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;\n\npublic class Feed {\n\n    private Timestamp endDate;\n    private String feedConfigId;\n    private long resultCode;\n    private String resultMessage;\n    private BigDecimal fileCount;\n    private Timestamp maxReceiptDate;\n    private BigDecimal downloadSize;\n    private BigDecimal feedId;\n    private String configInfo;\n    private long runId;\n    private byte[] errors;\n    private String runStatus;\n    private Timestamp startDate;\n\n    public Timestamp getEndDate() {\n        return endDate;\n    }\n\n    public void setEndDate(Timestamp endDate) {\n        this.endDate = endDate;\n    }\n\n    public String getFeedConfigId() {\n        return feedConfigId;\n    }\n\n    public void setFeedConfigId(String feedConfigId) {\n        this.feedConfigId = feedConfigId;\n    }\n\n    public long getResultCode() {\n        return resultCode;\n    }\n\n    public void setResultCode(long resultCode) {\n        this.resultCode = resultCode;\n    }\n\n    public String getResultMessage() {\n        return resultMessage;\n    }\n\n    public void setResultMessage(String resultMessage) {\n        this.resultMessage = resultMessage;\n    }\n\n    public BigDecimal getFileCount() {\n        return fileCount;\n    }\n\n    public void setFileCount(BigDecimal fileCount) {\n        this.fileCount = fileCount;\n    }\n\n    public Timestamp getMaxReceiptDate() {\n        return maxReceiptDate;\n    }\n\n    public void setMaxReceiptDate(Timestamp maxReceiptDate) {\n        this.maxReceiptDate = maxReceiptDate;\n    }\n\n    public BigDecimal getDownloadSize() {\n        return downloadSize;\n    }\n\n    public void setDownloadSize(BigDecimal downloadSize) {\n        this.downloadSize = downloadSize;\n    }\n\n    public BigDecimal getFeedId() {\n        return feedId;\n    }\n\n    public void setFeedId(BigDecimal feedId) {\n        this.feedId = feedId;\n    }\n\n    public String getConfigInfo() {\n        return configInfo;\n    }\n\n    public void setConfigInfo(String configInfo) {\n        this.configInfo = configInfo;\n    }\n\n    public long getRunId() {\n        return runId;\n    }\n\n    public void setRunId(long runId) {\n        this.runId = runId;\n    }\n\n    public byte[] getErrors() {\n        return errors;\n    }\n\n    public void setErrors(byte[] errors) {\n        this.errors = errors;\n    }\n\n    public String getRunStatus() {\n        return runStatus;\n    }\n\n    public void setRunStatus(String runStatus) {\n        this.runStatus = runStatus;\n    }\n\n    public Timestamp getStartDate() {\n        return startDate;\n    }\n\n    public void setStartDate(Timestamp startDate) {\n        this.startDate = startDate;\n    }\n\n}\n```"
    },
    {
        "Example": 65,
        "Generated Java Code": "```java\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.IIOImage;\nimport javax.imageio.ImageIO;\nimport javax.imageio.ImageWriteParam;\nimport javax.imageio.ImageWriter;\nimport javax.imageio.plugins.jpeg.JPEGImageWriteParam;\nimport javax.imageio.stream.ImageOutputStream;\nimport org.apache.commons.io.FileUtils;\n\npublic class WriteImageWithCompression {\n\n  public static void main(String[] args) throws IOException {\n    // Define the input image\n    BufferedImage inputImage = ImageIO.read(new File(\"input.jpg\"));\n\n    // Define the output image file\n    File outputFile = new File(\"output.jpg\");\n\n    // Define the desired image format\n    String imageFormat = \"jpg\";\n\n    // Define the desired write compression quality\n    float writeCompressionQuality = 0.7f;\n\n    // Define the desired write compression type\n    String writeCompressionType = JPEGImageWriteParam.MODE_EXPLICIT;\n\n    // Define the desired write compression mode\n    int writeCompressionMode = ImageWriteParam.MODE_EXPLICIT;\n\n    // Create a new JPEG image writer\n    ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(imageFormat).next();\n\n    // Set the write compression quality\n    JPEGImageWriteParam jpegParams = (JPEGImageWriteParam) imageWriter.getDefaultWriteParam();\n    jpegParams.setCompressionQuality(writeCompressionQuality);\n\n    // Set the write compression type\n    jpegParams.setCompressionType(writeCompressionType);\n\n    // Set the write compression mode\n    jpegParams.setCompressionMode(writeCompressionMode);\n\n    // Get the image write parameters\n    ImageWriteParam imageWriteParams = imageWriter.getDefaultWriteParam();\n\n    // Set the image write parameters\n    imageWriteParams.setCompressionQuality(writeCompressionQuality);\n    imageWriteParams.setCompressionType(writeCompressionType);\n    imageWriteParams.setCompressionMode(writeCompressionMode);\n\n    // Open an image output stream\n    try (ImageOutputStream imageOutputStream = ImageIO.createImageOutputStream(outputFile)) {\n      // Write the image to the output stream\n      imageWriter.setOutput(imageOutputStream);\n      imageWriter.write(null, new IIOImage(inputImage, null, null), imageWriteParams);\n\n      // Close the image writer\n      imageWriter.dispose();\n    }\n  }\n}\n```"
    },
    {
        "Example": 66,
        "Generated Java Code": "```java\nRangeSet<C> enclosesAll(Iterable<Range<C>> other) {\n    checkNotNull(other);\n    if (other.isEmpty()) {\n      return immutableCopy();\n    }\n    for (Range<C> range : other) {\n      if (!encloses(range)) {\n        return ImmutableRangeSet.of();\n      }\n    }\n    return immutableCopy();\n  }\n\n```"
    },
    {
        "Example": 67,
        "Generated Java Code": ""
    },
    {
        "Example": 68,
        "Generated Java Code": "```java\nimport java.nio.ByteBuffer;\nimport java.nio.ByteBufferAllocator;\n\npublic class BufferWrapper {\n\n    private ByteBuffer buffer;\n    private ByteBufferAllocator allocator;\n    private int mode;\n\n    public static final int OUTPUT_MODE = 0;\n    public static final int INPUT_MODE = 1;\n\n    public BufferWrapper(ByteBuffer buffer, ByteBufferAllocator allocator) {\n        this.buffer = buffer;\n        this.allocator = allocator;\n        this.mode = OUTPUT_MODE;\n    }\n\n    public void expandCapacity() {\n        if (buffer.capacity() == buffer.limit()) {\n            ByteBuffer newBuffer = allocator.allocate(buffer.capacity() * 2);\n            buffer.flip();\n            newBuffer.put(buffer);\n            buffer = newBuffer;\n        }\n    }\n\n    public void setOutputMode() {\n        mode = OUTPUT_MODE;\n    }\n\n    public void expand() {\n        expandCapacity();\n        buffer.limit(buffer.capacity());\n    }\n\n    public void setInputMode() {\n        mode = INPUT_MODE;\n    }\n\n    public int length() {\n        return buffer.remaining();\n    }\n\n    public int available() {\n        return buffer.remaining();\n    }\n\n    public void clear() {\n        buffer.clear();\n    }\n\n    @Override\n    public String toString() {\n        return buffer.toString();\n    }\n\n    public int getMode() {\n        return mode;\n    }\n\n    public void ensureCapacity(int capacity) {\n        if (buffer.capacity() < capacity) {\n            ByteBuffer newBuffer = allocator.allocate(capacity);\n            buffer.flip();\n            newBuffer.put(buffer);\n            buffer = newBuffer;\n        }\n    }\n\n    public int capacity() {\n        return buffer.capacity();\n    }\n}\n```"
    },
    {
        "Example": 69,
        "Generated Java Code": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.hdfs.server.namenode.FSEditLogOp;\nimport org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes;\nimport org.apache.hadoop.hdfs.server.namenode.LogFileInputStream;\nimport org.apache.hadoop.hdfs.server.namenode.LogNameSpaceManager;\nimport org.apache.hadoop.hdfs.server.namenode.NamespaceFile;\n\n/**\n * Write a setString record to the log.\n */\n@InterfaceAudience.Private\n@InterfaceStability.Evolving\npublic class SetString implements FSEditLogOp {\n  public final static FSEditLogOpCodes OP_CODE = FSEditLogOpCodes.SET_STRING;\n  private String name;\n  private String value;\n\n  public SetString() {\n  }\n\n  public SetString(String name, String value) {\n    this.name = name;\n    this.value = value;\n  }\n\n  @Override\n  public void write(NamespaceFile file, LogNameSpaceManager lsm) throws IOException {\n    super.write(file, lsm);\n    file.writeString(name);\n    file.writeString(value);\n  }\n\n  @Override\n  public void readFields(LogFileInputStream in, LogNameSpaceManager lsm) throws IOException {\n    super.readFields(in, lsm);\n    name = in.readString();\n    value = in.readString();\n  }\n\n  @Override\n  public long computeChecksum() {\n    return super.computeChecksum()\n        + name.getBytes().length\n        + value.getBytes().length;\n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  @Override\n  public String getValue() {\n    return value;\n  }\n\n  @Override\n  public String toString() {\n    return \"SETSTRING \" + name + \" = \" + value;\n  }\n}\n```"
    },
    {
        "Example": 70,
        "Generated Java Code": "```java\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.logging.Logger;\n\npublic class DataFlowGraph {\n    private List<DataFlowNode> dataFlow;\n    private Stack<StackObject> continueBreakReturnStack;\n    private Logger LOGGER;\n    private DataFlowHandler dataFlowHandler;\n    private Stack<StackObject> braceStack;\n\n    public DataFlowGraph(List<DataFlowNode> dataFlow, Stack<StackObject> continueBreakReturnStack, Logger LOGGER,\n            DataFlowHandler dataFlowHandler, Stack<StackObject> braceStack) {\n        this.dataFlow = dataFlow;\n        this.continueBreakReturnStack = continueBreakReturnStack;\n        this.LOGGER = LOGGER;\n        this.dataFlowHandler = dataFlowHandler;\n        this.braceStack = braceStack;\n    }\n\n    public List<StackObject> getContinueBreakReturnStack() {\n        return continueBreakReturnStack;\n    }\n\n    public DataFlowNode createStartNode() {\n        return dataFlowHandler.createStartNode();\n    }\n\n    public DataFlowNode createEndNode() {\n        return dataFlowHandler.createEndNode();\n    }\n\n    public DataFlowNode getFirst() {\n        return dataFlow.get(0);\n    }\n\n    public List<StackObject> getBraceStack() {\n        return braceStack;\n    }\n\n    public String dump() {\n        return dataFlowHandler.dump(dataFlow);\n    }\n\n    public DataFlowNode getLast() {\n        return dataFlow.get(dataFlow.size() - 1);\n    }\n\n    public void pushOnStack(StackObject stackObject) {\n        continueBreakReturnStack.push(stackObject);\n    }\n}\n```"
    },
    {
        "Example": 71,
        "Generated Java Code": "```java  \n    public static void set() {\n        UserModel.set(null);\n    }  \n```"
    },
    {
        "Example": 72,
        "Generated Java Code": "```java\nimport java.util.List;\n\npublic class SamlHandlerConfigurationDto {\n\n    private List<String> selectedAudiences;\n    private List<String> selectedClaims;\n    private List<String> selectedRecipients;\n    private boolean addAudienceToList;\n    private boolean addClaimToList;\n    private String attributeConsumingServiceIndex;\n    private String assertionConsumerUrl;\n    private String certificateAlias;\n    private boolean enableAssertionSigning;\n    private boolean enableAudiences;\n    private boolean enableClaims;\n    private boolean enableRecipients;\n    private boolean enableSingleLogout;\n    private boolean enableSignatureValidation;\n    private String idPInitSSOEnabled;\n    private String issuer;\n    private String singleLogoutUrl;\n\n    public List<String> getSelectedAudiences() {\n        return selectedAudiences;\n    }\n\n    public void setSelectedAudiences(List<String> selectedAudiences) {\n        this.selectedAudiences = selectedAudiences;\n    }\n\n    public List<String> getSelectedClaims() {\n        return selectedClaims;\n    }\n\n    public void setSelectedClaims(List<String> selectedClaims) {\n        this.selectedClaims = selectedClaims;\n    }\n\n    public List<String> getSelectedRecipients() {\n        return selectedRecipients;\n    }\n\n    public void setSelectedRecipients(List<String> selectedRecipients) {\n        this.selectedRecipients = selectedRecipients;\n    }\n\n    public boolean isAddAudienceToList() {\n        return addAudienceToList;\n    }\n\n    public void setAddAudienceToList(boolean addAudienceToList) {\n        this.addAudienceToList = addAudienceToList;\n    }\n\n    public boolean isAddClaimToList() {\n        return addClaimToList;\n    }\n\n    public void setAddClaimToList(boolean addClaimToList) {\n        this.addClaimToList = addClaimToList;\n    }\n\n    public String getAttributeConsumingServiceIndex() {\n        return attributeConsumingServiceIndex;\n    }\n\n    public void setAttributeConsumingServiceIndex(String attributeConsumingServiceIndex) {\n        this.attributeConsumingServiceIndex = attributeConsumingServiceIndex;\n    }\n\n    public String getAssertionConsumerUrl() {\n        return assertionConsumerUrl;\n    }\n\n    public void setAssertionConsumerUrl(String assertionConsumerUrl) {\n        this.assertionConsumerUrl = assertionConsumerUrl;\n    }\n\n    public String getCertificateAlias() {\n        return certificateAlias;\n    }\n\n    public void setCertificateAlias(String certificateAlias) {\n        this.certificateAlias = certificateAlias;\n    }\n\n    public boolean isEnableAssertionSigning() {\n        return enableAssertionSigning;\n    }\n\n    public void setEnableAssertionSigning(boolean enableAssertionSigning) {\n        this.enableAssertionSigning = enableAssertionSigning;\n    }\n\n    public boolean isEnableAudiences() {\n        return enableAudiences;\n    }\n\n    public void setEnableAudiences(boolean enableAudiences) {\n        this.enableAudiences = enableAudiences;\n    }\n\n    public boolean isEnableClaims() {\n        return enableClaims;\n    }\n\n    public void setEnableClaims(boolean enableClaims) {\n        this.enableClaims = enableClaims;\n    }\n\n    public boolean isEnableRecipients() {\n        return enableRecipients;\n    }\n\n    public void setEnableRecipients(boolean enableRecipients) {\n        this.enableRecipients = enableRecipients;\n    }\n\n    public boolean isEnableSingleLogout() {\n        return enableSingleLogout;\n    }\n\n    public void setEnableSingleLogout(boolean enableSingleLogout) {\n        this.enableSingleLogout = enableSingleLogout;\n    }\n\n    public boolean isEnableSignatureValidation() {\n        return enableSignatureValidation;\n    }\n\n    public void setEnableSignatureValidation(boolean enableSignatureValidation) {\n        this.enableSignatureValidation = enableSignatureValidation;\n    }\n\n    public String getIdPInitSSOEnabled() {\n        return idPInitSSOEnabled;\n    }\n\n    public void setIdPInitSSOEnabled(String idPInitSSOEnabled) {\n        this.idPInitSSOEnabled = idPInitSSOEnabled;\n    }\n\n    public String getIssuer() {\n        return issuer;\n    }\n\n    public void setIssuer(String issuer) {\n        this.issuer = issuer;\n    }\n\n    public String getSingleLogoutUrl() {\n        return singleLogoutUrl;\n    }\n\n    public void setSingleLogoutUrl(String singleLogoutUrl) {\n        this.singleLogoutUrl = singleLogoutUrl;\n    }\n\n    public String[] getSelectedAudiencesArray() {\n        return selectedAudiences == null ? null : selectedAudiences.toArray(new String[0]);\n    }\n\n    public String[] getSelectedClaimsAttay() {\n        return selectedClaims == null ? null : selectedClaims.toArray(new String[0]);\n    }\n\n    public String[] getSelectedRecipientsArray() {\n        return selectedRecipients == null ? null : selectedRecipients.toArray(new String[0]);\n    }\n\n    public void removeAudienceFromList(String s) {\n        selectedAudiences.remove(s);\n    }\n\n    public void removeClaimFromList(String s) {\n        selectedClaims.remove(s);\n    }\n\n    public void removeRecipientFromList(String s) {\n        selectedRecipients.remove(s);\n    }\n\n    public void clearBean() {\n        selectedAudiences.clear();\n        selectedClaims.clear();\n        selectedRecipients.clear();\n    }\n}\n```"
    },
    {
        "Example": 73,
        "Generated Java Code": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\n\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport com.google.common.io.Files;\nimport com.google.common.io.LineReader;\n\n@RunWith(JUnit4.class)\npublic class FileUtilsTest {\n  private static final String CONTENTS = \"LINE 1\\nLINE 2\\nLINE 3\\nLINE 4\\n\";\n  private File folder;\n  private File childFolder;\n  private File childFile;\n  private Date testDate;\n\n  @Before\n  public void setUp() throws IOException {\n    folder = Files.createTempDir();\n    childFolder = FileUtils.createTempDirInDir(folder);\n    childFile = FileUtils.createTempFileInDir(folder, \"childFile\", null);\n    testDate = new Date();\n    Files.write(CONTENTS, childFile, FileUtils.UTF_8);\n  }\n\n  @After\n  public void tearDown() {\n    FileUtils.deleteRecursively(folder);\n  }\n\n  @Test\n  public void deleteFile() throws IOException {\n    assertTrue(childFile.exists());\n    FileUtils.deleteFile(childFile);\n    assertFalse(childFile.exists());\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void deleteFile_ThrowsIfDir() throws IOException {\n    assertFalse(childFolder.exists());\n    try {\n      FileUtils.deleteFile(childFolder);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"is not a file\"));\n      throw e;\n    }\n  }\n\n  @Test(expected = SecurityException.class)\n  public void deleteFile_ThrowsIfStickyBit() throws IOException {\n    childFile.setExecutable(true);\n    childFile.setWritable(true);\n    childFile.setReadable(true);\n    assertTrue(FileUtils.setLocalDirStickyBit(folder));\n    try {\n      FileUtils.deleteFile(childFile);\n    } catch (SecurityException e) {\n      assertTrue(e.getMessage().contains(\"Permission denied\"));\n      throw e;\n    } finally {\n      assertTrue(FileUtils.setLocalDirStickyBit(folder, false));\n    }\n  }\n\n  @Test\n  public void getLocalFileMode() {\n    childFile.setExecutable(true);\n    childFile.setWritable(true);\n    childFile.setReadable(true);\n    assertTrue(FileUtils.getLocalFileMode(childFile) == FileUtils.EXEC_READ_WRITE);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void changeNonExistentFile() {\n    File nonExistentFile = new File(folder, \"nonExistentFile\");\n    assertFalse(nonExistentFile.exists());\n    try {\n      FileUtils.makeFileWritable(nonExistentFile);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"does not exist\"));\n      throw e;\n    }\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void moveNonExistentFile() {\n    File nonExistentFile = new File(folder, \"nonExistentFile\");\n    assertFalse(nonExistentFile.exists());\n    try {\n      FileUtils.moveFile(nonExistentFile, childFolder);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"does not exist\"));\n      throw e;\n    }\n  }\n\n  @Test\n  public void moveFile() throws IOException {\n    assertFalse(new File(childFolder, childFile.getName()).exists());\n    FileUtils.moveFile(childFile, childFolder);\n    assertFalse(childFile.exists());\n    assertTrue(new File(childFolder, childFile.getName()).exists());\n  }\n\n  @Test\n  public void createFile() throws IOException {\n    File newFile = FileUtils.createTempFileInDir(folder, \"newFile\", null);\n    assertTrue(newFile.exists());\n    Assert.assertEquals(0L, newFile.length());\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void createStorageDirPath_NullDir() {\n    try {\n      FileUtils.createStorageDirPath(null);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"directory cannot be null\"));\n      throw e;\n    }\n  }\n\n  @Test\n  public void createStorageDirPath() {\n    File path = FileUtils.createStorageDirPath(folder);\n    assertTrue(path.exists());\n    assertTrue(path.isDirectory());\n    Assert.assertEquals(\"\", path.getName());\n    assertTrue(FileUtils.deleteRecursively(path));\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void changeLocalDirPermissionTests_NullDir() {\n    try {\n      FileUtils.setLocalDirStickyBit(null);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"directory cannot be null\"));\n      throw e;\n    }\n  }\n\n  @Test\n  public void changeLocalDirPermissionTests_SetsSticky() {\n    assertTrue(FileUtils.setLocalDirStickyBit(folder));\n    assertTrue(FileUtils.getLocalFileMode(folder) == FileUtils.STICKY_DIR);\n  }\n\n  @Test\n  public void changeLocalDirPermissionTests_UnsetSticky() {\n    FileUtils.setLocalDirStickyBit(folder);\n    assertTrue(FileUtils.getLocalFileMode(folder) == FileUtils.STICKY_DIR);\n    assertTrue(FileUtils.setLocalDirStickyBit(folder, false));\n    assertTrue(FileUtils.getLocalFileMode(folder) == FileUtils.READ_ONLY_DIR);\n  }\n\n  @Test\n  public void concurrentCreateStorageDirPath() throws InterruptedException {\n    final int numThreads = 100;\n    final Object lock = new Object();\n    final File[] paths = new File[numThreads];\n    Thread[] threads = new Thread[numThreads];\n\n    for (int i = 0; i < threads.length; i++) {\n      final int threadIndex = i;\n      threads[i] = new Thread(new Runnable() {\n        @Override\n        public void run() {\n          synchronized (lock) {\n            paths[threadIndex] = FileUtils.createStorageDirPath(folder);\n          }\n        }\n      });\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    for (File path : paths) {\n      Assert.assertEquals(\"\", path.getName());\n      assertTrue(path.exists());\n      assertTrue(path.isDirectory());\n      assertTrue(FileUtils.deleteRecursively(path));\n    }\n  }\n\n  @Test\n  public void createDir() {\n    File newDir = FileUtils.createTempDirInDir(folder);\n    assertTrue(newDir.exists());\n    assertTrue(newDir.isDirectory());\n    assertTrue(FileUtils.deleteRecursively(newDir));\n  }\n\n  @Test\n  public void createBlockPath() {\n    List<File> wholePath = Lists.newArrayList();\n    File p = new File(folder, \"a\");\n    wholePath.add(p);\n    for (int i = 1; i < 10; i++) {\n      p = new File(p, Integer.toString(i));\n      wholePath.add(p);\n    }\n    Assert.assertEquals(Joiner.on(\"/\").join(wholePath),\n        FileUtils.createBlockPath(wholePath).toString());\n  }\n\n  @Test\n  public void changeLocalFilePermission() throws IOException {\n    assertTrue(childFile.canRead());\n    assertTrue(childFile.canWrite());\n    FileUtils.makeFileReadOnly(childFile);\n    assertFalse(childFile.canWrite());\n    assertTrue(childFile.canRead());\n    FileUtils.makeFileWritable(childFile);\n    assertTrue(childFile.canWrite());\n    assertTrue(childFile.canRead());\n  }\n\n  @Test\n  public void deletePathRecursively() throws IOException {\n    File file = new File(folder, \"file.txt\");\n    Files.write(CONTENTS, file, FileUtils.UTF_8);\n    File subdir = new File(folder, \"subdir\");\n    subdir.mkdir();\n    File nestedFile = new File(subdir, \"nestedFile.txt\");\n    Files.write(CONTENTS, nestedFile, FileUtils.UTF_8);\n    File otherNestedFile = new File(subdir, \"otherNestedFile.txt\");\n    Files.write(CONTENTS, otherNestedFile, FileUtils.UTF_8);\n\n    "
    },
    {
        "Example": 74,
        "Generated Java Code": "```java\nimport java.util.Map;\nimport java.util.Set;\n\npublic class OperationStatisticsCollector {\n\n    private final Map<OperationSignature, Map<String, OperationStats>> operations;\n    private final Map<FieldSignature, Set<String>> fields;\n    private final Map<String, ClassStats> nestedClasses;\n\n    public OperationStatisticsCollector(\n            Map<OperationSignature, Map<String, OperationStats>> operations,\n            Map<FieldSignature, Set<String>> fields,\n            Map<String, ClassStats> nestedClasses) {\n        this.operations = operations;\n        this.fields = fields;\n        this.nestedClasses = nestedClasses;\n    }\n\n    public boolean containsOperation(String name, OperationSignature signature) {\n        Map<String, OperationStats> methods = operations.get(signature);\n        return methods != null && methods.containsKey(name);\n    }\n\n    public double compute(String name, OperationSignature signature) {\n        Map<String, OperationStats> methods = operations.get(signature);\n        if (methods == null) {\n            return 0.0;\n        }\n        OperationStats stats = methods.get(name);\n        if (stats == null) {\n            return 0.0;\n        }\n        return stats.compute();\n    }\n\n    public void addOperation(String typeName, String name, OperationSignature signature) {\n        Map<String, OperationStats> methods = operations.get(signature);\n        if (methods == null) {\n            methods = new HashMap<>();\n            operations.put(signature, methods);\n        }\n        methods.put(name, new OperationStats(typeName));\n    }\n\n    public void addField(FieldSignature signature, String typeName) {\n        Set<String> fieldNames = fields.get(signature);\n        if (fieldNames == null) {\n            fieldNames = new HashSet<>();\n            fields.put(signature, fieldNames);\n        }\n        fieldNames.add(typeName);\n    }\n\n    public ClassStats getNestedClassStats(String name) {\n        return nestedClasses.get(name);\n    }\n}\n```"
    },
    {
        "Example": 75,
        "Generated Java Code": "```java\nimport com.google.gerrit.entities.AccountGroup;\nimport com.google.gerrit.entities.GroupReference;\nimport com.google.gerrit.entities.NotifyConfig;\nimport com.google.gerrit.entities.Project;\nimport com.google.gerrit.entities.StoredSettings;\nimport com.google.gerrit.entities.Team;\nimport com.google.gerrit.exceptions.NoSuchGroupException;\nimport com.google.gerrit.exceptions.NoSuchProjectException;\nimport com.google.gerrit.metrics.Counter1;\nimport com.google.gerrit.server.account.GroupBackend;\nimport com.google.gerrit.server.account.Realm;\nimport com.google.gerrit.server.account.UseLegacyRealm;\nimport com.google.gerrit.server.config.AllUsersName;\nimport com.google.gerrit.server.config.ConfigResource;\nimport com.google.gerrit.server.config.GerritInstanceId;\nimport com.google.gerrit.server.config.PluginConfigFactory;\nimport com.google.gerrit.server.config.ProjectOwnerGroupsProvider;\nimport com.google.gerrit.server.config.TrackingFooters;\nimport com.google.gerrit.server.extensions.events.GitReferenceUpdated;\nimport com.google.gerrit.server.group.db.GroupsUpdate;\nimport com.google.gerrit.server.group.db.InternalGroupUpdate;\nimport com.google.gerrit.server.group.db.ReloadGroupsOrigin;\nimport com.google.gerrit.server.git.MetaDataUpdate;\nimport com.google.gerrit.server.group.GroupJson;\nimport com.google.gerrit.server.group.GroupResource;\nimport com.google.gerrit.server.group.GroupsCollection;\nimport com.google.gerrit.server.group.SystemGroupBackend;\nimport com.google.gerrit.server.index.account.AccountIndexCollection;\nimport com.google.gerrit.server.mail.receive.MailReceiver;\nimport com.google.gerrit.server.notedb.ReviewerStateInternal;\nimport com.google.gerrit.server.permissions.DefaultPermissionBackend;\nimport com.google.gerrit.server.permissions.PermissionBackend;\nimport com.google.gerrit.server.permissions.PermissionBackendCollection;\nimport com.google.gerrit.server.project.ProjectCache;\nimport com.google.gerrit.server.project.ProjectState;\nimport com.google.gerrit.server.project.ProjectsCollection;\nimport com.google.gerrit.server.project.ProjectState.RefFilter;\nimport com.google.gerrit.server.schemads.SchemaCreator;\nimport com.google.gerrit.server.schemads.SchemaCreatorManager;\nimport com.google.gerrit.server.securestore.SecureStore;\nimport com.google.gerrit.server.securestore.SecureStoreProvider;\nimport com.google.gerrit.server.ssh.SshInfo;\nimport com.google.gerrit.server.util.ManualRequestContext;\nimport com.google.gerrit.server.util.time.TimeUtil;\nimport com.google.gerrit.sshd.ServerCommand;\nimport com.google.gerrit.sshd.SshScope;\nimport com.google.gerrit.util.cli.CmdLineParser;\nimport com.google.inject.AbstractModule;\nimport com.google.inject.Provides;\nimport com.google.inject.Scopes;\nimport com.google.inject.Singleton;\nimport com.google.inject.TypeLiteral;\nimport com.google.inject.assistedinject.FactoryModuleBuilder;\nimport com.google.inject.multibindings.Multibinder;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport org.apache.log4j.Logger;\n\npublic class SshModule extends AbstractModule {\n  private final boolean deleteRepositoryRole;\n  private final List<String> getAllUsernames;\n  private final List<UserModel> getAllUsers;\n  private final UserModel getUserModel;\n  private final boolean updateUserModel;\n  private final boolean updateUserModel;\n  private final TeamModel getTeamModel;\n  private final boolean updateTeamModel;\n  private final boolean updateTeamModel;\n  private final boolean isInternalAccount;\n  private final List<String> getTeamNamesForRepositoryRole;\n  private final boolean deleteTeam;\n  private final List<String> getUsernamesForRepositoryRole;\n  private final boolean deleteTeamModel;\n  private final boolean deleteUser;\n  private final void setup;\n  private final boolean renameRepositoryRole;\n  private final List<String> getAllTeamNames;\n  private final boolean updateTeamModels;\n\n  public SshModule(\n      boolean deleteRepositoryRole,\n      List<String> getAllUsernames,\n      List<UserModel> getAllUsers,\n      UserModel getUserModel,\n      boolean updateUserModel,\n      boolean updateUserModel,\n      TeamModel getTeamModel,\n      boolean updateTeamModel,\n      boolean updateTeamModel,\n      boolean isInternalAccount,\n      List<String> getTeamNamesForRepositoryRole,\n      boolean deleteTeam,\n      List<String> getUsernamesForRepositoryRole,\n      boolean deleteTeamModel,\n      UserManager start,\n      void setUserService,\n      IUserService createUserService,\n      List<TeamModel> getAllTeams,\n      String getCookie,\n      boolean deleteUserModel,\n      UserManager stop,\n      boolean deleteUser,\n      void setup,\n      boolean renameRepositoryRole,\n      List<String> getAllTeamNames,\n      boolean updateTeamModels) {\n    this.deleteRepositoryRole = deleteRepositoryRole;\n    this.getAllUsernames = getAllUsernames;\n    this.getAllUsers = getAllUsers;\n    this.getUserModel = getUserModel;\n    this.updateUserModel = updateUserModel;\n    this.updateUserModel = updateUserModel;\n    this.getTeamModel = getTeamModel;\n    this.updateTeamModel = updateTeamModel;\n    this.updateTeamModel = updateTeamModel;\n    this.isInternalAccount = isInternalAccount;\n    this.getTeamNamesForRepositoryRole = getTeamNamesForRepositoryRole;\n    this.deleteTeam = deleteTeam;\n    this.getUsernamesForRepositoryRole = getUsernamesForRepositoryRole;\n    this.deleteTeamModel = deleteTeamModel;\n    this.deleteUser = deleteUser;\n    this.setup = setup;\n    this.renameRepositoryRole = renameRepositoryRole;\n    this.getAllTeamNames = getAllTeamNames;\n    this.updateTeamModels = updateTeamModels;\n  }\n\n  @Override\n  public void configure() {\n    bind(SshScope.class).in(Scopes.SINGLETON);\n    bind(PermissionBackend.class).to(DefaultPermissionBackend.class).in(Scopes.SINGLETON);\n    bind(PermissionBackendCollection.class).in(Scopes.SINGLETON);\n    bind(TrackingFooters.class).toInstance(TrackingFooters.DISABLED);\n    bind(TimeUtil.SystemClock.class).to(TimeUtil.StandardTimeClock.class);\n\n    install(\n        new FactoryModuleBuilder()\n            .implement(ServerCommand.Factory.class, SshServerCommand.Factory.class)\n            .build(ServerCommand.AssistedFactory.class));\n    install(\n        new FactoryModuleBuilder()\n            .implement(CmdLineParser.Factory.class, SshCmdLineParser.Factory.class)\n            .build(CmdLineParser.AssistedFactory.class));\n\n    bind(SshInfo.class).in(Scopes.SINGLETON);\n    bind(SshCreateExtension.class).in(Scopes.SINGLETON);\n    bind(SshDaemon.class).in(Scopes.SINGLETON);\n    bind(SshDaemonImpl.class).in(Scopes.SINGLETON);\n\n    bind(SecureStore.class)\n        .toProvider(SecureStoreProvider.class)\n        .in(Scopes.SINGLETON);\n\n    bind(SchemaCreatorManager.class).in(Scopes.SINGLETON);\n    bind(SchemaCreator.class).to(SchemaCreatorManager.class);\n\n    bind(ProjectOwnerGroupsProvider.class).in(Scopes.SINGLETON);\n\n    bind(GroupBackend.class).to(SystemGroupBackend.class).in(Scopes.SINGLETON);\n    bind(GroupsCollection.class).to(SystemGroupBackend.class).in(Scopes.SINGLETON);\n\n    bind(new TypeLiteral<Collection<ReloadGroupsOrigin>>() {})\n        .toInstance(Collections.singleton(ReloadGroupsOrigin.COMMAND_LINE));\n\n    Multibinder.newSetBinder(binder(), ReloadGroupsOrigin.class);\n\n    bind(PluginConfigFactory.class).in(Scopes.SINGLETON);\n    bind(GroupsUpdate.Factory.class).in(Scopes.SINGLETON);\n    bind(InternalGroupUpdate.Factory.class).in(Scopes.SINGLETON);\n    bind(AccountIndexCollection.class"
    },
    {
        "Example": 76,
        "Generated Java Code": "```java\nimport java.io.IOException;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic class GenericservletExampleLogWithFilterNameFilter implements Filter {\n    private FilterConfig filterConfig;\n\n    @Override\n    public void init(FilterConfig filterConfig) {\n        this.filterConfig = filterConfig;\n        try {\n            // Get file from CLASSPATH_PREFIX\n            String key = filterConfig.getInitParameter(\"file\");\n            URL url = this.getClass().getClassLoader().getResource(key);\n            // Load file\n            loadResource(url);\n        } catch (IOException e) {\n            filterConfig.getServletContext().log(filterConfig.getFilterName(), e);\n        }\n    }\n\n    private void loadResource(URL url) throws IOException {\n        if (url == null) {\n            throw new IOException(\"file not found\");\n        }\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n            throws IOException, ServletException {\n        try {\n            filterChain.doFilter(servletRequest, servletResponse);\n        } catch (IOException e) {\n            filterConfig.getServletContext().log(filterConfig.getFilterName(), e);\n            throw e;\n        } catch (ServletException e) {\n            filterConfig.getServletContext().log(filterConfig.getFilterName(), e);\n            throw e;\n        }\n    }\n\n    @Override\n    public void destroy() {\n    }\n}\n```"
    },
    {
        "Example": 77,
        "Generated Java Code": "```java  \n    Response response = new Response();\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\n          String.format(placeHolder, _call.getMethodDescriptor().getFullName(), _call.getRequest()));\n    }\n    // Send an empty response.\n    return response;  \n```"
    },
    {
        "Example": 78,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\n\npublic class Log {\n    private boolean consoleMode;\n    private org.apache.log4j.Logger logger;\n    private int maxValue;\n    private boolean showProgress;\n    private ProgressMonitor progressMonitor;\n    private StringBuffer log;\n    private String currentMessage;\n    private List<String> debugMessages;\n    private TreeSet<String> warnings;\n    private int curValue;\n    private HashMap<String,Integer> warningCounts;\n\n    public void setConsoleModeAndParseShowProgress(boolean consoleMode, String showProgress) {\n        setConsoleMode(consoleMode);\n        setShowProgress(showProgress);\n    }\n\n    public void setShowProgress(String showProgress) {\n        this.showProgress = Boolean.parseBoolean(showProgress);\n    }\n\n    public void setCurrentMessage(String currentMessage) {\n        this.currentMessage = currentMessage;\n    }\n\n    public int getMaxValue() {\n        return maxValue;\n    }\n\n    public String getLog() {\n        return log.toString();\n    }\n\n    public void logWarning(String warning) {\n        warnings.add(warning);\n        String key = warning.substring(0, warning.indexOf(' ')); // get the warning type from the warning message\n        Integer count = warningCounts.get(key);\n        if (count == null) count = 0;\n        count++;\n        warningCounts.put(key, count);\n    }\n\n    public ArrayList<String> getWarnings() {\n        ArrayList<String> list = new ArrayList<String>();\n        list.addAll(warnings);\n        return list;\n    }\n\n    public void logDebug(String debugMessage) {\n        debugMessages.add(debugMessage);\n    }\n\n    public ArrayList<String> getMessages() {\n        ArrayList<String> list = new ArrayList<String>();\n        list.addAll(debugMessages);\n        return list;\n    }\n\n    public boolean isConsoleMode() {\n        return consoleMode;\n    }\n\n    public List<String> getDebugMessages() {\n        return debugMessages;\n    }\n\n    public void setMaxValue(int maxValue) {\n        this.maxValue = maxValue;\n    }\n\n    public void incrementCurValue() {\n        curValue++;\n    }\n\n    public boolean isRunningOnServer() {\n        return true;\n    }\n\n    public String getCurrentMessage() {\n        return currentMessage;\n    }\n\n    public void setConsoleMode(boolean consoleMode) {\n        this.consoleMode = consoleMode;\n    }\n\n    public int getCurValue() {\n        return curValue;\n    }\n\n    public boolean isShowProgress() {\n        return showProgress;\n    }\n\n    public double getPercentComplete() {\n        return (double) curValue / maxValue;\n    }\n\n    // constructor\n    public Log(boolean consoleMode, org.apache.log4j.Logger logger) {\n        this.consoleMode = consoleMode;\n        this.logger = logger;\n        maxValue = -1;\n        showProgress = false;\n        progressMonitor = null;\n        log = new StringBuffer();\n        currentMessage = \"\";\n        debugMessages = new ArrayList<String>();\n        warnings = new TreeSet<String>();\n        curValue = 0;\n        warningCounts = new HashMap<String,Integer>();\n    }\n}\n```"
    },
    {
        "Example": 79,
        "Generated Java Code": "```java\npublic synchronized void addDownload(FileMapper fileMapper, String escapedJson, Logger log) {\n  if (fileMapper.m_downloadId == null)\n    return; // already deleted\n\n  String id = normalizeId(fileMapper);\n  if (id == null)\n    return; // invalid torrent\n\n  if (!addComplete(escapedJson, id, log))\n    return; // failed to add to libtorrent\n\n  if (fileMapper.m_downloadedLast == null)\n    return; // already paused\n\n  if (!m_torrentVarMap.add(id, escapedJson))\n    log.warning(\"Failed to update m_torrentVarMap\");\n}\n```"
    },
    {
        "Example": 80,
        "Generated Java Code": ""
    },
    {
        "Example": 81,
        "Generated Java Code": ""
    },
    {
        "Example": 82,
        "Generated Java Code": "```java\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport javax.imageio.ImageIO;\nimport javax.imageio.ImageWriteParam;\nimport javax.imageio.ImageWriter;\n\npublic class JpegWriter {\n\n    private String imageFormat;\n    private float writeCompressionQuality;\n    private String writeCompressionType;\n    private int writeCompressionMode;\n\n    public static final String DEFAULT_IMAGE_FORMAT = \"jpeg\";\n\n    public void setWriteCompressionMode(int writeCompressionMode) {\n        this.writeCompressionMode = writeCompressionMode;\n    }\n\n    public void setWriteCompressionType(String writeCompressionType) {\n        this.writeCompressionType = writeCompressionType;\n    }\n\n    public void setWriteCompressionQuality(float writeCompressionQuality) {\n        this.writeCompressionQuality = writeCompressionQuality;\n    }\n\n    public void write(BufferedImage bufferedImage, String filePath) throws IOException {\n        write(bufferedImage, filePath, imageFormat, writeCompressionMode);\n    }\n\n    public void write(BufferedImage bufferedImage, String filePath, String imageFormat) throws IOException {\n        write(bufferedImage, filePath, imageFormat, writeCompressionQuality);\n    }\n\n    public void write(BufferedImage bufferedImage, String filePath, String imageFormat, float writeCompressionQuality) throws IOException {\n        write(bufferedImage, filePath, imageFormat, writeCompressionQuality, writeCompressionType);\n    }\n\n    public void write(BufferedImage bufferedImage, String filePath, String imageFormat, float writeCompressionQuality, String writeCompressionType)\n            throws IOException {\n        ImageWriter imageWriter = lookupImageWriterForFormat(imageFormat);\n\n        ImageWriteParam imageWriteParam = imageWriter.getDefaultWriteParam();\n        imageWriteParam.setCompressionMode(writeCompressionMode);\n        imageWriteParam.setCompressionQuality(writeCompressionQuality);\n        imageWriteParam.setCompressionType(writeCompressionType);\n\n        File file = new File(filePath);\n        ImageIO.write(bufferedImage, imageFormat, file, imageWriteParam);\n    }\n\n    public void write(Image image, String filePath) throws IOException {\n        write(image, filePath, imageFormat, writeCompressionMode);\n    }\n\n    public void write(Image image, String filePath, String imageFormat) throws IOException {\n        write(image, filePath, imageFormat, writeCompressionQuality);\n    }\n\n    public void write(Image image, String filePath, String imageFormat, float writeCompressionQuality) throws IOException {\n        write(image, filePath, imageFormat, writeCompressionQuality, writeCompressionType);\n    }\n\n    public void write(Image image, String filePath, String imageFormat, float writeCompressionQuality, String writeCompressionType)\n            throws IOException {\n        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);\n        bufferedImage.getGraphics().drawImage(image, 0, 0, null);\n        write(bufferedImage, filePath, imageFormat, writeCompressionQuality, writeCompressionType);\n    }\n\n    public ImageWriteParam getImageWriteParameters() {\n        ImageWriter imageWriter = lookupImageWriterForFormat(imageFormat);\n        return imageWriter.getDefaultWriteParam();\n    }\n\n    private ImageWriter lookupImageWriterForFormat(String imageFormat) {\n        Iterator<ImageWriter> imageWriters = ImageIO.getImageWritersByFormatName(imageFormat);\n        if (imageWriters.hasNext()) {\n            return imageWriters.next();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported image format: \" + imageFormat);\n        }\n    }\n}\n```"
    },
    {
        "Example": 83,
        "Generated Java Code": "```java\nimport java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class OMAlogics {\n\n    public static final String OMA_REDIRECT_LINK = \"omaredirect.do\";\n    public static final String SITE_PARAM = \"path\";\n    public static final String removePath = \"/\";\n\n\n\n    public static String createOmaLink(String site, LinkedHashMap<String, String> params) throws MalformedURLException {\n        String queryString = createQueryString(params);\n        return createOmaLink(site, queryString);\n    }\n\n\n\n    public static String createQueryString(LinkedHashMap<String, String> params) {\n\n        List<String> keyList = getKeyList(params);\n        StringBuilder query = new StringBuilder();\n        query.append('?');\n        for (String key : keyList) {\n            query.append(encode(key));\n            query.append('=');\n            String value = params.get(key);\n            if (value != null) {\n                query.append(encode(value));\n            }\n            query.append('&');\n        }\n        query.deleteCharAt(query.length() - 1);\n        return query.toString();\n    }\n\n    public static HashMap<String, String> getParameterMap(String query) {\n        HashMap<String, String> map = new HashMap<String, String>();\n        String[] pairs = query.split(\"&\");\n        for (String pair : pairs) {\n            String[] keyValue = pair.split(\"=\");\n            map.put(keyValue[0], keyValue[1]);\n        }\n        return map;\n    }\n\n    public static ArrayList<String> getKeyList(HashMap<String, String> map) {\n        ArrayList<String> keyList = new ArrayList<String>();\n        for (String key : map.keySet()) {\n            keyList.add(key);\n        }\n        return keyList;\n    }\n\n    public static String encode(String s) {\n        try {\n            return URLEncoder.encode(s, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"UTF-8 is not supported?\", e);\n        }\n    }\n\n    public static String createOmaLink(String site, String queryString) throws MalformedURLException {\n        return conditionallyPrependHttp(new URL(site + removePath)) + queryString;\n    }\n\n    public static String conditionallyPrependHttp(URL url) throws MalformedURLException {\n        String s = url.toString();\n        if (!s.startsWith(\"http://\") && !s.startsWith(\"https://\")) {\n            return \"http://\" + s;\n        }\n        return s;\n    }\n\n    public static String getDelimiter() {\n        return \"&\";\n    }\n}\n```"
    },
    {
        "Example": 84,
        "Generated Java Code": "```java\nprivate static void setThreadingParametersForPort(String port, EngineConfig callingEngineConfig, ThreadPool tPool, Bus bus) {\n  Bus busOfServerEngine = initBusOfServerEngine(port, bus);\n  JettyHTTPServerEngine jettyHTTPServerEngine = retrieveJettyHTTPServerEngine(port, busOfServerEngine);\n  if (jettyHTTPServerEngine != null) {\n    setThreadingParametersForPort(port, callingEngineConfig, jettyHTTPServerEngine, tPool);\n  } else {\n    LOGGER.info(\"Unable to retrieve JettyHTTPServerEngine for port \" + port + \" to set threading parameters during runtime reconfiguration.\");\n    LOGGER.info(\"Setting the fall back threading parameters instead \" + fallbackThreadingParameters.getThreadParameters());\n    setThreadingParametersForPort(port, callingEngineConfig, fallbackThreadingParameters, tPool);\n  }\n}\n```"
    },
    {
        "Example": 85,
        "Generated Java Code": ""
    },
    {
        "Example": 86,
        "Generated Java Code": "```java\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableMap.Builder;\nimport fr.jmini.emq.common.elasticsearch.bean.ELEvaluator;\nimport fr.jmini.emq.common.elasticsearch.functions.Functions;\nimport org.elasticsearch.script.CompiledScript;\nimport org.elasticsearch.script.ScriptContext;\nimport org.elasticsearch.script.ScriptService;\nimport org.elasticsearch.script.ScriptType;\n\nimport java.util.Map;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static com.google.common.base.Preconditions.checkState;\n\npublic class MyELEvaluator {\n\n  private final ELEvaluator current;\n  private final ScriptService scriptService;\n  private final Map<String, Object> vars;\n\n  public MyELEvaluator(\n      final ELEvaluator current,\n      final ScriptService scriptService,\n      final Map<String, Object> vars) {\n    checkState(\n        current.getCurrentContext().getScriptContext().equals(ScriptContext.Standard.CHECK),\n        \"context must be check\");\n    this.current = current;\n    this.scriptService = scriptService;\n    this.vars = checkNotNull(vars);\n    Functions.addFunction(current, scriptService, VarsFunction.class);\n  }\n\n  public void setVariables(final Map<String, Object> vars) {\n    if (!vars.isEmpty()) {\n      checkState(\n          current.getCurrentContext().getScriptContext().equals(ScriptContext.Standard.CHECK),\n          \"context must be check\");\n      final Builder<String, Object> builder = ImmutableMap.builder();\n      builder.putAll(this.vars);\n      builder.putAll(vars);\n      current.getCurrentContext().getVars().put(\"vars\", builder.build());\n    }\n  }\n\n  public void resetContext() {\n    current.resetCurrentContext();\n  }\n\n  public <T> T evaluate<T>(final String script) {\n    return evaluate(ScriptType.INLINE, script);\n  }\n\n  public <T> T evaluate<T>(final ScriptType scriptType, String script) {\n    final CompiledScript compiledScript = current.getCurrentContext().compile(scriptType, script);\n\n    return current.getCurrentContext().run(compiledScript, vars, current.getCurrentContext().getScriptContext());\n  }\n\n  public static class VarsFunction implements Functions.Function {\n\n    @Override\n    public String getName() {\n      return \"vars\";\n    }\n\n    @Override\n    public Object resolve(final Context context, final Map<String, Object> args) {\n      checkNotNull(context);\n      return context.getVariable(\"vars\");\n    }\n  }\n}\n```"
    },
    {
        "Example": 87,
        "Generated Java Code": "```java\nimport org.bitcoinj.core.Sha256Hash;\nimport org.bitcoinj.core.UTXO;\nimport org.bitcoinj.core.UTXOId;\nimport org.bitcoinj.script.Script;\nimport org.bitcoinj.script.ScriptBuilder;\n\nimport java.math.BigInteger;\n\npublic class UTXOBuilder {\n\n  public static UTXO utxo(long index, BigInteger value, byte[] scriptBytes, long serialVersionUID, int height, Sha256Hash hash) {\n    UTXO utxo = new UTXO();\n    utxo.setHash(hash);\n    utxo.setOutputIndex(index);\n    UTXOId id = new UTXOId(hash, index);\n    utxo.setScript(ScriptBuilder.createOutputScript(Script.ScriptType.P2PKH, value));\n    utxo.setId(id);\n    utxo.setHeight(height);\n    utxo.setValue(value);\n    utxo.setSerialVersionUID(serialVersionUID);\n    return utxo;\n  }\n}\n```"
    },
    {
        "Example": 88,
        "Generated Java Code": "```java\npublic class Player {\n\n    float xStartPos, yStartPos, zStartPos;\n    float xPos, yPos, zPos;\n    float walkbiasangle = 0, walkbias = 0;\n    float rotAngle = 0;\n    float heading = 0;\n    float MOVE_FORWARD_SPEED = 0.2f;\n    float MOVE_BACKWARD_SPEED = 0.1f;\n    float STRAFE_SPEED = 0.15f;\n    float ROTATE_SPEED = 0.03f;\n\n    FloatBuffer lightPosition = Buffers.newDirectFloatBuffer(4);\n    FloatBuffer whiteLight = Buffers.newDirectFloatBuffer(4);\n    FloatBuffer lModelAmbient = Buffers.newDirectFloatBuffer(4);\n    int BULLET_INTERVAL = 10;\n    long bulletTime = 0;\n    int MAX_BULLETS = 20;\n    boolean[] monstersLiving = new boolean[MAX_MONSTERS];\n    Monster[] monsters = new Monster[MAX_MONSTERS];\n    ArrayList<Bullet> bullets = new ArrayList<>();\n    Level level;\n\n    public Player(String filename) {\n        level = Level.LoadFromFile(filename);\n\n        //Set up lighting variables\n        whiteLight.put(new float[]{1.0f, 1.0f, 1.0f, 1.0f}).flip();\n        lModelAmbient.put(new float[]{0.5f, 0.5f, 0.5f, 1.0f}).flip();\n        lightPosition.put(new float[]{0, 0, 0, 1}).flip();\n\n        GL11.glLightfv(GL11.GL_LIGHT1, GL11.GL_POSITION, lightPosition);\n        GL11.glLightfv(GL11.GL_LIGHT1, GL11.GL_AMBIENT, lModelAmbient);\n        GL11.glLightfv(GL11.GL_LIGHT1, GL11.GL_DIFFUSE, whiteLight);\n    }\n\n    public void restart() {\n        xPos = xStartPos;\n        yPos = yStartPos;\n        zPos = zStartPos;\n        heading = 0;\n        rotAngle = 0;\n        walkbiasangle = 0;\n        walkbias = 0;\n        bullets.clear();\n        level.reload();\n    }\n\n    public void start() {\n    }\n\n    public void update() {\n        //Update the player's position\n        xPos += (float) (Math.sin(heading) * MOVE_FORWARD_SPEED);\n        yPos += (float) (Math.cos(heading) * MOVE_FORWARD_SPEED);\n\n        //Keep the player within the level\n        if (xPos < 0) xPos = 0;\n        if (xPos > level.getWidth()) xPos = level.getWidth();\n        if (yPos < 0) yPos = 0;\n        if (yPos > level.getHeight()) yPos = level.getHeight();\n\n        //Update the player's rotation\n        rotAngle += (float) (Math.sin(heading) * ROTATE_SPEED);\n        heading += (float) (Math.cos(heading) * ROTATE_SPEED);\n\n        //Update the player's walk bias\n        walkbiasangle += 0.1;\n        walkbias = (float) (Math.sin(walkbiasangle));\n\n        //Update the player's bullets\n        for (int i = 0; i < bullets.size(); i++) {\n            bullets.get(i).update();\n        }\n\n        //Check if the player has collided with any monsters\n        for (int i = 0; i < MAX_MONSTERS; i++) {\n            if (monstersLiving[i] && monsters[i].collidesWith(this)) {\n                restart();\n            }\n        }\n\n        //Check if the player has finished the level\n        if (xPos == level.getGoalX() && yPos == level.getGoalY()) {\n            isFinished = true;\n        }\n    }\n\n    public void render() {\n        //Draw the player's body\n        GL11.glPushMatrix();\n        GL11.glTranslatef(xPos, yPos, zPos);\n        GL11.glRotatef(rotAngle * 57.2957795f, 0, 0, 1);\n        GL11.glRotatef(walkbiasangle * 10, 1, 0, 0);\n        GL11.glTranslatef(0, walkbias, 0);\n\n        //Draw the player's head\n        GL11.glPushMatrix();\n        GL11.glTranslatef(0, 0.5f, 0);\n        GL11.glScalef(0.5f, 0.5f, 0.5f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        //Draw the player's body\n        GL11.glPushMatrix();\n        GL11.glTranslatef(0, -0.5f, 0);\n        GL11.glScalef(0.5f, 1.0f, 0.5f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        //Draw the player's legs\n        GL11.glPushMatrix();\n        GL11.glTranslatef(-0.25f, -1.0f, 0);\n        GL11.glScalef(0.5f, 1.0f, 0.5f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        GL11.glPushMatrix();\n        GL11.glTranslatef(0.25f, -1.0f, 0);\n        GL11.glScalef(0.5f, 1.0f, 0.5f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        //Draw the player's arms\n        GL11.glPushMatrix();\n        GL11.glTranslatef(-0.5f, -0.5f, 0);\n        GL11.glScalef(0.5f, 1.0f, 0.5f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        GL11.glPushMatrix();\n        GL11.glTranslatef(0.5f, -0.5f, 0);\n        GL11.glScalef(0.5f, 1.0f, 0.5f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        //Draw the player's gun\n        GL11.glPushMatrix();\n        GL11.glTranslatef(0, -0.5f, 0.5f);\n        GL11.glScalef(0.25f, 0.25f, 0.25f);\n        glut.glutSolidCube(1.0f);\n        GL11.glPopMatrix();\n\n        //Draw the player's bullets\n        for (int i = 0; i < bullets.size(); i++) {\n            bullets.get(i).render();\n        }\n\n        GL11.glPopMatrix();\n    }\n\n    public void turnRight() {\n        heading -= 0.1f;\n    }\n\n    public void turnLeft() {\n        heading += 0.1f;\n    }\n\n    public void walkForwards() {\n        xPos += (float) (Math.sin(heading) * MOVE_FORWARD_SPEED);\n        yPos += (float) (Math.cos(heading) * MOVE_FORWARD_SPEED);\n    }\n\n    public void walkBackwards() {\n        xPos -= (float) (Math.sin(heading) * MOVE_BACKWARD_SPEED);\n        yPos -= (float) (Math.cos(heading) * MOVE_BACKWARD_SPEED);\n    }\n\n    public void strafeLeft() {\n        xPos += (float) (Math.cos(heading) * STRAFE_SPEED);\n        yPos -= (float) (Math.sin(heading) * STRAFE_SPEED);\n    }\n\n    public void strafeRight() {\n        xPos -= (float) (Math.cos(heading) * STRAFE_SPEED);\n        yPos += (float) (Math.sin(heading) * STRAFE_SPEED);\n    }\n\n    public void fire() {\n        if (System.currentTimeMillis() - bulletTime > BULLET_INTERVAL) {\n            bullets.add(new Bullet(xPos, yPos, heading));\n            bulletTime = System.currentTimeMillis();\n        }\n    }\n\n    public boolean isFinished() {\n        return xPos == level.getGoalX() && yPos == level.getGoalY();\n    }\n\n    public static void main(String[] args) {\n        Player player = new"
    },
    {
        "Example": 89,
        "Generated Java Code": "```java\nimport com.google.api.client.util.Key;\nimport java.util.List;\n\npublic class GetOfferDetailsResponse {\n    @Key\n    public Return Return;\n\n    public static class Return {\n        @Key\n        public DetailOfferData DetailOfferData;\n    }\n\n    public static class DetailOfferData {\n        @Key\n        public List<SourceGeos> SourceGeos;\n        @Key\n        public Seo Seo;\n        @Key\n        public Merchant Merchant;\n        @Key\n        public List<TargetGeos> TargetGeos;\n        @Key\n        public List<OfferMedia> OfferMedia;\n        @Key\n        public FulfillmentPartner FulfillmentPartner;\n        @Key\n        public List<Products> Products;\n        @Key\n        public List<RedemptionAddresses> RedemptionAddresses;\n    }\n    public static class SourceGeos {\n        @Key\n        public List<Geo> Geo;\n    }\n\n    public static class Seo {\n        @Key\n        public String SchemaOrgOfferUrl;\n        @Key\n        public String SchemaOrgMerchantUrl;\n        @Key\n        public String GoogleMerchantUrl;\n    }\n\n    public static class Merchant {\n        @Key\n        public List<Addresses> Addresses;\n    }\n\n    public static class Addresses {\n    }\n\n    public static class TargetGeos {\n        @Key\n        public List<Geo> Geo;\n    }\n\n    public static class Geo {\n        @Key\n        public String Country;\n        @Key\n        public String Region;\n        @Key\n        public String City;\n    }\n\n    public static class OfferMedia {\n        @Key\n        public List<OfferImage> OfferImage;\n    }\n\n    public static class OfferImage {\n        @Key\n        public List<Entry> Entry;\n    }\n\n    public static class Entry {\n        @Key\n        public Value Value;\n    }\n\n    public static class Value {\n        @Key\n        public List<Item> Item;\n    }\n\n    public static class Item {\n        @Key\n        public String Key;\n        @Key\n        public String Value;\n    }\n\n    public static class FulfillmentPartner {\n    }\n\n    public static class Products {\n        @Key\n        public List<Product> Product;\n    }\n    public static class Product {}\n\n    public static class RedemptionAddresses {\n        @Key\n        public List<RedemptionAddress> RedemptionAddress; \n    }\n\n    public static class RedemptionAddress {}\n\n}\n```"
    },
    {
        "Example": 90,
        "Generated Java Code": "```java\nimport com.google.api.client.util.Base64;\nimport com.google.api.gax.rpc.ApiException;\nimport com.google.cloud.pubsublite.AdminClient;\nimport com.google.cloud.pubsublite.AdminClientSettings;\nimport com.google.cloud.pubsublite.CloudRegion;\nimport com.google.cloud.pubsublite.CloudRegionOrZone;\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectNumber;\nimport com.google.cloud.pubsublite.ReservationPath;\nimport com.google.cloud.pubsublite.ReservationPathOrName;\nimport com.google.cloud.pubsublite.SubscriptionName;\nimport com.google.cloud.pubsublite.SubscriptionPath;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.proto.DeliveryConfig;\nimport com.google.cloud.pubsublite.proto.Subscription;\nimport com.google.cloud.pubsublite.proto.Subscription.DeliveryRequirement;\nimport com.google.protobuf.ByteString;\nimport com.google.pubsub.v1.SubscriptionName as V1SubscriptionName;\nimport com.google.pubsub.v1.TopicName as V1TopicName;\nimport java.util.concurrent.ExecutionException;\n\npublic class SubscribeWithDeliveryConfigExample {\n\n  public static void main(String... args) throws Exception {\n    // TODO(developer): Replace these variables before running the sample.\n    String cloudRegion = \"your-cloud-region\";\n    char zoneId = 'b';\n    long projectNumber = Long.parseLong(\"123456789\");\n    String subscriptionId = \"your-subscription-id\";\n    String topicId = \"your-topic-id\";\n    subscribeWithDeliveryConfigExample(cloudRegion, zoneId, projectNumber, subscriptionId, topicId);\n  }\n\n  public static void subscribeWithDeliveryConfigExample(\n      String cloudRegion, char zoneId, long projectNumber, String subscriptionId, String topicId)\n      throws ApiException, ExecutionException, InterruptedException {\n    CloudRegionOrZone location;\n    if (zoneId != 0) {\n      location = CloudRegionOrZone.of(CloudRegion.of(cloudRegion), CloudZone.of(zoneId));\n    } else {\n      location = CloudRegionOrZone.of(CloudRegion.of(cloudRegion));\n    }\n\n    TopicPath topicPath =\n        TopicPath.newBuilder()\n            .setProject(ProjectNumber.of(projectNumber))\n            .setLocation(location)\n            .setName(TopicName.of(topicId))\n            .build();\n\n    SubscriptionPath subscriptionPath =\n        SubscriptionPath.newBuilder()\n            .setLocation(location)\n            .setName(SubscriptionName.of(subscriptionId))\n            .build();\n\n    SubscriptionName v1SubscriptionName =\n        V1SubscriptionName.of(projectNumber, cloudRegion, zoneId, subscriptionId);\n    V1TopicName v1TopicName = V1TopicName.of(projectNumber, cloudRegion, zoneId, topicId);\n\n    AdminClientSettings adminClientSettings =\n        AdminClientSettings.newBuilder()\n            .setRegion(CloudRegion.of(cloudRegion))\n            .setTransportChannelProvider(\n                AdminClientSettings.defaultGrpcTransportProviderBuilder()\n                    .setMaxInboundMessageSize(10 * 1024 * 1024) // 10 MB\n                    .build())\n            .build();\n\n    try (AdminClient adminClient = AdminClient.create(adminClientSettings)) {\n      // Create a subscription with automatic acknowledgment after 1 second.\n      Subscription subscription =\n          adminClient\n              .createSubscription(\n                  subscriptionPath,\n                  v1SubscriptionName,\n                  topicPath,\n                  v1TopicName,\n                  DeliveryConfig.newBuilder()\n                      .setDeliveryRequirement(DeliveryRequirement.DELIVER_IMMEDIATELY)\n                      .setAckDeadlineSeconds(1)\n                      .build())\n              .get();\n\n      System.out.println(\"Subscription created: \" + subscription.getName());\n      System.out.println(\"Delivery requirement: \" + subscription.getDeliveryConfig().getDeliveryRequirement());\n      System.out.println(\"ACK deadline: \" + subscription.getDeliveryConfig().getAckDeadlineSeconds());\n    }\n  }\n}  \n```"
    },
    {
        "Example": 91,
        "Generated Java Code": "```java\npublic void bindAndStart(\n        EventHandlerFactory eventHandlerFactory,\n        NioServer server,\n        Wallet wallet,\n        TransactionBroadcaster broadcaster,\n        ProtobufParser.Listener<Protos.TwoWayChannelMessage> protobufHandlerListener,\n        ProtobufParser<Protos.TwoWayChannelMessage> socketProtobufHandler,\n        int timeoutSeconds,\n        PaymentChannelServer paymentChannelManager,\n        PaymentChannelCloseException.CloseReason closeReason,\n        Coin minAcceptedChannelSize,\n        ServerConnectionEventHandler eventHandler) {\n        server.addHandlerFactory(eventHandlerFactory);\n        server.setProtobufHandlerListener(protobufHandlerListener);\n        server.setSocketProtobufHandler(socketProtobufHandler);\n        server.setTimeoutSeconds(timeoutSeconds);\n        server.setPaymentChannelManager(paymentChannelManager);\n        server.setCloseReason(closeReason);\n        server.setMinAcceptedChannelSize(minAcceptedChannelSize);\n        server.setEventHandler(eventHandler);\n        server.bindAndStart(wallet, broadcaster);\n    }\n```"
    },
    {
        "Example": 92,
        "Generated Java Code": ""
    },
    {
        "Example": 93,
        "Generated Java Code": "```java\nimport javax.xml.bind.JAXBElement;\nimport com.google.api.gax.rpc.AlreadyExistsException;\nimport com.google.api.gax.rpc.NotFoundException;\nimport com.google.cloud.certificatemanager.v1.Access;\nimport com.google.cloud.certificatemanager.v1.Auth;\nimport com.google.cloud.certificatemanager.v1.CertificateChainInfo;\nimport com.google.cloud.certificatemanager.v1.CertificateCredentials;\nimport com.google.cloud.certificatemanager.v1.CertificateInfo;\nimport com.google.cloud.certificatemanager.v1.CheckServiceAccessRequest;\nimport com.google.cloud.certificatemanager.v1.CheckServiceAccessResponse;\nimport com.google.cloud.certificatemanager.v1.CertificateManagerClient;\nimport com.google.cloud.certificatemanager.v1.CreateCertificateRequest;\nimport com.google.cloud.certificatemanager.v1.CreateCertificateRequest.CertificateId;\nimport com.google.cloud.certificatemanager.v1.CreateCertificateResponse;\nimport com.google.cloud.certificatemanager.v1.DeleteCertificateRequest;\nimport com.google.cloud.certificatemanager.v1.GetCertificateRequest;\nimport com.google.cloud.certificatemanager.v1.GetCertificateResponse;\nimport com.google.cloud.certificatemanager.v1.ListCertificatesRequest;\nimport com.google.cloud.certificatemanager.v1.ListCertificatesResponse;\nimport com.google.cloud.certificatemanager.v1.LocationName;\nimport com.google.cloud.certificatemanager.v1.PageToken;\nimport com.google.cloud.certificatemanager.v1.PasswordCredentials;\nimport com.google.cloud.certificatemanager.v1.RegistrationRequest;\nimport com.google.cloud.certificatemanager.v1.RegistrationResponse;\nimport com.google.cloud.certificatemanager.v1.Role;\nimport com.google.cloud.certificatemanager.v1.RoleList;\nimport com.google.cloud.certificatemanager.v1.SignCertificateRequest;\nimport com.google.cloud.certificatemanager.v1.SignCertificateResponse;\nimport com.google.cloud.certificatemanager.v1.SubjectAltNames;\nimport com.google.cloud.certificatemanager.v1.UpdateCertificateRequest;\nimport com.google.cloud.certificatemanager.v1.UpdateCertificateRequest.UpdateMask;\nimport com.google.cloud.certificatemanager.v1.User;\nimport com.google.cloud.certificatemanager.v1.UserValidation;\nimport com.google.cloud.certificatemanager.v1.ValidateTokenRequest;\nimport com.google.cloud.certificatemanager.v1.ValidateTokenResponse;\nimport java.io.IOException;\nimport java.time.Duration;\nimport java.util.concurrent. ExecutionException;\nimport java.util.concurrent.TimeoutException;\nimport javax.xml.namespace.QName;\n\npublic class Certificates {\n\n  public static void createCertificate() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"my-project\";\n    String location = \"us-east1\";\n    String domain = \"www.example.com\";\n    createCertificate(projectId, location, domain);\n  }\n\n  // Create an SSL certificate.\n  public static void createCertificate(String projectId, String location, String domain) {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (CertificateManagerClient certificateManagerClient = CertificateManagerClient.create()) {\n      // Set the fully qualified path for the project\n      LocationName parent = LocationName.of(projectId, location);\n\n      // Construct CertificateId\n      CertificateId certificateId = CertificateId.of(projectId, location, domain);\n\n      InitializeCertificateRequest.Builder initializeCertificateRequestBuilder =\n          InitializeCertificateRequest.newBuilder();\n      initializeCertificateRequestBuilder.getCertificateBuilder().setCommonName(domain);\n\n      // Setting Subject Alternative Name (SAN) for the certificate.\n      SubjectAltNames subjectAltNames =\n          SubjectAltNames.newBuilder().addDnsNames(domain).addDnsNames(\"*.example.com\").build();\n      initializeCertificateRequestBuilder\n          .getCertificateBuilder()\n          .getSubjectAltNamesBuilder()\n          .addAllDnsNames(subjectAltNames.getDnsNamesList());\n\n      // Instantiates a client\n      CreateCertificateRequest certificateRequest =\n          CreateCertificateRequest.newBuilder()\n              .setParent(parent.toString())\n              .setCertificateId(certificateId.toString())\n              .setCertificate(initializeCertificateRequestBuilder.build())\n              .build();\n\n      CreateCertificateResponse response =\n          certificateManagerClient.createCertificateAsync(certificateRequest).get();\n\n      System.out.println(\"Certificate successfully created. Operation Details: \" + response);\n    } catch (IOException | InterruptedException | ExecutionException | TimeoutException e) {\n      e.printStackTrace();\n    }\n  }\n\n  public static void listCertificates() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"my-project\";\n    String location = \"us-east1\";\n    listCertificates(projectId, location);\n  }\n\n  // List the certificates in a location.\n  public static void listCertificates(String projectId, String location) {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (CertificateManagerClient certificateManagerClient = CertificateManagerClient.create()) {\n      // Set the fully qualified path for the location.\n      LocationName parent = LocationName.of(projectId, location);\n\n      // List the certificates in the project\n      for (Certificate certificate :\n          certificateManagerClient.listCertificates(parent.toString()).iterateAll()) {\n        System.out.println(String.format(\"Certificate: %s\\n\", certificate.getDisplayName()));\n        System.out.println(\n            String.format(\n                \"\\tCommon Name: %s, Lifetime: %s, Status: %s\",\n                certificate.getCommonName(), certificate.getLifetime(), certificate.getStatus()));\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  public static void getCertificate() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"my-project\";\n    String location = \"us-east1\";\n    String domain = \"www.example.com\";\n    getCertificate(projectId, location, domain);\n  }\n\n  // Get the certificate present for the given certificate id.\n  public static void getCertificate(String projectId, String location, String domain) {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (CertificateManagerClient certificateManagerClient = CertificateManagerClient.create()) {\n      // Set the fully qualified path for the certificate.\n      CertificateName certificateName = CertificateName.of(projectId, location, domain);\n\n      // Get the certificate\n      GetCertificateResponse certificate =\n          certificateManagerClient.getCertificate(certificateName.toString());\n\n      System.out.println(\n          String.format(\n              \"Certificate: %s\\n\",\n              certificate.getCertificate().getDisplayName().toString()));\n      System.out.println(\n          String.format(\n              \"\\tCommon Name: %s, Lifetime: %s, Status: %s\",\n              certificate.getCertificate().getCommonName(),\n              certificate.getCertificate().getLifetime(),\n              certificate.getCertificate().getStatus()));\n\n    } catch (NotFoundException e) {\n      System.out.println(\n          String.format(\n              \"Certificate with name %s not found in location %s.\", domain, location));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  public static void deleteCertificate() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"my-project\";\n    String location = \"us-east1\";\n    String domain = \"www.example.com\";\n    deleteCertificate(projectId, location, domain);\n  }\n\n  // Delete the certificate present at the given certificate id.\n  public static void deleteCertificate(String projectId, String location, String domain) {\n    // Initialize client that will be used to send requests. This client only needs to"
    },
    {
        "Example": 94,
        "Generated Java Code": "```java\nimport java.util.Objects;\npublic class DataValidationError {\n    private Long expectedDataUnitId;\n    private Long seqNo;\n    private Long dataSetId;\n    private Long dataUnitId;\n    private String expectedValue;\n    private String actualValue;\n    private Long expectedDataSetId;\n    private String errorCode;\n    private Long testId;\n    private String failedAttributeName;\n    private String srcFileName;\n    private String errorMsg;\n\n    public DataValidationError() {\n    }\n\n    public void setExpectedValue(String expectedValue) {\n        this.expectedValue = expectedValue;\n    }\n\n    public String getExpectedValue() {\n        return expectedValue;\n    }\n\n    public Long getExpectedDataSetId() {\n        return expectedDataSetId;\n    }\n\n    public void setExpectedDataSetId(Long expectedDataSetId) {\n        this.expectedDataSetId = expectedDataSetId;\n    }\n\n    public void setActualValue(String actualValue) {\n        this.actualValue = actualValue;\n    }\n\n    public Long getDataSetId() {\n        return dataSetId;\n    }\n\n    public void setSrcFileName(String srcFileName) {\n        this.srcFileName = srcFileName;\n    }\n\n    public Long getExpectedDataUnitId() {\n        return expectedDataUnitId;\n    }\n\n    public void setExpectedDataUnitId(Long expectedDataUnitId) {\n        this.expectedDataUnitId = expectedDataUnitId;\n    }\n\n    public String getSrcFileName() {\n        return srcFileName;\n    }\n\n    public Long getSeqNo() {\n        return seqNo;\n    }\n\n    public String getFailedAttributeName() {\n        return failedAttributeName;\n    }\n\n    public void setTestId(Long testId) {\n        this.testId = testId;\n    }\n\n    public Long getTestId() {\n        return testId;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n\n    public String getActualValue() {\n        return actualValue;\n    }\n\n    public Long getDataUnitId() {\n        return dataUnitId;\n    }\n\n    public void setSeqNo(Long seqNo) {\n        this.seqNo = seqNo;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setDataUnitId(Long dataUnitId) {\n        this.dataUnitId = dataUnitId;\n    }\n\n    public void setDataSetId(Long dataSetId) {\n        this.dataSetId = dataSetId;\n    }\n\n    @Override\n    public String toString() {\n        return \"DataValidationError{\" +\n                \"expectedDataUnitId=\" + expectedDataUnitId +\n                \", seqNo=\" + seqNo +\n                \", dataSetId=\" + dataSetId +\n                \", dataUnitId=\" + dataUnitId +\n                \", expectedValue='\" + expectedValue + '\\'' +\n                \", actualValue='\" + actualValue + '\\'' +\n                \", expectedDataSetId=\" + expectedDataSetId +\n                \", errorCode='\" + errorCode + '\\'' +\n                \", testId=\" + testId +\n                \", failedAttributeName='\" + failedAttributeName + '\\'' +\n                \", srcFileName='\" + srcFileName + '\\'' +\n                \", errorMsg='\" + errorMsg + '\\'' +\n                '}';\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        DataValidationError that = (DataValidationError) o;\n        return Objects.equals(expectedDataUnitId, that.expectedDataUnitId) &&\n                Objects.equals(seqNo, that.seqNo) &&\n                Objects.equals(dataSetId, that.dataSetId) &&\n                Objects.equals(dataUnitId, that.dataUnitId) &&\n                Objects.equals(expectedValue, that.expectedValue) &&\n                Objects.equals(actualValue, that.actualValue) &&\n                Objects.equals(expectedDataSetId, that.expectedDataSetId) &&\n                Objects.equals(errorCode, that.errorCode) &&\n                Objects.equals(testId, that.testId) &&\n                Objects.equals(failedAttributeName, that.failedAttributeName) &&\n                Objects.equals(srcFileName, that.srcFileName) &&\n                Objects.equals(errorMsg, that.errorMsg);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(expectedDataUnitId, seqNo, dataSetId, dataUnitId, expectedValue, actualValue, expectedDataSetId, errorCode, testId, failedAttributeName, srcFileName, errorMsg);\n    }\n}\n```"
    },
    {
        "Example": 95,
        "Generated Java Code": "```java  \nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.admin.directory.Directory;\nimport com.google.api.services.admin.directory.DirectoryScopes;\nimport com.google.api.services.admin.directory.model.Groups;\nimport com.google.api.services.admin.directory.model.Member;\nimport com.google.api.services.admin.directory.model.User;\nimport com.google.auth.http.HttpCredentialsAdapter;\nimport com.google.auth.oauth2.GoogleCredentials;\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\nimport java.util.Collections;\n\n/* Class to demonstrate use-case of Admin Directory Groups API */\npublic class GroupsForAUser {\n\n  /* Scopes required by this API call. If modifying these scopes, delete your previously saved tokens/ folder. */\n  static final String[] SCOPES = {DirectoryScopes.ADMIN_DIRECTORY_GROUP_MEMBER_READONLY,\n      DirectoryScopes.ADMIN_DIRECTORY_GROUP_READONLY};\n\n  /**\n   * Retrieve list of groups for a user.\n   *\n   * @param userKey - Email address of the user for which groups (or memberships)\n   *     needs to be retrieved.\n   */\n  public static void listGroupForAUser(String userKey) throws IOException, GeneralSecurityException {\n        /* Load pre-authorized credentials from the environment.\n        TODO(developer) - See https://developers.google.com/identity for\n        guides on implementing OAuth2 for your application. */\n    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault()\n        .createScoped(Collections.singleton(DirectoryScopes.ADMIN_DIRECTORY_GROUP_MEMBER_READONLY));\n    NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n    Directory service =\n        new Directory.Builder(HTTP_TRANSPORT,\n            GsonFactory.getDefaultInstance(),\n            new HttpCredentialsAdapter(credentials))\n            .setApplicationName(\"Directory Groups API Snippets\")\n            .build();\n\n    try {\n      // Fetch user details.\n      User user = service.users().get(\"admin@example.com\").setUserKey(userKey).execute();\n\n      // Create query string.\n      StringBuilder query = new StringBuilder(\"email=\");\n      if (user.getPrimaryEmail() != null) {\n        query.append(user.getPrimaryEmail());\n      } else if (user.getEmail() != null) {\n        query.append(user.getEmail());\n      } else {\n        System.out.println(\"No email found for this user to check group membership.\");\n        return;\n      }\n\n      // Retrieve groups where the user is a member.\n      Groups groups = service.groups().list().setUserKey(userKey).setQuery(query.toString())\n          .setFields(\"nextPageToken, groups(email, id)\").execute();\n      System.out.println(\"List of groups where the user is a member:\");\n      System.out.println(groups.toPrettyString());\n\n    } catch (GoogleJsonResponseException e) {\n      // TODO(developer) - handle error appropriately\n      GoogleJsonError error = e.getDetails();\n      if (error.getCode() == 404) {\n        System.out.printf(\"Group with email %s not found.\\n\", userKey);\n      } else {\n        System.err.println(\"Unexpected error: \" + e.getMessage());\n      }\n    }\n  }\n\n  /**\n   * Retrieve list of group members.\n   *\n   * @param groupKey - Email address of the group for which members are to be retrieved.\n   */\n  public static void listGroupMembers(String groupKey) throws IOException, GeneralSecurityException {\n        /* Load pre-authorized credentials from the environment.\n        TODO(developer) - See https://developers.google.com/identity for\n        guides on implementing OAuth2 for your application. */\n    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault()\n        .createScoped(Collections.singleton(DirectoryScopes.ADMIN_DIRECTORY_GROUP_MEMBER_READONLY));\n    NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n    Directory service =\n        new Directory.Builder(HTTP_TRANSPORT,\n            GsonFactory.getDefaultInstance(),\n            new HttpCredentialsAdapter(credentials))\n            .setApplicationName(\"Directory Groups API Snippets\")\n            .build();\n\n    try {\n      // Create query string.\n      StringBuilder query = new StringBuilder(\"group=\");\n      if (groupKey.indexOf('@') < 0) {\n        query.append(\"email:\");\n      }\n      query.append(groupKey);\n\n      // Retrieve group details.\n      Groups groups = service.groups().list().setQuery(query.toString()).setFields(\n          \"nextPageToken, groups(email, id)\").execute();\n      Groups.GroupsIterator groupIterator = groups.getGroups().iterator();\n      if (groupIterator.hasNext()) {\n        Groups.Group group = groupIterator.next();\n\n        // Retrieve group members.\n        Members members = service.members().list(group.getId())\n            .setFields(\"nextPageToken, members(id, email)\").execute();\n        System.out.println(\"List of members in the group:\");\n        System.out.println(members.toPrettyString());\n\n      }\n    } catch (GoogleJsonResponseException e) {\n      // TODO(developer) - handle error appropriately\n      GoogleJsonError error = e.getDetails();\n      if (error.getCode() == 404) {\n        System.out.printf(\"Member with email %s not found.\\n\", groupKey);\n      } else {\n        System.err.println(\"Unexpected error: \" + e.getMessage());\n      }\n    }\n  }\n\n  /**\n   * Retrieve list of members for a user.\n   *\n   * @param userKey - Email address of the user for which members are to be retrieved.\n   */\n  public static void listUserMembers(String userKey) throws IOException, GeneralSecurityException {\n        /* Load pre-authorized credentials from the environment.\n        TODO(developer) - See https://developers.google.com/identity for\n        guides on implementing OAuth2 for your application. */\n    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault()\n        .createScoped(Collections.singleton(DirectoryScopes.ADMIN_DIRECTORY_GROUP_MEMBER_READONLY));\n    NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n    Directory service =\n        new Directory.Builder(HTTP_TRANSPORT,\n            GsonFactory.getDefaultInstance(),\n            new HttpCredentialsAdapter(credentials))\n            .setApplicationName(\"Directory Groups API Snippets\")\n            .build();\n    User.Members members;\n    try {\n      // Fetch user details.\n      User user = service.users().get(\"admin@example.com\").setUserKey(userKey).execute();\n\n      // Create query string.\n      StringBuilder query = new StringBuilder(\"email=\");\n      if (user.getPrimaryEmail() != null) {\n        query.append(user.getPrimaryEmail());\n      } else if (user.getEmail() != null) {\n        query.append(user.getEmail());\n      } else {\n        System.out.println(\"No email found for this user to check group membership.\");\n        return;\n      }\n\n      // Retrieve groups where the user is a member.\n      members = service.members().list(\"admin@example.com\").setUserKey(userKey)\n          .setQuery(query.toString())\n          .setFields(\"nextPageToken, members(id, email)\").execute();\n\n      // Retrieve members for the user.\n      System.out.println(\"List of members where the user is a member:\");\n      System.out.println(members.toPrettyString());\n\n    } catch (GoogleJsonResponseException e) {\n      // TODO(developer) - handle error appropriately\n      GoogleJsonError error = e.getDetails();\n      if (error.getCode() == 404) {\n        System.out.printf(\"User with email %s not found.\\n\", userKey);\n      } else {\n        System.err.println(\"Unexpected error: \" + e.getMessage());\n      }\n    }\n  }\n}  \n```"
    },
    {
        "Example": 96,
        "Generated Java Code": "```java  \n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.google.cloud.pubsublite.CloudRegion;\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectNumber;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.cloudpubsub.Publisher;\nimport com.google.cloud.pubsublite.cloudpubsub.PublisherSettings;\nimport com.google.cloud.pubsublite.cloudpubsub.TopicPathConverter;\nimport com.google.cloud.pubsublite.proto.CloudRegionOrZone;\nimport com.google.cloud.pubsublite.proto.CloudRegionOrZone.CloudRegionOrZoneCase;\nimport com.google.cloud.pubsublite.proto.CloudRegionOrZone.CloudZoneOrRegion;\nimport com.google.cloud.pubsublite.proto.TopicPathOrUnknown;\nimport com.google.cloud.pubsublite.proto.TopicPathOrUnknown.TopicPathOrUnknownCase;\nimport com.google.cloud.pubsublite.proto.TopicPathOrUnknown.TopicOrUnknown;\nimport com.google.common.util.concurrent.MoreExecutors;\nimport com.google.pubsublite.spark.util.PublisherUtil;\nimport java.util.concurrent.TimeUnit;\n\npublic class ShutdownExample {\n  private static final Logger logger = LoggerFactory.getLogger(ShutdownExample.class);\n\n  public static void main(String... args) throws Exception {\n\n    // TODO(developer): Replace these variables before running the sample.\n    long projectNumber = Long.parseLong(\"123456789\");\n    String cloudRegion = \"your-cloud-region\";\n    char zoneId = 'a';\n    String topicId = \"your-topic-id\";\n    // Ensure the topic exists. Create the topic using gcloud:\n    //   gcloud pubsub topics create --project=PROJECT_ID --location=region/zone TOPIC_ID\n\n    TopicPath topicPath =\n        TopicPath.newBuilder()\n            .setProject(ProjectNumber.of(projectNumber))\n            .setZone(CloudZone.of(CloudRegion.of(cloudRegion), zoneId))\n            .setName(TopicName.of(topicId))\n            .build();\n\n    TopicPathConverter topicPathConverter = TopicPathConverter.create(topicPath);\n    TopicPathOrUnknown topicPathOrUnknown =\n        TopicPathOrUnknown.newBuilder()\n            .setTopicPath(topicPathConverter.getTopicPathOrUnknown())\n            .build();\n    CloudRegionOrZone cloudRegionOrZone =\n        CloudRegionOrZone.newBuilder()\n            .setCloudRegionOrZoneCase(CloudRegionOrZoneCase.CLOUD_ZONE)\n            .setCloudZoneOrRegion(\n                CloudZoneOrRegion.newBuilder()\n                    .setZone(\n                        CloudRegionOrZone.CloudZone.newBuilder()\n                            .setRegion(cloudRegion)\n                            .setZone(String.valueOf(zoneId))\n                            .build())\n                    .build())\n            .build();\n\n    PublisherSettings publisherSettings =\n        PublisherSettings.newBuilder()\n            .setParallelism(1)\n            .setTopicPath(topicPathOrUnknown)\n            .setCloudRegionOrZone(cloudRegionOrZone)\n            .build();\n\n    TopicOrUnknown topicOrUnknown =\n        TopicOrUnknown.newBuilder()\n            .setTopic(topicPathConverter.toProto())\n            .setUnknown(PublisherUtil.getUnknownTopicOrUnknown(topicPathConverter.getTopicPath()))\n            .build();\n\n    Publisher publisher = Publisher.create(publisherSettings);\n\n    Thread.UncaughtExceptionHandler handler =\n        (thread, ex) ->\n            logger.error(\"An exception occurred in the Publisher thread.\", ex);\n\n    publisher\n        .getOrCreateTopicCallable()\n        .call()\n        .handle(\n            (result, throwable) -> {\n              if (throwable != null) {\n                logger.error(\n                    \"Failed to create topic: \" + topicId, throwable);\n              } else {\n                logger.info(\"Created topic: \" + topicId);\n              }\n              return null;\n            })\n        .get();\n\n    publisher.startAsync().awaitRunning();\n    publisher\n        .publishCallable()\n        .call()\n        .thenRunAsync(\n            () -> {\n              try {\n                // Publish messages here.\n                Thread.sleep(TimeUnit.SECONDS.toMillis(10));\n              } catch (InterruptedException e) {\n                logger.error(\"Interrupted while publishing. Shutdown initiated.\", e);\n                shutdownPublisher(publisher);\n                return;\n              }\n              shutdownPublisher(publisher);\n            },\n            MoreExecutors.directExecutor())\n        .get();\n  }\n\n  private static void shutdownPublisher(Publisher publisher) {\n    logger.info(\"Shutting down the Publisher.\");\n    publisher.stopAsync().awaitTerminated();\n    logger.info(\"Publisher was shut down.\");\n  }\n}  \n```"
    },
    {
        "Example": 97,
        "Generated Java Code": "```java\nimport androidx.media.MediaMetadataEditorCompat;\nimport android.util.Log;\nimport android.support.v4.media.session.PlaybackStateCompat;\n\nMediaMetadataEditorCompat metadataEditorCompat = new MediaMetadataEditorCompat.Builder()\n        .putBitmap(MediaMetadataEditorCompat.METADATA_KEY_ARTWORK, /* Bitmap */ null)\n        .build();\n\nmetadataEditorCompat.apply();\n\nmetadataEditorCompat.clear();\n\nMediaMetadataEditorCompat editorCompat = new MediaMetadataEditorCompat();\neditorCompat.putLong(MediaMetadataEditorCompat.METADATA_KEY_ARTWORK, 0L);\neditorCompat.editMetadata(mActualMetadataEditor, mActualRemoteControlClient);\n\nmActualMetadataEditor.setPlaybackState(PlaybackStateCompat.STATE_PLAYING);\nmActualMetadataEditor.setTransportControlFlags(PlaybackStateCompat.FLAG_PLAY_PAUSE);\n\nif (mActualRemoteControlClient != null) {\n    mActualRemoteControlClient.removeFromMediaRouter();\n    mActualRemoteControlClient.addToMediaRouter();\n}\n\n```"
    },
    {
        "Example": 98,
        "Generated Java Code": "```java\nimport android.util.Log;\n\nimport com.parrot.arsdk.arcontroller.ARCONTROLLER_DEVICE_STATE_ENUM;\nimport com.parrot.arsdk.arcontroller.ARControllerCodec;\nimport com.parrot.arsdk.arcontroller.ARControllerException;\nimport com.parrot.arsdk.arcontroller.ARControllerState;\nimport com.parrot.arsdk.arcontroller.ARFeatureARDrone3;\nimport com.parrot.arsdk.arcontroller.ARFeatureCommon;\nimport com.parrot.arsdk.arcontroller.ARFeatureSkyCtrl;\nimport com.parrot.arsdk.arcontroller.ARFrame;\nimport com.parrot.arsdk.arcontroller.command.ARCommand;\nimport com.parrot.arsdk.arcontroller.command.ARCommandJSONDeserializer;\nimport com.parrot.arsdk.arcontroller.command.ARControllerCommand;\nimport com.parrot.arsdk.arcontroller.command.ARDrone3PilotingCommand;\nimport com.parrot.arsdk.arcontroller.command.ARFeatureARDrone3PilotingCommand;\nimport com.parrot.arsdk.arcontroller.command.ARFeatureSkyCtrlCommand;\nimport com.parrot.arsdk.arcontroller.configuration.ARConfiguration;\nimport com.parrot.arsdk.arcontroller.configuration.ARConfigurationDecoder;\nimport com.parrot.arsdk.arcontroller.configuration.ARControllerConfiguration;\nimport com.parrot.arsdk.arcontroller.configuration.ARFeatureARDrone3Configuration;\nimport com.parrot.arsdk.arcontroller.configuration.ARFeatureARDrone3PilotingConfiguration;\nimport com.parrot.arsdk.arcontroller.configuration.ARFeatureSkyCtrlConfiguration;\nimport com.parrot.arsdk.arcontroller.decoder.ARControllerDecoder;\nimport com.parrot.arsdk.arcontroller.decoder.ARFrameDecoder;\nimport com.parrot.arsdk.arcontroller.stream.ARStreamReader;\nimport com.parrot.arsdk.arsal.ARSALPrint;\nimport com.parrot.arsdk.arsal.ARSALThread;\n\npublic class JavaDrone extends ARSALThread implements ARStreamReader.ARStreamReaderListener, ARControllerListener\n{\n    private static final String TAG = JavaDrone.class.getSimpleName();\n\n    /**\n     * {@link ARControllerListener} interface implementation\n     *\n     * @see ARControllerListener\n     */\n    public interface ARControllerListener\n    {\n        /**\n         * Called when the controller state changes\n         *\n         * @param state   the new state\n         * @param reason  the reason for the change\n         */\n        void onControllerStateChanged(ARCONTROLLER_DEVICE_STATE_ENUM state, ARCONTROLLER_DEVICE_STATE_REASON_ENUM reason);\n\n        /**\n         * Called when the battery level changes\n         *\n         * @param batteryLevel the battery level\n         */\n        void onBatteryLevelChanged(int batteryLevel);\n\n        /**\n         * Called when an error message occurs\n         *\n         * @param errorMessage the error message\n         */\n        void onErrorMessage(String errorMessage);\n\n        /**\n         * Called when a configuration is received\n         *\n         * @param config the configuration received\n         */\n        void onReceivedConfiguration(ARControllerConfiguration config);\n\n        /**\n         * Called when ARFrames are received\n         *\n         * @param frame the frame received\n         */\n        void onFrameReceived(ARFrame frame);\n    }\n\n    private GeneralMotorCon ourInstance = null;\n\n\n    /**\n     * Absolute control mode\n     */\n    private static final int ABSOLUTE_CONTROL_MODE = 0;\n\n    /**\n     * Relative control mode\n     */\n    private static final int RELATIVE_CONTROL_MODE = 1;\n\n    /**\n     * Control mode. Defaults to absolute control mode.\n     */\n    private int controlMode = ABSOLUTE_CONTROL_MODE;\n\n    /**\n     * A flag to indicate that the drone is connected\n     */\n    private boolean isConnected = false;\n\n    /**\n     * A flag to indicate that the drone is landed\n     */\n    private boolean isLanded = true;\n\n    /**\n     * A flag to indicate that the drone is flying\n     */\n    private boolean isFlying = false;\n\n    /**\n     * A flag to indicate that the thread is stopped\n     */\n    private boolean isStopped;\n\n    /**\n     * The ARDrone\n     */\n    private ARDrone drone;\n\n    /**\n     * The command manager\n     */\n    private CommandManager cmd;\n\n    /**\n     * The ARController\n     */\n    private ARControllerCodec arController;\n\n    /**\n     * The ARController state\n     */\n    private ARControllerState controllerState;\n\n    /**\n     * The battery level\n     */\n    private int batLvl = 0;\n\n    /**\n     * The spin speed\n     */\n    private int spinSpeed = 40;\n\n    /**\n     * The spin90 speed\n     */\n    private int spin90Speed = 60;\n\n    /**\n     * The spin time\n     */\n    private int spinTime = 300;\n\n    /**\n     * The spin90 time\n     */\n    private int spin90Time = 900;\n\n    /**\n     * The hover time\n     */\n    private int hoverTime = 500;\n\n    /**\n     * The forward speed\n     */\n    private int speed = 100;\n\n    /**\n     * The thread timer\n     */\n    private long threadTimer = 0;\n\n    public void run()\n    {\n        super.run();\n        while (!isStopped)\n        {\n            try\n            {\n                // Get the data from the drone\n                ARFrame frame = arController.getFrame(0);\n\n                if(frame.isValid() && ARControllerState.ARCONTROLLER_DEVICE_STATE_RUNNING == controllerState.getState())\n                {\n                    // Update the UI\n                    ourInstance.updateGUI();\n                }\n\n                Thread.sleep(20);\n            }\n            catch (Exception ignored)\n            {\n            }\n        }\n    }\n\n    public void stop()\n    {\n        isStopped = true;\n    }\n\n    public void setDrone(ARDrone drone)\n    {\n        this.drone = drone;\n    }\n\n    public void takeoff()\n    {\n        cmd.takeoff();\n    }\n\n    public void land()\n    {\n        cmd.land();\n    }\n\n    public void forward()\n    {\n        cmd.forward(speed);\n    }\n\n    public void backward()\n    {\n        cmd.backward(speed);\n    }\n\n    public void right()\n    {\n        cmd.right(spinSpeed);\n    }\n\n    public void left()\n    {\n        cmd.left(spinSpeed);\n    }\n\n    public void raiseAltitude()\n    {\n        cmd.raiseAltitude();\n    }\n\n    public void lowerAltitude()\n    {\n        cmd.lowerAltitude();\n    }\n\n    public void spinLeft()\n    {\n        cmd.spinLeft(spinSpeed);\n    }\n\n    public void spinRight()\n    {\n        cmd.spinRight(spinSpeed);\n    }\n\n    public void spin90Left()\n    {\n        cmd.spinLeft(spin90Speed);\n        waitFor(spin90Time);\n        cmd.flatTrim();\n    }\n\n    public void spin90Right()\n    {\n        cmd.spinRight(spin90Speed);\n        waitFor(spin90Time);\n        cmd.flatTrim();\n    }\n\n    public void onStop()\n    {\n        try\n        {\n            arController.dispose();\n        }\n        catch (Exception e)\n        {\n            Log.e(TAG, \"Error while stopping: \" + e.getMessage());\n        }\n    }\n\n    public void waitFor(int time)\n    {\n        long start = threadTimer;\n\n        while(threadTimer - start < time)\n        {\n            try\n            {\n                Thread.sleep(10);\n            }\n            catch (InterruptedException e)\n            {\n                Log.d(TAG, e.getMessage());\n            }\n        }\n    }\n\n    public void onControllerStateChanged(ARCONTROLLER_DEVICE_STATE_ENUM state, ARCONTROLLER_DEVICE_STATE_REASON_ENUM reason)\n    {\n        switch (state)\n        {\n            case ARCONTROLLER_DEVICE_STATE_RUNNING:\n                isFlying = true;\n                isLanded = false;\n                isConnected = true;\n                break;\n            case ARCONTROLLER_DEVICE_STATE_STOPPED:\n                isFlying = false;\n                isLanded = true;\n                isConnected = false;\n                break;\n            case ARCONTROLLER_DEVICE_STATE_INIT:\n            case ARCONTROLLER_DEVICE_STATE_DISCONNECTING:\n            case ARCONTROLLER_DEVICE_STATE_CONNECTING:\n            case ARCONTROLLER_DEVICE_STATE_UNKNOWN:\n            default:\n                isFlying = false;\n                isLanded = false;\n                isConnected = false;\n                "
    },
    {
        "Example": 99,
        "Generated Java Code": "```java  \n\nimport com.google.cloud.scheduler.v1.GroupConfiguration;\nimport java.util.Map;\n\npublic class BuildGroupConfigurationSnippets {\n\n  static GroupConfiguration buildConfiguration() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    GroupConfiguration.Builder groupConfig =\n        GroupConfiguration.newBuilder()\n            .setProject(projectId)\n            .setLocation(locationId)\n            .setMetadata(Map.of(\"1\", \"abc\", \"2\", \"def\"));\n    return groupConfig.build();\n  }\n\n  static GroupConfiguration buildConfigurationMetadata() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    GroupConfiguration.Builder groupConfig =\n        GroupConfiguration.newBuilder()\n            .setProject(projectId)\n            .setLocation(locationId)\n            .setMetadata(Map.of(\"1\", \"abc\", \"2\", \"def\", \"3\", \"ghi\"));\n    return groupConfig.build();\n  }\n\n  static GroupConfiguration buildConfigurationMaxEntities() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    GroupConfiguration.Builder groupConfig =\n        GroupConfiguration.newBuilder()\n            .setProject(projectId)\n            .setLocation(locationId)\n            .setMaxEntities(2);\n    return groupConfig.build();\n  }\n\n  static GroupConfiguration buildConfigurationMinEntities() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    GroupConfiguration.Builder groupConfig =\n        GroupConfiguration.newBuilder()\n            .setProject(projectId)\n            .setLocation(locationId)\n            .setMinEntities(3);\n    return groupConfig.build();\n  }\n\n  static GroupConfiguration buildConfigurationName() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    String name = \"sample-group-configuration\";\n    GroupConfiguration.Builder groupConfig =\n        GroupConfiguration.newBuilder()\n            .setProject(projectId)\n            .setLocation(locationId)\n            .setName(name);\n    return groupConfig.build();\n  }\n\n  static GroupConfiguration buildConfigurationCooldown() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    long cooldown = 15;\n    GroupConfiguration.Builder groupConfig =\n        GroupConfiguration.newBuilder()\n            .setProject(projectId)\n            .setLocation(locationId)\n            .setCooldown(cooldown);\n    return groupConfig.build();\n  }\n\n  static GroupConfiguration buildConfigurationFromGroupConfiguration() {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"your-project-id\";\n    String locationId = \"us-central1\";\n    // Build a GroupConfiguration object.\n    GroupConfiguration groupConfig = buildConfiguration();\n    // Convert GroupConfiguration object into a builder.\n    GroupConfiguration.Builder groupConfigBuilder = groupConfig.toBuilder();\n    // Build a new GroupConfiguration object with a different project and location.\n    GroupConfiguration changedConfig =\n        groupConfigBuilder.setProject(projectId).setLocation(locationId).build();\n    return changedConfig;\n  }\n}  \n```"
    },
    {
        "Example": 100,
        "Generated Java Code": "```java\nimport net.sf.marineapi.nmea.parser.RMCParser;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\npublic class RMCParserTest {\n\n    private RMCParser rmc;\n\n    @Before\n    public void setUp() {\n        rmc = new RMCParser();\n    }\n\n    @Test\n    public void testConstructor() {\n        assertNotNull(rmc);\n    }\n\n    @Test\n    public void testGetTime() {\n        rmc.setTime(123456789);\n        assertEquals(123456789, rmc.getTime());\n    }\n\n    @Test\n    public void testSetTime() {\n        rmc.setTime(123456789);\n        assertEquals(123456789, rmc.getTime());\n    }\n\n    @Test\n    public void testGetDate() {\n        rmc.setDate(123456);\n        assertEquals(123456, rmc.getDate());\n    }\n\n    @Test\n    public void testSetDate() {\n        rmc.setDate(123456);\n        assertEquals(123456, rmc.getDate());\n    }\n\n    @Test\n    public void testGetYear() {\n        rmc.setYear(2000);\n        assertEquals(2000, rmc.getYear());\n    }\n\n    @Test\n    public void testSetYear() {\n        rmc.setYear(2000);\n        assertEquals(2000, rmc.getYear());\n    }\n\n    @Test\n    public void testGetMonth() {\n        rmc.setMonth(1);\n        assertEquals(1, rmc.getMonth());\n    }\n\n    @Test\n    public void testSetMonth() {\n        rmc.setMonth(1);\n        assertEquals(1, rmc.getMonth());\n    }\n\n    @Test\n    public void testGetDay() {\n        rmc.setDay(1);\n        assertEquals(1, rmc.getDay());\n    }\n\n    @Test\n    public void testSetDay() {\n        rmc.setDay(1);\n        assertEquals(1, rmc.getDay());\n    }\n\n    @Test\n    public void testGetSpeed() {\n        rmc.setSpeed(12.34);\n        assertEquals(12.34, rmc.getSpeed(), 0.001);\n    }\n\n    @Test\n    public void testSetSpeed() {\n        rmc.setSpeed(12.34);\n        assertEquals(12.34, rmc.getSpeed(), 0.001);\n    }\n\n    @Test\n    public void testGetCourse() {\n        rmc.setCourse(123.45);\n        assertEquals(123.45, rmc.getCourse(), 0.001);\n    }\n\n    @Test\n    public void testSetCourse() {\n        rmc.setCourse(123.45);\n        assertEquals(123.45, rmc.getCourse(), 0.001);\n    }\n\n    @Test\n    public void testGetDataStatus() {\n        rmc.setDataStatus('A');\n        assertEquals('A', rmc.getDataStatus());\n    }\n\n    @Test\n    public void testSetDataStatus() {\n        rmc.setDataStatus('A');\n        assertEquals('A', rmc.getDataStatus());\n    }\n\n    @Test\n    public void testGetPosition() {\n        rmc.setPosition(\"-122.41942,-37.82719\");\n        assertEquals(\"-122.41942,-37.82719\", rmc.getPosition());\n    }\n\n    @Test\n    public void testSetPosition() {\n        rmc.setPosition(\"-122.41942,-37.82719\");\n        assertEquals(\"-122.41942,-37.82719\", rmc.getPosition());\n    }\n\n    @Test\n    public void testGetMagneticVariation() {\n        rmc.setMagneticVariation(12.34);\n        assertEquals(12.34, rmc.getMagneticVariation(), 0.001);\n    }\n\n    @Test\n    public void testSetMagneticVariation() {\n        rmc.setMagneticVariation(12.34);\n        assertEquals(12.34, rmc.getMagneticVariation(), 0.001);\n    }\n\n    @Test\n    public void testGetFaaMode() {\n        rmc.setFaaMode('A');\n        assertEquals('A', rmc.getFaaMode());\n    }\n\n    @Test\n    public void testSetFaaMode() {\n        rmc.setFaaMode('A');\n        assertEquals('A', rmc.getFaaMode());\n    }\n\n    @Test\n    public void testSetFaaModeWhenOmitted() {\n        assertEquals('N', rmc.getFaaMode());\n    }\n\n    @Test\n    public void testSetDirectionOfVariationWithInvalidDirection() {\n        rmc.setDirectionOfVariation('X', 12.34);\n        assertEquals(12.34, rmc.getMagneticVariation(), 0.001);\n        assertEquals('W', rmc.getDirectionOfVariation());\n    }\n\n    @Test\n    public void testGetCorrectedCourse() {\n        rmc.setCourse(123.45);\n        rmc.setMagneticVariation(12.34);\n        rmc.setDirectionOfVariation('W');\n        assertEquals(111.11, rmc.getCorrectedCourse(), 0.001);\n    }\n\n    @Test\n    public void testSetDirectionOfVariation() {\n        rmc.setDirectionOfVariation('E', 12.34);\n        assertEquals(12.34, rmc.getMagneticVariation(), 0.001);\n        assertEquals('E', rmc.getDirectionOfVariation());\n    }\n\n    @Test\n    public void testGetDirectionOfVariation() {\n        rmc.setDirectionOfVariation('E', 12.34);\n        assertEquals('E', rmc.getDirectionOfVariation());\n    }\n\n}\n```"
    },
    {
        "Example": 101,
        "Generated Java Code": "```java\nimport com.google.common.base.Strings;\nimport java.util.HashSet;\nimport java.util.Set;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.owasp.html.PolicyFactory;\nimport org.owasp.html.Sanitizers;\n\nclass JavascriptCleanup {\n\n  private static PolicyFactory policyFactory = Sanitizers.FORMATTING.and(Sanitizers.LINKS);\n\n  private static final Set<String> IGNORED_INPUTS = new HashSet<>();\n  static {\n    IGNORED_INPUTS.add(\"javascript\");\n  }\n\n  static String getCleanerInput(String input) {\n    if (Strings.isNullOrEmpty(input)) {\n      return null;\n    }\n    // Assume default policy is acceptable for internal uses.\n    return policyFactory.relaxed().sanitize(input);\n  }\n\n  static String getCleanInput(String input) {\n    if (input == null) {\n      return null;\n    }\n    for (String ignored : IGNORED_INPUTS) {\n      if (input.contains(ignored)) {\n        return null;\n      }\n    }\n\n    input = StringEscapeUtils.escapeHtml4(input);\n\n    return input;\n  }\n}\n```"
    },
    {
        "Example": 102,
        "Generated Java Code": "```java\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for WsseType complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType name=\"WsseType\">\n *   &lt;complexContent>\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *       &lt;attribute name=\"identifier\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *       &lt;attribute name=\"wsseValueType\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *       &lt;attribute name=\"useKeyIdentifier\" type=\"{http://www.w3.org/2001/XMLSchema}boolean\" />\n *       &lt;attribute name=\"useDirectReference\" type=\"{http://www.w3.org/2001/XMLSchema}boolean\" />\n *       &lt;attribute name=\"wsse11TokenType\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *     &lt;/restriction>\n *   &lt;/complexContent>\n * &lt;/complexType>\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"WsseType\")\npublic class WsseType {\n\n    @XmlAttribute(name = \"identifier\")\n    protected String identifier;\n    @XmlAttribute(name = \"wsseValueType\")\n    protected String wsseValueType;\n    @XmlAttribute(name = \"useKeyIdentifier\")\n    protected Boolean useKeyIdentifier;\n    @XmlAttribute(name = \"useDirectReference\")\n    protected Boolean useDirectReference;\n    @XmlAttribute(name = \"wsse11TokenType\")\n    protected String wsse11TokenType;\n\n    /**\n     * Gets the value of the identifier property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getIdentifier() {\n        return identifier;\n    }\n\n    /**\n     * Sets the value of the identifier property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setIdentifier(String value) {\n        this.identifier = value;\n    }\n\n    /**\n     * Gets the value of the wsseValueType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getWsseValueType() {\n        return wsseValueType;\n    }\n\n    /**\n     * Sets the value of the wsseValueType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setWsseValueType(String value) {\n        this.wsseValueType = value;\n    }\n\n    /**\n     * Gets the value of the useKeyIdentifier property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n    public Boolean isUseKeyIdentifier() {\n        return useKeyIdentifier;\n    }\n\n    /**\n     * Sets the value of the useKeyIdentifier property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n    public void setUseKeyIdentifier(Boolean value) {\n        this.useKeyIdentifier = value;\n    }\n\n    /**\n     * Gets the value of the useDirectReference property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n    public Boolean isUseDirectReference() {\n        return useDirectReference;\n    }\n\n    /**\n     * Sets the value of the useDirectReference property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n    public void setUseDirectReference(Boolean value) {\n        this.useDirectReference = value;\n    }\n\n    /**\n     * Gets the value of the wsse11TokenType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getWsse11TokenType() {\n        return wsse11TokenType;\n    }\n\n    /**\n     * Sets the value of the wsse11TokenType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setWsse11TokenType(String value) {\n        this.wsse11TokenType = value;\n    }\n\n}\n```"
    },
    {
        "Example": 103,
        "Generated Java Code": "```java\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.room.ColumnInfo;\nimport androidx.room.Entity;\nimport androidx.room.PrimaryKey;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonElement;\nimport com.google.gson.annotations.Expose;\nimport com.google.gson.annotations.SerializedName;\nimport com.google.gson.internal.$Gson$Types;\nimport com.google.gson.reflect.TypeToken;\n\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n@Entity(tableName = \"tweets\")\npublic class Tweet {\n\n    @PrimaryKey\n    @NonNull\n    @ColumnInfo(name = \"id\")\n    @Expose\n    private String id;\n\n    @ColumnInfo(name = \"user_id\")\n    @Expose\n    private String userId;\n\n    @ColumnInfo(name = \"text\")\n    @Expose\n    private String text;\n\n    @ColumnInfo(name = \"user_name\")\n    @Expose\n    private String userName;\n\n    @ColumnInfo(name = \"screen_name\")\n    @Expose\n    private String screenName;\n\n    @ColumnInfo(name = \"image\")\n    @Expose\n    private String image;\n\n    @ColumnInfo(name = \"lat\")\n    @Expose\n    private double lat;\n\n    @ColumnInfo(name = \"lng\")\n    @Expose\n    private double lng;\n\n    @ColumnInfo(name = \"place_name\")\n    @Expose\n    private String placeName;\n\n    @ColumnInfo(name = \"extras\")\n    @Expose\n    private Map<String, String> extras;\n\n    @ColumnInfo(name = \"created_at\")\n    @Expose\n    private Date createdAt;\n\n    @ColumnInfo(name = \"loc_radius\")\n    @Expose\n    private int locRadius;\n\n    public Tweet() {\n        this.id = UUID.randomUUID().toString();\n    }\n\n    @NonNull\n    public String getId() {\n        return id;\n    }\n\n    public void setId(@NonNull String id) {\n        this.id = id;\n    }\n\n    @Nullable\n    public String getUserId() {\n        return userId;\n    }\n\n    public void setUserId(@Nullable String userId) {\n        this.userId = userId;\n    }\n\n    @Nullable\n    public String getText() {\n        return text;\n    }\n\n    public void setText(@Nullable String text) {\n        this.text = text;\n    }\n\n    @Nullable\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(@Nullable String userName) {\n        this.userName = userName;\n    }\n\n    @Nullable\n    public String getScreenName() {\n        return screenName;\n    }\n\n    public void setScreenName(@Nullable String screenName) {\n        this.screenName = screenName;\n    }\n\n    @Nullable\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(@Nullable String image) {\n        this.image = image;\n    }\n\n    public double getLat() {\n        return lat;\n    }\n\n    public void setLat(double lat) {\n        this.lat = lat;\n    }\n\n    public double getLng() {\n        return lng;\n    }\n\n    public void setLng(double lng) {\n        this.lng = lng;\n    }\n\n    @Nullable\n    public String getPlaceName() {\n        return placeName;\n    }\n\n    public void setPlaceName(@Nullable String placeName) {\n        this.placeName = placeName;\n    }\n\n    @Nullable\n    public Map<String, String> getExtras() {\n        return extras;\n    }\n\n    public void setExtras(@Nullable Map<String, String> extras) {\n        this.extras = extras;\n    }\n\n    @Nullable\n    public Date getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setCreatedAt(@Nullable Date createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    public int getLocRadius() {\n        return locRadius;\n    }\n\n    public void setLocRadius(int locRadius) {\n        this.locRadius = locRadius;\n    }\n\n    public static class Builder {\n\n        private double lat;\n        private String idStr;\n        private String screen_name;\n        private String place_name;\n        private String image;\n        private String user_name;\n        private double lng;\n        private Date created_at;\n        private int loc_radius;\n        private String user_id;\n        private String text;\n        private ArrayList<String> extras = new ArrayList<String>();\n\n        public Builder setIDstr(String idStr) {\n            this.idStr = idStr;\n            return this;\n        }\n\n        public Builder setPlaceName(String place_name) {\n            this.place_name = place_name;\n            return this;\n        }\n\n        public Builder addText(String text) {\n            this.extras.add(\"text\");\n            return this;\n        }\n\n        public Builder addField(String name) {\n            this.extras.add(name);\n            return this;\n        }\n\n        public void insert() {\n            Tweet tweet = new Tweet();\n            tweet.setId(idStr);\n            tweet.setPlaceName(place_name);\n            tweet.setText(text);\n            tweet.setExtras(convertExtras(extras));\n\n            //todo persist to DB\n            this.extras.clear();\n        }\n\n        public Builder setCoordinateRadius(int loc_radius) {\n            this.loc_radius = loc_radius;\n            return this;\n        }\n\n        public Builder setAuthor(String user_name) {\n            this.user_name = user_name;\n            return this;\n        }\n\n        public Builder builder() {\n            return this;\n        }\n\n        public Builder setCoordinate(double lat, double lng) {\n            this.lat = lat;\n            this.lng = lng;\n            return this;\n        }\n\n        public Builder setCreatedTime(Date created_at) {\n            this.created_at = created_at;\n            return this;\n        }\n\n        public void persist() {\n            insert();\n        }\n\n        public String buildFieldJSON(String name, String field) {\n            return \"\\\"\" + name + \"\\\": \\\"\" + field + \"\\\"\";\n        }\n\n        public Builder setImage(String image) {\n            this.image = image;\n            return this;\n        }\n\n        private Map<String, String> convertExtras(ArrayList<String> ex) {\n            Gson gson = new GsonBuilder().create();\n\n            Type listType = new TypeToken<List<String>>() {\n            }.getType();\n            String json = gson.toJson(ex, listType);\n\n            return gson.fromJson(json, Map.class);\n        }\n    }\n}\n```"
    },
    {
        "Example": 104,
        "Generated Java Code": "```java  \nimport com.google.cloud.datacatalog.v1.DataCatalogClient;\nimport com.google.cloud.datacatalog.v1.ListResourcesRequest;\nimport com.google.cloud.datacatalog.v1.LocationName;\nimport com.google.cloud.datacatalog.v1.Resource;\nimport java.io.ObjectStreamException;\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n// Sample to get resources\npublic class AllResources {\n\n  private static final Logger LOG = Logger.getLogger(AllResources.class.getName());\n\n  public static void main(String[] args) throws Exception {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"MY_PROJECT_ID\";\n    LocationName locationName = LocationName.of(projectId, \"MY_LOCATION\");\n    allResources(locationName);\n  }\n\n  public static void allResources(LocationName locationName) {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (DataCatalogClient client = DataCatalogClient.create()) {\n      ListResourcesRequest request =\n          ListResourcesRequest.newBuilder().setParent(locationName.toString()).build();\n      Iterator<Resource> resources = client.listResources(request).iterateAll();\n\n      // Iterate over all resources.\n      new HashMap();\n      Map<Object, Object> bag = new HashMap<>();\n      while (resources.hasNext()) {\n        Resource resource = resources.next();\n        String name = resource.getName();\n        String type = resource.getType();\n        LOG.log(Level.INFO, \"Resource {0} has type {1}\", new Object[] {name, type});\n        LOG.log(Level.INFO, \"Lineage: {0}\", resource.getLineage());\n        LOG.log(Level.INFO, \"Schemas: {0}\", resource.getSchema());\n        // Uncomment below to print all properties\n        // LOG.log(Level.INFO, \"Properties: {0}\", resource.getPropertiesMap());\n        loadProperties(resource.getPropertiesMap(), bag);\n        Collections.<String, String>emptyMap();\n        setResources(Collections.emptyMap(), bag);\n      }\n    } catch (IOException e) {\n      LOG.log(Level.SEVERE, \"DataCatalogClient.listResources threw an IOException\", e);\n    }\n  }\n\n  // The following properties are directly within the properties of the resource (not nested).\n  // They are expected to be String values.\n  private static final List<String> DIRECT_PROPERTIES =\n      List.of(\n          \"auth_enabled\",\n          \"description\",\n          \"display_name\",\n          \"gcs_fileset_spec_file_patterns\",\n          \"gcs_fileset_spec_sample_gcs_file_names\",\n          \"gcs_fileset_spec_file_size_bytes\",\n          \"hbase_table_spec_column_families\",\n          \"hbase_table_spec_rowkey_column_spec_columns\",\n          \"hive_metastore_database_spec_database_size_bytes\",\n          \"hive_metastore_database_spec_table_count\",\n          \"hive_metastore_partition_spec_partition_count\",\n          \"hive_metastore_table_spec_column_count\",\n          \"hive_metastore_table_spec_data_size_bytes\",\n          \"hive_metastore_table_spec_row_count\",\n          \"hostname\",\n          \"ip_address\",\n          \"language\",\n          \"location\",\n          \"os_build\",\n          \"os_name\",\n          \"os_version\",\n          \"project_id\",\n          \"schema_spec_columns\",\n          \"update_time\",\n          \"version\",\n          \"zone\");\n\n  // The properties are within nested properties of the form,\n  // properties.{nested_property}.{property}.\n  // They are expected to be List<String> values.\n  private static final List<String> NESTED_PROPERTIES =\n      List.of(\"labels\", \"policy_tags\", \"usage\");\n\n  // The properties are within nested properties of the form,\n  // properties.{nested_property}.{nested_property}.{property}.\n  private static final List<String> DOUBLY_NESTED_PROPERTIES =\n      List.of(\"bigquery_dataset_spec\", \"bigquery_table_spec\");\n\n  // Private method to recursively load properties from a Resource object.\n  private static void loadProperties(\n      Map<String, String> properties, Map<Object, Object> bag) {\n    // Load the map with the direct properties\n    DIRECT_PROPERTIES.forEach(property -> bag.put(property, properties.get(property)));\n\n    // Now check for properties within a nested properties map\n    if (properties.containsKey(\"nested_properties\")) {\n      Map<String, String> nestedProperties = properties.get(\"nested_properties\");\n      NESTED_PROPERTIES.forEach(property -> bag.put(property, getNestedProperty(property, bag)));\n    }\n\n    // Now check for properties within a doubly nested properties map\n    if (properties.containsKey(\"doubly_nested_properties\")) {\n      Map<String, String> doublyNestedProperties = properties.get(\"doubly_nested_properties\");\n      DOUBLY_NESTED_PROPERTIES.forEach(property -> bag.put(property, getDoublyNestedProperty(\n          property, bag)));\n    }\n  }\n\n  // Private method to recursively get a nested property of a Resource object.\n  private static String getNestedProperty(String property, Map<Object, Object> bag) {\n    return (String) bag.get(\"nested_properties.\" + property);\n  }\n\n  // Private method to recursively get a doubly nested property of a Resource object.\n  private static String getDoublyNestedProperty(String property, Map<Object, Object> bag) {\n    return (String) bag.get(\"doubly_nested_properties.\" + property);\n  }\n\n  /**\n   * Java Serialization is a language-specific mechanism by which an object can be serialized into a\n   * sequence of bytes. A class implements the Serializable interface to indicate it is serializable.\n   * As of version 1.4 of the Java platform the object can also implement {@link\n   * java.io.Externalizable} and override methods like writeExternal and readExternal to specify\n   * a custom serialization mechanism. DataCatalog's Resource is serializable. However, since we\n   * have implemented {@link java.io.Externalizable} we need to implement {@link #readExternal} and\n   * {@link #writeExternal}. In these methods, we need to manually serialize and deserialize each\n   * member field in the object.\n   */\n  public static class ResourceContainer implements Externalizable, Serializable {\n\n    private Resource resource;\n\n    /**\n     * Default constructor is needed by the serialization/deserialization process. It should always\n     * remain present, and generally it should avoid initializing non-transient fields. In this case,\n     * we don't need to initialize any non-transient fields of our own, so just calling super() is\n     * enough.\n     */\n    public ResourceContainer() {\n      super();\n    }\n\n    // Constructor for when a Resource is being set on a ResourceContainer object.\n    public ResourceContainer(Resource resource) throws IOException {\n      this.resource = resource;\n    }\n\n    // No-op get method for data consistency.\n    Resource get() {\n      return resource;\n    }\n\n    // No-op set method for data consistency.\n    void set(Resource resource) {\n      this.resource = resource;\n    }\n\n    /**\n     * The writeExternal method writes the state of this object to the stream for persistence. This\n     * method first performs the default serialization to save the non-transient fields of the object.\n     * Then it saves the transient fields, one by one.\n     *\n     * @param oos - output stream to write the object to.\n     */\n    @Override\n    public void writeExternal(ObjectOutput oos) throws IOException {\n      oos.writeObject(resource.getName());\n      oos.writeObject(resource.getDescription());\n      oos.writeObject(resource.getType());\n      oos.writeObject(resource.getLinkedResource());\n      oos.writeObject(resource.getPropertiesMap());\n      oos.writeObject(resource.getLabelsMap());\n      oos.writeObject(resource.getSchema());\n      oos.writeObject(resource.getDisplayNamesList());\n      oos.writeObject(resource.getDataplexSpecsList());\n      oos.writeObject(resource.getLinkedResource());\n      oos.writeObject(resource.getLineage().getProducersList());\n      oos.writeObject"
    },
    {
        "Example": 105,
        "Generated Java Code": "```java\nimport static java.util.Arrays.asList;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class SettingsTest {\n\n    @Mock Properties properties;\n    @Mock Logger logger;\n\n    private Settings settings;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        settings = new Settings(properties, logger);\n    }\n\n    @Test\n    public void should_return_false_when_no_overrides_are_present() {\n        assertFalse(settings.hasOverride(\"foo\"));\n    }\n\n    @Test\n    public void should_override_a_property() {\n        settings.overrideSetting(\"foo\", \"bar\");\n        when(properties.get(\"foo\")).thenReturn(\"bar\");\n        assertEquals(\"bar\", settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_override_a_property_from_map() {\n        Map<String, String> overrides = mock(Map.class);\n        when(overrides.get(\"foo\")).thenReturn(\"bar\");\n        settings.overrideSettings(overrides);\n        when(properties.get(\"foo\")).thenReturn(\"bar\");\n        assertEquals(\"bar\", settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_remove_overrides() {\n        settings.overrideSetting(\"foo\", \"bar\");\n        settings.removeSetting(\"foo\");\n        assertNull(settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_not_save_properties_unless_overrides_are_present() {\n        settings.saveSettings();\n        verify(properties, never()).store(any(), any());\n    }\n\n    @Test\n    public void should_save_properties_when_overrides_are_present() {\n        settings.overrideSetting(\"foo\", \"bar\");\n        settings.saveSettings();\n        verify(properties).store(any(), any());\n    }\n\n    @Test\n    public void should_merges_overrides() {\n        settings.overrideSetting(\"foo\", \"bar\");\n        settings.merge(asList(\"a\", \"b\", \"c\"));\n        assertEquals(asList(\"a\", \"b\", \"c\", \"foo\"), settings.getAllKeys());\n    }\n\n    @Test\n    public void should_remove_overrides() {\n        settings.overrideSetting(\"foo\", \"bar\");\n        settings.removeSettings(asList(\"foo\"));\n        assertNull(settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_reload_properties() {\n        settings.overrideSetting(\"foo\", \"bar\");\n        settings.reload();\n        assertNull(settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_return_null_for_unknown_property() {\n        assertNull(settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_return_integer_property() {\n        when(properties.getProperty(\"foo\", \"3\")).thenReturn(\"4\");\n        assertEquals(4, settings.getInteger(\"foo\", 3));\n    }\n\n    @Test\n    public void should_return_string_property() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"bar\");\n        assertEquals(\"bar\", settings.getString(\"foo\"));\n    }\n\n    @Test\n    public void should_return_empty_map_for_unknown_settings() {\n        assertTrue(settings.getMap(\"foo\").isEmpty());\n    }\n\n    @Test\n    public void should_return_list_of_strings() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"one,two,three\");\n        assertEquals(asList(\"one\", \"two\", \"three\"), settings.getStrings(\"foo\"));\n    }\n\n    @Test\n    public void should_return_filesize_in_bytes() {\n        assertEquals(1024, settings.getFilesize(\"foo\", 1024));\n    }\n\n    @Test\n    public void should_log_settings_changes() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"bar\");\n        settings.getString(\"foo\");\n        verify(logger).debug(\"Reading setting foo=bar\");\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void should_throw_on_getting_unknown_required_property() {\n        settings.getRequiredString(\"foo\");\n    }\n\n    @Test\n    public void should_return_long_property() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"42\");\n        assertEquals(42L, settings.getLong(\"foo\", 0L));\n    }\n\n    @Test\n    public void should_return_char_property() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"a\");\n        assertEquals('a', settings.getChar(\"foo\", 'z'));\n    }\n\n    @Test\n    public void should_return_required_string_property() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"bar\");\n        assertEquals(\"bar\", settings.getRequiredString(\"foo\"));\n    }\n\n    @Test\n    public void should_return_all_keys() {\n        when(properties.stringPropertyNames()).thenReturn(new java.util.HashSet<String>(asList(\"foo\", \"bar\")));\n        assertEquals(asList(\"foo\", \"bar\"), settings.getAllKeys());\n    }\n\n    @Test\n    public void should_return_boolean_property() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"true\");\n        assertTrue(settings.getBoolean(\"foo\", false));\n    }\n\n    @Test\n    public void should_return_list_of_integers() {\n        when(properties.getProperty(\"foo\")).thenReturn(\"1,2,3\");\n        assertEquals(asList(1, 2, 3), settings.getIntegers(\"foo\"));\n    }\n\n}\n```"
    },
    {
        "Example": 106,
        "Generated Java Code": "```java\nimport java.util.Map;\n\npublic class ResourceTypeHandlerFinder {\n\n    private final Map<String, ResourceTypeHandler> types;\n\n    public ResourceTypeHandlerFinder(Map<String, ResourceTypeHandler> types) {\n        this.types = types;\n    }\n\n    public ResourceTypeHandler valueOf(String name) {\n        return types.get(name);\n    }\n}\n```"
    },
    {
        "Example": 107,
        "Generated Java Code": "```java\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.mockito.Mockito.*;\n\npublic class DelegateTest {\n\n    private NodeDelegator delegator;\n    private NodeVisitor visitor;\n\n    @Before\n    public void setUp() {\n        visitor = mock(NodeVisitor.class);\n        delegator = new NodeDelegator(visitor);\n    }\n\n    @Test\n    public void shouldCallUnhandledWhenCalledWithNullParameter() {\n        delegator.handle(null);\n        verify(visitor).unhandled();\n    }\n\n    @Test\n    public void shouldCallTestDocumentTypeWhenNodeIsDocumentType() {\n        delegator.handle(new DocumentTypeNode());\n        verify(visitor).testDocumentType();\n    }\n\n    @Test\n    public void shouldCallTestCommentWhenNode isComment() {\n        delegator.handle(new CommentNode());\n        verify(visitor).testComment();\n    }\n\n    @Test\n    public void shouldCallTestNodeWhenNodeIsNode() {\n        delegator.handle(new Node());\n        verify(visitor).testNode();\n    }\n\n    @Test\n    public void shouldCallTestElementWhenNodeIsElement() {\n        delegator.handle(new ElementNode());\n        verify(visitor).testElement();\n    }\n\n    @Test\n    public void shouldCallTestEntityWhenNodeIsEntity() {\n        delegator.handle(new EntityNode());\n        verify(visitor).testEntity();\n    }\n\n    @Test\n    public void shouldCallNoMoreNodesWhenNodeIsNull() {\n        delegator.handle(null);\n        verify(visitor).noMoreNodes();\n    }\n\n    @Test\n    public void shouldCallTestAttributeWhenNodeIsAttribute() {\n        delegator.handle(new AttributeNode());\n        verify(visitor).testAttribute();\n    }\n\n    @Test\n    public void shouldCallTestTextWhenNodeIsText() {\n        delegator.handle(new TextNode());\n        verify(visitor).testText();\n    }\n\n    @Test\n    public void shouldCallTestEntityReferenceWhenNodeIsEntityReference() {\n        delegator.handle(new EntityReferenceNode());\n        verify(visitor).testEntityReference();\n    }\n\n    @Test\n    public void shouldCallTestCDATASectionWhenNodeIsCDATASection() {\n        delegator.handle(new CDATASectionNode());\n        verify(visitor).testCDATASection();\n    }\n\n    @Test\n    public void shouldCallTestProcessingInstructionWhenNodeIsProcessingInstruction() {\n        delegator.handle(new ProcessingInstructionNode());\n        verify(visitor).testProcessingInstruction();\n    }\n}\n```"
    },
    {
        "Example": 108,
        "Generated Java Code": "```java\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class RpcMetrics {\n    private static AtomicInteger active = new AtomicInteger(0);\n    private static AtomicLong total = new AtomicLong(0);\n    private static AtomicLong failed = new AtomicLong(0);\n    private static AtomicLong totalElapsed = new AtomicLong(0);\n    private static AtomicLong failedElapsed = new AtomicLong(0);\n    private static AtomicLong maxElapsed = new AtomicLong(0);\n    private static AtomicLong failedMaxElapsed = new AtomicLong(0);\n    private static AtomicLong succeededMaxElapsed = new AtomicLong(0);\n    private static ConcurrentMap<String, RpcStatus> serviceStatistics = new ConcurrentHashMap<>();\n    private static ConcurrentMap<String, ConcurrentMap<String, RpcStatus>> methodStatistics = new ConcurrentHashMap<>();\n    private static ConcurrentMap<String, Object> values = new ConcurrentHashMap<>();\n\n    public static void beginCount() {\n        active.incrementAndGet();\n    }\n\n    public static void endCount() {\n        active.decrementAndGet();\n    }\n\n    public static int getActive() {\n        return active.get();\n    }\n\n    public static long getTotal() {\n        return total.get();\n    }\n\n    public static long getTotalElapsed() {\n        return totalElapsed.get();\n    }\n\n    public static long getFailed() {\n        return failed.get();\n    }\n\n    public static long getFailedElapsed() {\n        return failedElapsed.get();\n    }\n\n    public static long getFailedMaxElapsed() {\n        return failedMaxElapsed.get();\n    }\n\n    public static long getSucceeded() {\n        return total.get() - failed.get();\n    }\n\n    public static long getSucceededElapsed() {\n        return totalElapsed.get() - failedElapsed.get();\n    }\n\n    public static long getSucceededAverageElapsed() {\n        return totalElapsed.get() == 0 ? 0 : totalElapsed.get() / total.get();\n    }\n\n    public static long getAverageTps() {\n        return active.get() > 0 ? total.get() / active.get() : 0;\n    }\n\n    public static long getMaxElapsed() {\n        return maxElapsed.get();\n    }\n\n    public static long getSucceededMaxElapsed() {\n        return succeededMaxElapsed.get();\n    }\n\n    public static Object get(String key) {\n        return values.get(key);\n    }\n\n    public static void set(String key, Object value) {\n        values.put(key, value);\n    }\n\n    public static RpcStatus getStatus(String service, String method) {\n        return methodStatistics.getOrDefault(service, Collections.emptyMap()).getOrDefault(method, null);\n    }\n\n    public static void removeStatus(String service, String method) {\n        methodStatistics.getOrDefault(service, Collections.emptyMap()).remove(method);\n    }\n\n    protected static void addStatus(RpcStatus status) {\n        total.incrementAndGet();\n        totalElapsed.addAndGet(status.getElapsed());\n        if (status.isFailed()) {\n            failed.incrementAndGet();\n            failedElapsed.addAndGet(status.getElapsed());\n            if (status.getElapsed() > failedMaxElapsed.get()) {\n                failedMaxElapsed.set(status.getElapsed());\n            }\n        } else {\n            if (status.getElapsed() > succeededMaxElapsed.get()) {\n                succeededMaxElapsed.set(status.getElapsed());\n            }\n        }\n        if (status.getElapsed() > maxElapsed.get()) {\n            maxElapsed.set(status.getElapsed());\n        }\n        serviceStatistics.put(status.getService(), status);\n        ConcurrentMap<String, RpcStatus> serviceMethodStatus = methodStatistics.get(status.getService());\n        if (serviceMethodStatus == null) {\n            serviceMethodStatus = new ConcurrentHashMap<>();\n            methodStatistics.put(status.getService(), serviceMethodStatus);\n        }\n        serviceMethodStatus.put(status.getMethod(), status);\n    }\n}\n```"
    },
    {
        "Example": 109,
        "Generated Java Code": ""
    },
    {
        "Example": 110,
        "Generated Java Code": ""
    },
    {
        "Example": 111,
        "Generated Java Code": "```java  \nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.google.cloud.storage.Blob;\nimport com.google.cloud.storage.BlobId;\nimport com.google.cloud.storage.Storage;\nimport com.google.cloud.storage.StorageException;\nimport com.google.cloud.storage.StorageOptions;\n\npublic class DownloadBlob {\n  public static void downloadBlob(\n      String projectId, String bucketName, String objectName, String destFilePath)\n      throws IOException {\n    // The ID of your GCP project\n    // String projectId = \"your-project-id\";\n\n    // The ID of your GCS bucket\n    // String bucketName = \"your-unique-bucket-name\";\n\n    // The ID of your GCS object\n    // String objectName = \"your-object-name\";\n\n    // The path to which the file should be downloaded\n    // String destFilePath = \"/local/path/to/file.txt\";\n\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n    Blob blob = storage.get(BlobId.of(bucketName, objectName));\n    ArrayList<String> parentList =\n        new ArrayList<>(Arrays.asList(destFilePath.split(\"/\")));\n    parentList.remove(parentList.size() - 1);\n    String parentPath = String.join(\"/\", parentList);\n    if (!java.nio.file.Files.exists(java.nio.file.Paths.get(parentPath))) {\n      java.nio.file.Files.createDirectories(java.nio.file.Paths.get(parentPath));\n    }\n    blob.downloadTo(java.nio.file.Paths.get(destFilePath));\n\n    System.out.println(\n        \"Downloaded object \"\n            + objectName\n            + \" from bucket name \"\n            + bucketName\n            + \" to \"\n            + destFilePath);\n  }\n}\n  \n```"
    },
    {
        "Example": 112,
        "Generated Java Code": "```java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Sha256Hash {\n\n  private static final byte[] ZERO_HASH = toBytes(new byte[32]);\n  private final byte[] bytes;\n\n  private Sha256Hash(byte[] bytes) {\n    this.bytes = bytes;\n  }\n\n  public static Sha256Hash createDouble(Sha256Hash left, Sha256Hash right) {\n    byte[] buf = new byte[64];\n    System.arraycopy(left.getBytes(), 0, buf, 0, 32);\n    System.arraycopy(right.bytes, 0, buf, 32, 32);\n    return new Sha256Hash(sha256(buf));\n  }\n\n  public static Sha256Hash create(byte[] bytes) {\n    return new Sha256Hash(sha256(bytes));\n  }\n\n  public static boolean equals(Sha256Hash a, Sha256Hash b) {\n    return a == b\n        || (a != null\n            && b != null\n            && a.bytes.length == b.bytes.length\n            && MessageDigest.isEqual(a.bytes, b.bytes));\n  }\n\n  public static Sha256Hash hashFileContents(String fileName) {\n    try {\n      MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n      java.io.FileInputStream fis = new java.io.FileInputStream(fileName);\n      byte[] ba = new byte[8192];\n      int read = fis.read(ba);\n      while (-1 != read) {\n        digest.update(ba, 0, read);\n        read = fis.read(ba);\n      }\n      fis.close();\n      return new Sha256Hash(digest.digest());\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public BigInteger toBigInteger() {\n    return new BigInteger(1, bytes);\n  }\n\n  @Override\n  public String toString() {\n    return toHex(bytes);\n  }\n\n  public Sha256Hash duplicate() {\n    return new Sha256Hash(bytes);\n  }\n\n  public int compareTo(Sha256Hash other) {\n    return Lexicographic.compare(bytes, other.bytes);\n  }\n\n  public byte[] getBytes() {\n    return bytes;\n  }\n\n  private static byte[] toBytes(BigInteger n) {\n    byte[] bytes = new byte[32];\n    byte[] src = n.toByteArray();\n    System.arraycopy(src, 0, bytes, 32 - src.length, src.length);\n    return bytes;\n  }\n\n  private static String toHex(byte[] bytes) {\n    StringBuilder sb = new StringBuilder(bytes.length * 2);\n    for (int i = 0; i < bytes.length; i++) {\n      int b = bytes[i] & 0xFF;\n      if (b < 0x10) sb.append(\"0\");\n      sb.append(Integer.toHexString(b));\n    }\n    return sb.toString();\n  }\n\n  private static byte[] sha256(byte[] bytes) {\n    try {\n      MessageDigest sha256 = MessageDigest.getInstance(\"SHA-256\");\n      sha256.update(bytes, 0, bytes.length);\n      return sha256.digest();\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n}\n```"
    },
    {
        "Example": 113,
        "Generated Java Code": "```java\nimport java.lang.reflect.ConstantPoolHandle;\n\npublic class ConstantPoolHandleTest {\n\n    public static void main(String[] args) {\n        ConstantPoolHandle constantPoolHandle = ConstantPoolHandle.of(0, 0);\n        System.out.println(constantPoolHandle.getTag());\n        System.out.println(constantPoolHandle.hashCode());\n        System.out.println(constantPoolHandle.equals(constantPoolHandle));\n        System.out.println(constantPoolHandle.getValue());\n    }\n}\n```"
    },
    {
        "Example": 114,
        "Generated Java Code": "```java\nimport com.google.common.primitives.Ints;\nimport org.bitcoinj.core.Block;\nimport org.bitcoinj.core.Context;\nimport org.bitcoinj.core.Sha256Hash;\nimport org.bitcoinj.core.StoredBlock;\nimport org.bitcoinj.core.Transaction;\nimport org.bitcoinj.core.Utils;\nimport org.bitcoinj.params.MainNetParams;\nimport org.bitcoinj.script.Script;\nimport org.bitcoinj.store.BlockStoreException;\nimport org.bitcoinj.utils.MonetaryFormat;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.math.BigInteger;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\n\n/**\n * <p>A block header is the \"control structure\" of a block. Block headers are stored in a chain of\n * {@link Block} objects, and are used to verify individual blocks and the entire blockchain.</p>\n *\n * <p>Block headers include the following information:</p>\n *\n * <ol>\n *     <li>version: A number that identifies the version of the block header, eg 1, 2 or 3.</li>\n *     <li>previous block: A reference to the previous block on the blockchain as a {@link Sha256Hash},\n *     which is used to link blocks together.</li>\n *     <li>merkle root: A hash of all the contents of the block held in a merkle tree, which is a\n *     hierarchical data structure used to represent large amounts of data efficiently.</li>\n *     <li>timestamp: A UNIX timestamp recording the time the block was found, represented as milliseconds\n *     since 1970-01-01T00:00:00Z.</li>\n *     <li>difficulty target: A value used in the Bitcoin mining process to determine how difficult it is to\n *     mine a block.</li>\n *     <li>nonce: A random 32-bit number (in most cases) used in the Bitcoin mining process to find a\n *     number that, when hashed with the rest of the block, is lower than the target difficulty.</li>\n * </ol>\n *\n * <p>Each block also features a Merkle tree of all the transactions in the block, and a field to record the number of\n * transactions in the block. The Merkle tree construction can be slow, especially for large blocks. Blocks\n * therefore allow the construction to be skipped: if this flag is set the {@link #transactions} field\n * will be null and you must compute them yourself. However, even if this is set, you can get around doing\n * the actual computation by using {@link #getHashOfMerkleRoot()} which will return the Merkle\n * root without needing to calculate the whole tree.</p>\n *\n * <p>Block headers are an essential part of the Bitcoin distributed ledger, and form the core of the blockchain\n * technology that underlies crypto-currencies like Bitcoin.</p>\n *\n * <p>Instances of this class are not safe for use by multiple threads.</p>\n */\npublic class StoredBlock implements Serializable {\n    public static final byte[] EMPTY_BYTES = new byte[0];\n    private static final int COMPACT_SERIALIZED_SIZE = 80;\n    private static final long serialVersionUID = -7992198302959340348L;\n    // TODO: consider making a BLOCK_HEADER_SIZE (eg 80) and move the constant into Block\n    private static final int CHAIN_WORK_BYTES = 32;\n\n    private Header header;\n    private byte[] compactEncoding;\n\n    // The building blocks for the header. Only stored if serializing this block to a compact\n    // representation\n    private byte[] versionBytes;\n    private byte[] prevBlockHashBytes;\n    private byte[] merkleRootHashBytes;\n    private byte[] timeBytes;\n    private byte[] difficultyTargetBytes;\n    private byte[] nonceBytes;\n\n    /**\n     * Constructs a new block header by deserializing the passed-in array.\n     * @param compactEncoding the compact encoding of the block header\n     * @param length the length of the array to deserialize\n     * @throws BlockStoreException if the serialization format is unknown or invalid\n     */\n    public StoredBlock(final byte[] compactEncoding, int length) throws BlockStoreException {\n        this.compactEncoding = compactEncoding;\n        if (length != compactEncoding.length) {\n            throw new BlockStoreException(String.format(\"Incorrect compact block length: %d vs %d\", length, compactEncoding.length));\n        }\n        // Parse as little-endian.\n        try {\n            final ByteBuffer buffer = ByteBuffer.wrap(compactEncoding, 0, length).order(ByteOrder.LITTLE_ENDIAN);\n            versionBytes = new byte[4];\n            buffer.get(versionBytes, 0, 4);\n            prevBlockHashBytes = new byte[32];\n            buffer.get(prevBlockHashBytes, 0, 32);\n            merkleRootHashBytes = new byte[32];\n            buffer.get(merkleRootHashBytes, 0, 32);\n            timeBytes = new byte[4];\n            buffer.get(timeBytes, 0, 4);\n            difficultyTargetBytes = new byte[4];\n            buffer.get(difficultyTargetBytes, 0, 4);\n            nonceBytes = new byte[4];\n            buffer.get(nonceBytes, 0, 4);\n        } catch (BufferUnderflowException e) {\n            throw new BlockStoreException(\"Could not parse compact block\", e);\n        }\n    }\n\n    /** Constructs a block header with the given attributes. */\n    public StoredBlock(Block header) {\n        this.header = header;\n    }\n\n    /** The version of the block header, usually 1, 2 or 3. */\n    public int getVersion() {\n        return Utils.readBytesToInt(versionBytes, 0);\n    }\n\n    /** The hash of the previous block header in the block chain, as a {@link Sha256Hash}. */\n    public Sha256Hash getPrevBlockHash() {\n        return Sha256Hash.wrap(prevBlockHashBytes);\n    }\n\n    /** The merkle root for this block. */\n    public Sha256Hash getMerkleRoot() {\n        return Sha256Hash.wrap(merkleRootHashBytes);\n    }\n\n    /**\n     * Return the merkle tree as a hash of hashes. Not to be confused with getMerkleRoot()\n     * which is a hash of the leaf-most nodes in the merkle tree.\n     */\n    public Sha256Hash getHashOfMerkleRoot() {\n        return new Sha256Hash(header.getHashOfMerkleRoot());\n    }\n\n    /**\n     * The time at which the block was found. This is represented as a UNIX timestamp\n     * as milliseconds since 1970-01-01T00:00:00Z.\n     */\n    public long getTimeSeconds() {\n        return Utils.readBytesToLong(timeBytes, 0);\n    }\n\n    /**\n     * The difficulty target as it was at the time the block was found. This is used\n     * in the Bitcoin mining process.\n     */\n    public BigInteger getDifficultyTarget() {\n        return Utils.readBytesToBigInteger(difficultyTargetBytes, 0);\n    }\n\n    /** The nonce used to mine the block. */\n    public long getNonce() {\n        return Utils.readBytesToLong(nonceBytes, 0);\n    }\n\n    /** The height in the block chain, if known. This is not computed by default. */\n    public int getHeight() {\n        return header.getHeight();\n    }\n\n    /**\n     * The chain work for this block and its descendents, if known.\n     * If the chain work was not computed before, recomputes and caches it.\n     *\n     * @throws BlockStoreException if the chain height is unknown\n     */\n    public BigInteger getChainWork() throws BlockStoreException {\n        if (header.getChainWork() == null)\n            throw new BlockStoreException(\"Chain work unknown for block \" + header.getHashAsString());\n        return header.getChainWork();\n    }\n\n    /**\n     * The total amount of work represented by this header and all its parents. Not to be\n     * confused with the difficulty target, which is a value used in Bitcoin mining.\n     *\n     * @param height the height of this block in the chain\n     * @return the total amount of work represented by this header and all its parents\n     */\n    public BigInteger getChainWork(int height) {\n        return header.getChainWork(height);\n    }\n\n    /**\n     * The serialized"
    },
    {
        "Example": 115,
        "Generated Java Code": "```java\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@WebServlet(name = \"FCKeditorConfig\", value = \"/FCKeditorConfig\")\npublic class FCKeditorConfigServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doGet(request, response);\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String toolbarSet = request.getParameter(\"toolbarSet\");\n        String instanceName = request.getParameter(\"instanceName\");\n        String height = request.getParameter(\"height\");\n        String basePath = request.getParameter(\"basePath\");\n        FCKeditorConfig config = new FCKeditorConfig();\n        String value = request.getParameter(\"value\");\n        String width = request.getParameter(\"width\");\n        String createHtml = request.getParameter(\"createHtml\");\n        config.setInstanceName(instanceName);\n        config.setValue(value);\n        config.escapeXml();\n        config.createInputForVariable();\n        config.toString();\n        config.setToolbarSet(toolbarSet);\n        config.setBasePath(basePath);\n        config.setWidth(width);\n        config.setHeight(height);\n        config.setConfig(config);\n    }\n}\n\n```"
    },
    {
        "Example": 116,
        "Generated Java Code": "```java\nimport java.util.List;\n\npublic class RefactorEdition {\n    private List<Edition> editions;\n\n    public List<Edition> getEditions() {\n        return editions;\n    }\n\n    public void setEditions(List<Edition> editions) {\n        this.editions = editions;\n    }\n\n    public Difference getAdditionDifference() {\n        return null;\n    }\n\n    public void setAdditionDifference(Difference additionDifference) {\n    }\n\n    public Difference getDeletionDifference() {\n        return null;\n    }\n\n    public void setDeletionDifference(Difference deletionDifference) {\n    }\n}\n```"
    },
    {
        "Example": 117,
        "Generated Java Code": "```java\npackage net.sourceforge.plantuml.activitydiagram3.ftile;\n\nclass FtileShapeLoader {\n\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\t/**\n\t * @return The maximum number of notations that can be added to an FTileShape\n\t */\n\tpublic static int maxNotations() {\n\t\t// TODO Auto-generated method stub\n\t\treturn 0;\n\t}\n\n}\n```"
    },
    {
        "Example": 118,
        "Generated Java Code": "```java\nvoid pop_transfer() {\n    if (real_stack.empty()) {\n        throw new RuntimeException(\"Real stack is empty\");\n    }\n    int next = real_stack.pop();\n    vstack.push(new Symbol(next));\n}\n```"
    },
    {
        "Example": 119,
        "Generated Java Code": "```java\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.junit.Assert.assertThrows;\n\n@RunWith(JUnit4.class)\npublic class ListenableFuture_GetUninterruptibly_Test {\n\n  private CountDownLatch countDownLatch;\n  private ListenableFuture<?> future;\n\n  @Before\n  public void setUp() throws Exception {\n    countDownLatch = new CountDownLatch(1);\n    future = ListenableFutures.create();\n  }\n\n  @After\n  public void tearDown() {\n    assertTrue(future.isDone());\n  }\n\n  @Test\n  public void getUninterruptibly_isDone_returnsResult() throws Exception {\n    future.addCallback(\n        new FutureCallback<Object>() {\n          @Override\n          public void onSuccess(Object result) {\n            countDownLatch.countDown();\n          }\n\n          @Override\n          public void onFailure(Throwable t) {\n            fail(t.toString());\n          }\n        });\n\n    future.set(new Object());\n    countDownLatch.await(4, TimeUnit.SECONDS);\n\n    assertThat(future.getUninterruptibly()).isEqualTo(new Object());\n  }\n\n  @Test\n  public void getUninterruptibly_isNotDone_returnsResult() throws Exception {\n    future.addCallback(\n        new FutureCallback<Object>() {\n          @Override\n          public void onSuccess(Object result) {\n            countDownLatch.countDown();\n          }\n\n          @Override\n          public void onFailure(Throwable t) {\n            fail(t.toString());\n          }\n        });\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(500);\n          future.set(new Object());\n          countDownLatch.countDown();\n        } catch (InterruptedException e) {\n          fail(e.toString());\n        }\n      }\n    }.start();\n\n    assertThat(future.getUninterruptibly()).isEqualTo(new Object());\n  }\n\n  @Test\n  public void getUninterruptibly_isNotDone_timesOut() throws Exception {\n    TimeoutException exception =\n        assertThrows(TimeoutException.class, () -> future.getUninterruptibly(500, TimeUnit.MILLISECONDS));\n    assertThat(exception).hasMessageThat().isEqualTo(\"getUninterruptibly timed out\");\n  }\n\n  @Test\n  public void getUninterruptibly_setException() throws Exception {\n    future.addCallback(\n        new FutureCallback<Object>() {\n          @Override\n          public void onSuccess(Object result) {\n            fail(\"Should throw\");\n          }\n\n          @Override\n          public void onFailure(Throwable t) {\n            countDownLatch.countDown();\n          }\n        });\n\n    future.setException(new Exception());\n    countDownLatch.await();\n\n    Exception actual = assertThrows(Exception.class, () -> future.getUninterruptibly());\n    assertThat(actual).isEqualTo(new Exception());\n  }\n}\n```"
    },
    {
        "Example": 120,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\n\npublic class GisticRecord {\n\n    private int internalId;\n    private boolean amplified;\n    private boolean deleted;\n    private int gisticID;\n    private int peakStart;\n    private ArrayList<CanonicalGene> genes_in_ROI;\n    private String cytoband;\n    private int NO_SUCH_GISTIC;\n    private int cancerStudyId;\n    private int chromosome;\n    private int peakEnd;\n    private double qValue;\n\n    public void setPeakEnd(int peakEnd) {\n        this.peakEnd = peakEnd;\n    }\n\n    public void setAmp(boolean amp) {\n        this.amplified = amp;\n    }\n\n    public String getCytoband() {\n        return cytoband;\n    }\n\n    public void setPeakStart(int peakStart) {\n        this.peakStart = peakStart;\n    }\n\n    public int getPeakStart() {\n        return peakStart;\n    }\n\n    public void setqValue(double qValue) {\n        this.qValue = qValue;\n    }\n\n    public boolean getAmp() {\n        return amplified;\n    }\n\n    public int getInternalId() {\n        return internalId;\n    }\n\n    public void setGenes_in_ROI(ArrayList<CanonicalGene> genes_in_ROI) {\n        this.genes_in_ROI = genes_in_ROI;\n    }\n\n    public int peakSize() {\n        return peakEnd - peakStart + 1;\n    }\n\n    public int getCancerStudyId() {\n        return cancerStudyId;\n    }\n\n    public int getChromosome() {\n        return chromosome;\n    }\n\n    public int getPeakEnd() {\n        return peakEnd;\n    }\n\n    public void addGene(CanonicalGene gene) {\n        genes_in_ROI.add(gene);\n    }\n\n    public void setCancerStudyId(int cancerStudyId) {\n        this.cancerStudyId = cancerStudyId;\n    }\n\n    public double getqValue() {\n        return qValue;\n    }\n\n    @Override\n    public String toString() {\n        return \"GisticRecord{\" +\n                \"internalId=\" + internalId +\n                \", amplified=\" + amplified +\n                \", deleted=\" + deleted +\n                \", gisticID=\" + gisticID +\n                \", peakStart=\" + peakStart +\n                \", genes_in_ROI=\" + genes_in_ROI +\n                \", cytoband='\" + cytoband + '\\'' +\n                \", NO_SUCH_GISTIC=\" + NO_SUCH_GISTIC +\n                \", cancerStudyId=\" + cancerStudyId +\n                \", chromosome=\" + chromosome +\n                \", peakEnd=\" + peakEnd +\n                \", qValue=\" + qValue +\n                '}';\n    }\n\n    public ArrayList<CanonicalGene> getGenes_in_ROI() {\n        return genes_in_ROI;\n    }\n\n    public void setCytoband(String cytoband) {\n        this.cytoband = cytoband;\n    }\n\n    public void setChromosome(int chromosome) {\n        this.chromosome = chromosome;\n    }\n}\n```"
    },
    {
        "Example": 121,
        "Generated Java Code": "```java\nimport java.util.Map;\nimport java.util.ConcurrentHashMap;\nimport java.util.function.LongBinaryOperator;\nimport java.util.function.LongUnaryOperator;\n\nclass AtomicLongMap<K> {\n\n    private final ConcurrentHashMap<K, Long> map;\n\n    public AtomicLongMap() {\n        map = new ConcurrentHashMap<>();\n    }\n\n    public long getAndIncrement(K key) {\n        return map.computeIfAbsent(key, k -> 0L).incrementAndGet();\n    }\n\n    public long incrementAndGet(K key) {\n        return map.computeIfAbsent(key, k -> 0L).getAndIncrement() + 1;\n    }\n\n    public Map<K, Long> createAsMap() {\n        return map;\n    }\n\n    public Map<K, Long> asMap() {\n        return map;\n    }\n\n    public boolean removeIfZero(K key) {\n        return map.remove(key, 0L);\n    }\n\n    public boolean replace(K key, long oldValue, long newValue) {\n        return map.replace(key, oldValue, newValue);\n    }\n\n    public long decrementAndGet(K key) {\n        return map.computeIfAbsent(key, k -> 0L).getAndDecrement() - 1;\n    }\n\n    public long updateAndGet(K key, LongUnaryOperator updateFunction) {\n        return map.computeIfAbsent(key, k -> 0L).getAndUpdate(updateFunction);\n    }\n\n    public long sum() {\n        return map.values().stream().mapToLong(Long::longValue).sum();\n    }\n\n    public long put(K key, long value) {\n        return map.put(key, value);\n    }\n\n    public long remove(K key) {\n        return map.remove(key);\n    }\n\n    public boolean remove(K key, long value) {\n        return map.remove(key, value);\n    }\n\n    public void removeAllZeros() {\n        map.entrySet().removeIf(entry -> entry.getValue() == 0L);\n    }\n\n    public long get(K key) {\n        return map.getOrDefault(key, 0L);\n    }\n\n    public void putAll(Map<K, Long> m) {\n        map.putAll(m);\n    }\n\n    public static <K> AtomicLongMap<K> create() {\n        return new AtomicLongMap<>();\n    }\n\n    public static <K> AtomicLongMap<K> create(Map<K, Long> map) {\n        AtomicLongMap<K> atomicLongMap = new AtomicLongMap<>();\n        atomicLongMap.putAll(map);\n        return atomicLongMap;\n    }\n\n    public long getAndAdd(K key, long delta) {\n        return map.computeIfAbsent(key, k -> 0L).getAndAdd(delta);\n    }\n\n    public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction) {\n        return map.computeIfAbsent(key, k -> 0L).getAndAccumulate(x, accumulatorFunction);\n    }\n\n    public long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction) {\n        return map.computeIfAbsent(key, k -> 0L).accumulateAndGet(x, accumulatorFunction);\n    }\n\n    public boolean containsKey(K key) {\n        return map.containsKey(key);\n    }\n\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    public void clear() {\n        map.clear();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    @Override\n    public String toString() {\n        return map.toString();\n    }\n\n    public long getAndUpdate(K key, LongUnaryOperator updateFunction) {\n        return map.computeIfAbsent(key, k -> 0L).getAndUpdate(updateFunction);\n    }\n\n    public long getAndDecrement(K key) {\n        return map.computeIfAbsent(key, k -> 0L).getAndDecrement() - 1;\n    }\n\n    public long putIfAbsent(K key, long value) {\n        return map.putIfAbsent(key, value);\n    }\n}\n```"
    },
    {
        "Example": 122,
        "Generated Java Code": "```java\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.compute.ComputeScopes;\nimport com.google.auth.http.HttpCredentialsAdapter;\nimport com.google.auth.oauth2.GoogleCredentials;\nimport com.google.cloud.compute.v1.ForwardingRule;\nimport com.google.cloud.compute.v1.ForwardingRule.ServiceLabel;\nimport com.google.cloud.compute.v1.Instance;\nimport com.google.cloud.compute.v1.Instance.Status;\nimport com.google.cloud.compute.v1.InstanceGroupsClient;\nimport com.google.cloud.compute.v1.InstancesClient;\nimport com.google.cloud.compute.v1.Network;\nimport com.google.cloud.compute.v1.Operation;\nimport com.google.cloud.compute.v1.Region;\nimport com.google.cloud.compute.v1.RegionBackendService;\nimport com.google.cloud.compute.v1.RegionDisksClient;\nimport com.google.cloud.compute.v1.RegionInstanceGroupsClient;\nimport com.google.cloud.compute.v1.RegionSslCertificatesClient;\nimport com.google.cloud.compute.v1.RegionTargetHttpsProxiesClient;\nimport com.google.cloud.compute.v1.RegionTargetHttpsProxiesSetUrlMapRequest;\nimport com.google.cloud.compute.v1.RegionUrlMapsClient;\nimport com.google.cloud.compute.v1.RegionUrlMapsInsertRequest;\nimport com.google.cloud.compute.v1.RegionUrlMapsPatchRequest;\nimport com.google.cloud.compute.v1.SshKey;\nimport com.google.cloud.compute.v1.Subnetwork;\nimport com.google.cloud.compute.v1.TargetHttpsProxy;\nimport com.google.cloud.compute.v1.UrlMap;\nimport com.google.protobuf.util.JsonFormat;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.Collections;\n\npublic class Sshexample {\n\n  private static final String PROJECT_ID = \"YOUR_PROJECT_ID\";\n  private static final String ZONE = \"europe-central2-b\";\n  private static final String NETWORK_NAME = \"global/networks/default\";\n  // Use a non-default subnetwork name to avoid conflicts.\n  private static final String SUBNETWORK_NAME = \"non-default-subnetwork\";\n\n  // Use a non-default instance name to avoid conflicts.\n  private static final String INSTANCE_NAME = \"sshexample-instance\";\n  private static final String INSTANCE_USERNAME = \"my-user\";\n  private static final String INSTANCE_IMAGE =\n      String.format(\"projects/%s/global/images/family/%s\", \"debian-cloud\", \"debian-9\");\n  // The URL for the ssh key used in the VM instance.\n  // See https://cloud.google.com/compute/docs/instances/creating-managing-ssh-keys\n  private static final String SSH_KEY_URL =\n      \"https://www.googleapis.com/compute/v1/projects/\"\n          + PROJECT_ID\n          + \"/global/sshKeys/my-ssh-key\";\n  private static final Integer INSTANCE_PORT = 22;\n\n  private static final String REGION = \"europe-central2\";\n  private static final String HTTP_PORT = \"80\";\n  private static final String HTTPS_PORT = \"443\";\n  // Use a non-default backend service name to avoid conflicts.\n  private static final String BACKEND_SERVICE_NAME = \"sshexample-backend-service\";\n  private static final String HEALTH_CHECK_NAME = \"backing-checking-health\";\n  private static final String PROXY_NAME = \"sshexample-proxy\";\n  // Use a non-default target https proxy name to avoid conflicts.\n  private static final String HTTPS_PROXY_NAME = \"sshexample-https-proxy\";\n  // Use a non-default URL map name to avoid conflicts.\n  private static final String URL_MAP_NAME = \"sshexample-url-map\";\n\n  static class HttpResponse {\n    private int responseCode;\n    private String responseMessage;\n\n    public int getResponseCode() {\n      return responseCode;\n    }\n\n    public String getResponseMessage() {\n      return responseMessage;\n    }\n  }\n\n  /** This is a simple example of using Google Compute Engine API to create an instance,\n   * allow SSH traffic over port 22 (not recommended for production), and print instance details. */\n  public static void main(String... args) throws Exception {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the `instancesClient.close()` method on the client to safely\n    // clean up any remaining background resources.\n    // For more on the best practices for authenticating to a service account, see:\n    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n    try (InstancesClient instancesClient = InstancesClient.create(getHttpCredentialsAdapter());\n        RegionInstancesClient regionInstancesClient = RegionInstancesClient.create(getHttpCredentialsAdapter());\n        RegionInstanceGroupsClient regionInstanceGroupsClient = RegionInstanceGroupsClient.create(getHttpCredentialsAdapter());\n        RegionUrlMapsClient regionUrlMapsClient = RegionUrlMapsClient.create(getHttpCredentialsAdapter());\n        RegionTargetHttpsProxiesClient regionTargetHttpsProxiesClient = RegionTargetHttpsProxiesClient.create(getHttpCredentialsAdapter());\n        RegionBackendService regionBackendServiceClient = RegionBackendService.create(getHttpCredentialsAdapter());\n        RegionSslCertificatesClient regionSslCertificatesClient = RegionSslCertificatesClient.create(getHttpCredentialsAdapter());\n        RegionDisksClient regionDisksClient = RegionDisksClient.create(getHttpCredentialsAdapter())) {\n\n      // Create the disk for the instance\n      diskCreate(regionDisksClient, ZONE, INSTANCE_NAME);\n\n      // Create the instance\n      instanceCreate(instancesClient, ZONE, INSTANCE_NAME, INSTANCE_IMAGE, SSH_KEY_URL, INSTANCE_PORT);\n\n      // Create the instance group\n      instanceGroupCreate(regionInstanceGroupsClient, REGION, proxyCreate(regionTargetHttpsProxiesClient, REGION, HTTPS_PROXY_NAME));\n\n      // Add the instance to the instance group\n      instanceGroupAddInstance(regionInstanceGroupsClient, REGION, INSTANCE_NAME, proxyCreate(regionTargetHttpsProxiesClient, REGION, HTTPS_PROXY_NAME));\n\n      // Create the backend service\n      backendServiceCreate(regionBackendServiceClient, REGION, BACKEND_SERVICE_NAME);\n\n      // Add the backend service to the instance groups\n      backendServicePut(regionInstanceGroupsClient, REGION, BACKEND_SERVICE_NAME, getRegionInstanceGroupsResponse(regionInstanceGroupsClient, REGION).getId());\n\n      // Create the url map\n      urlMapCreate(regionUrlMapsClient, REGION, URL_MAP_NAME, getBackendServiceInfo(regionBackendServiceClient, REGION, BACKEND_SERVICE_NAME));\n\n      // Update the target https proxy to use the new url map\n      targetHttpsProxiesSetUrlMap(regionTargetHttpsProxiesClient, REGION, HTTPS_PROXY_NAME, getRegionUrlMapsResponse(regionUrlMapsClient, REGION).getId());\n\n      // Ssh to the instance and print instance details\n      try (Socket socket = new Socket(getInstanceIp(instancesClient, ZONE, INSTANCE_NAME), INSTANCE_PORT)) {\n        System.out.println(String.format(\"Connected to instance %s at %s.\", INSTANCE_NAME, getInstanceIp(instancesClient, ZONE, INSTANCE_NAME)));\n        connected();\n\n        // You can send commands to the instance using the Socket, however\n        // this method doesn't do that and instead closes the connection after a few seconds.\n        System.out.println(\"Waiting 10 seconds and closing ssh connection.\");\n        Thread.sleep(10000);\n      } catch (Exception e) {\n        disconnected();\n        throw e;\n      } finally {\n        dataReceived(0);\n      }\n    }\n  }\n\n  static RegionInstanceGroupsResponse getRegionInstanceGroupsResponse(RegionInstanceGroupsClient client, String region) throws IOException {\n    RegionInstanceGroupsGetResponse response = client.get(REGION, \"sshexample-instance-group\");\n    System.out.println(response.toPrettyString());\n    return response.getPage();\n  }\n\n  static RegionUrlMapsResponse getRegionUrlMapsResponse(RegionUrlMapsClient client, String region) throws IOException {\n    RegionUrlMapsGetResponse response = client.get(REGION, URL_MAP_NAME);\n    System.out.println(response.toPrettyString());\n    return response.getPage();\n  }\n\n  static Region"
    },
    {
        "Example": 123,
        "Generated Java Code": "```java\nimport java.util.List;\nimport java.util.Iterator;\n\nclass PluginContainer {\n    public List<PluginManagerListener> listeners;\n}\n\nclass Logger {\n}\n\nclass PluginManager {\n    public static PluginManager getInstance() {\n        return null;\n    }\n}\n\nclass AbstractPlugin {\n}\n\nclass PluginManagerListener {\n    public void pluginStateChanged(String var1, AbstractPlugin var2) {\n    }\n}\n\n```"
    },
    {
        "Example": 124,
        "Generated Java Code": "```java  \nimport com.google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseServiceClient;\nimport com.google.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest;\nimport com.google.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse;\nimport com.google.recaptchaenterprise.v1.ProjectName;\nimport com.google.recaptchaenterprise.v1.RelatedAccountGroup;\nimport java.io.IOException;\n\npublic class ListRelatedAccountGroups {\n\n  public static void main(String[] args) throws IOException {\n    // TODO(developer): Replace these variables before running the sample.\n    String project = \"project-id\";\n    String recaptchaSiteKey = \"recaptcha-site-key\";\n    listRelatedAccountGroups(project, recaptchaSiteKey);\n  }\n\n  // Lists the related account groups for a specific project.\n  public static void listRelatedAccountGroups(String project, String recaptchaSiteKey)\n      throws IOException {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (RecaptchaEnterpriseServiceClient client = RecaptchaEnterpriseServiceClient.create()) {\n      ProjectName parent = ProjectName.of(project);\n      ListRelatedAccountGroupsRequest request =\n          ListRelatedAccountGroupsRequest.newBuilder()\n              .setParent(parent.toString())\n              .setRecaptchaSiteKey(recaptchaSiteKey)\n              .build();\n\n      ListRelatedAccountGroupsResponse response = client.listRelatedAccountGroups(request);\n      for (RelatedAccountGroup group : response.getRelatedAccountGroupsList()) {\n        System.out.println(\"Retrieved related account group: \" + group.getName());\n      }\n    }\n  }\n}  \n```"
    },
    {
        "Example": 125,
        "Generated Java Code": "```java\n        netImpl.bindSocket(\n            streaming,\n            localServiceID,\n            address,\n            remoteServiceID,\n            fd.getInetAddress(),\n            fd.getServiceID(),\n            (aBoolean, aBoolean1) -> {},\n            (aBoolean, aBoolean2) -> {});\n\n```"
    },
    {
        "Example": 126,
        "Generated Java Code": "```java  \n  /**\n   * test of getresponsestringcsv method, of class LogEntryRequest.\n   */\n  @Test\n  public void testGetresponsestringcsv() {\n    LogEntryRequest instance = new LogEntryRequest();\n    instance.setresponsestringcsv(\"response\");\n\n    String expResult = \"response\";\n    String result = instance.getresponsestringcsv();\n    assertEquals(expResult, result);\n  }  \n```"
    },
    {
        "Example": 127,
        "Generated Java Code": "```java  \n        Button button = new Button.Builder()\n                .setId(buttonId)\n                .setText(buttonText)\n                .setImageProvider(ImageProvider.createStaticImageProvider(imageUri))\n                .build();  \n```"
    },
    {
        "Example": 128,
        "Generated Java Code": "```java\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport com.google.protobuf.ByteString;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport org.bitcoinj.core.Block;\nimport org.bitcoinj.core.CheckpointManager;\nimport org.bitcoinj.core.NetworkParameters;\nimport org.bitcoinj.core.Sha256Hash;\nimport org.bitcoinj.core.StoredBlock;\nimport org.bitcoinj.core.Utils;\nimport org.bitcoinj.utils.BloomFilter;\nimport org.bitcoinj.utils.Threading;\nimport org.bitcoinj.wallet.Protos;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * <p>A {@link CheckpointManager} implementation which stores its checkpoints in a sorted map.\n * This implementation is suitable for applications which need a fast way to access all checkpoints.\n * Please note that checkpoints can only be added during the {@link #open()} method.</p>\n *\n * <p>The checkpoints are stored as a list of block hashes and their corresponding filter hash bits.\n * The filter hash bits are used to verify that a block is related to the stored checkpoints.\n * If the block does not match the filter hash bits, it is ignored.</p>\n *\n * <p>The checkpoints are stored in a file named \".checkpoints\" in the application's data directory.\n * The file is written using the {@link BaseEncoding#BASE64} format.</p>\n */\npublic class FastMapCheckpointManager extends CheckpointManager {\n    private static final Logger log = LoggerFactory.getLogger(FastMapCheckpointManager.class);\n    private static final String TEXTUAL_MAGIC = \"Checkpoint::\";\n    private static final int MAX_SIGNATURES = 100;\n    private static final String BINARY_MAGIC = \"CHECK\";\n\n    /** The checkpoints, sorted by block height. */\n    private final TreeMap<Long, StoredBlock> checkpoints = Maps.newTreeMap();\n    private final Set<StoredBlock> checkpointSet = Sets.newHashSet();\n\n    public FastMapCheckpointManager(NetworkParameters params) {\n        super(params);\n    }\n\n    @Override\n    protected boolean addCheckpoint(long height, Sha256Hash hash) {\n        // Checkpoints can only be added during the open() method.\n        return false;\n    }\n\n    @Override\n    public void open() {\n        // We can't access the params object until this method is called.\n        if (params.getId().equals(NetworkParameters.ID_MAINNET)) {\n            // Load checkpoints from a file.\n            try (InputStream stream = Utils.getContextClassLoader().getResourceAsStream(\"checkpoints.txt\")) {\n                loadFromTextualFile(stream);\n            } catch (IOException e) {\n                throw new RuntimeException(\"Could not open checkpoints.txt: \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    /**\n     * Loads the checkpoints from a textual file.\n     *\n     * @param stream The stream to load the checkpoints from.\n     * @throws IOException If there is an error reading the stream.\n     */\n    private void loadFromTextualFile(InputStream stream) throws IOException {\n        byte[] bytes = Utils.readFully(stream);\n        String checkpointsText = new String(bytes, \"UTF-8\");\n        if (!checkpointsText.startsWith(TEXTUAL_MAGIC)) {\n            throw new IllegalArgumentException(\n                \"Invalid checkpoints file format: \" + Arrays.toString(bytes));\n        }\n        checkpointsText = checkpointsText.substring(TEXTUAL_MAGIC.length());\n\n        // Split the checkpoint data into individual lines.\n        String[] lines = checkpointsText.split(\"\\n\");\n\n        // Parse each line into a checkpoint object.\n        for (String line : lines) {\n            line = line.trim();\n            if (line.isEmpty() || line.startsWith(\"#\")) {\n                continue;\n            }\n\n            // Parse the checkpoint data.\n            String[] parts = line.split(\":\");\n            if (parts.length != 2) {\n                throw new IllegalArgumentException(\"Invalid checkpoint line: \" + line);\n            }\n\n            long height = Long.parseLong(parts[0]);\n            Sha256Hash hash = Sha256Hash.wrap(parts[1]);\n\n            // Add the checkpoint to the map.\n            checkpoints.put(height, new StoredBlock(hash, height));\n        }\n\n        log.info(\"Loaded {} checkpoints from file.\", checkpoints.size());\n    }\n\n    @Override\n    public void close() {\n        // Nothing to do.\n    }\n\n    /**\n     * Returns a hash of the concatenated checkpoint data.\n     *\n     * @return The hash of the concatenated checkpoint data.\n     */\n    public Sha256Hash dataHash() {\n        // Concatenate the checkpoint data.\n        StringBuilder checkpointData = new StringBuilder();\n        for (StoredBlock checkpoint : checkpoints.values()) {\n            checkpointData.append(checkpoint.getHeader().getHash()).append(\":\");\n        }\n\n        // Hash the checkpoint data.\n        return Sha256Hash.twiceOf(checkpointData.toString().getBytes());\n    }\n\n    /**\n     * Reads a textual checkpoint file.\n     *\n     * @param stream The stream to read the checkpoint file from.\n     * @return A hash of the concatenated checkpoint data.\n     * @throws IOException If there is an error reading the stream.\n     */\n    public Sha256Hash readTextual(InputStream stream) throws IOException {\n        // Read the checkpoint data from the stream.\n        byte[] bytes = Utils.readFully(stream);\n        String checkpointsText = new String(bytes, \"UTF-8\");\n        if (!checkpointsText.startsWith(TEXTUAL_MAGIC)) {\n            throw new IllegalArgumentException(\n                \"Invalid checkpoints file format: \" + Arrays.toString(bytes));\n        }\n\n        // Split the checkpoint data into individual lines.\n        String[] lines = checkpointsText.substring(TEXTUAL_MAGIC.length()).split(\"\\n\");\n\n        // Parse each line into a checkpoint object.\n        for (String line : lines) {\n            line = line.trim();\n            if (line.isEmpty() || line.startsWith(\"#\")) {\n                continue;\n            }\n\n            // Parse the checkpoint data.\n            String[] parts = line.split(\":\");\n            if (parts.length != 2) {\n                throw new IllegalArgumentException(\"Invalid checkpoint line: \" + line);\n            }\n\n            long height = Long.parseLong(parts[0]);\n            Sha256Hash hash = Sha256Hash.wrap(parts[1]);\n\n            // Add the checkpoint to the map.\n            checkpoints.put(height, new StoredBlock(hash, height));\n        }\n\n        // Return the hash of the concatenated checkpoint data.\n        return dataHash();\n    }\n\n    /**\n     * Reads a binary checkpoint file.\n     *\n     * @param stream The stream to read the checkpoint file from.\n     * @return A hash of the concatenated checkpoint data.\n     * @throws IOException If there is an error reading the stream.\n     */\n    public Sha256Hash readBinary(InputStream stream) throws IOException {\n        // Read the checkpoint data from the stream.\n        byte[] bytes = Utils.readFully(stream);\n        if (bytes.length < 8) {\n            throw new IllegalArgumentException(\"Invalid checkpoint file format: \" + Arrays.toString(bytes));\n        }\n\n        // Check the magic number.\n        String magic = new String(bytes, 0, 4, \"US-ASCII\");\n        if (!magic.equals(BINARY_MAGIC)) {\n            throw new IllegalArgumentException(\n                \"Invalid checkpoints file format: \" + Arrays.toString(bytes));\n        }\n\n        // Read the checkpoint count.\n        int count = (int) Utils.readUint32(bytes, 4);\n        if (count > MAX_SIGNATURES) {\n            throw new IllegalArgumentException(\"Invalid checkpoint file format: too many checkpoints\");\n        }\n\n        // Read the checkpoints.\n        for (int i = 0; i < count; i++) {\n            // Read the checkpoint data.\n            long height = Utils.readUint32(bytes, 8 + i * 8);\n            byte[] hashBytes = Arrays.copyOfRange(bytes, 12 + i * 8, 40 + i * 8);\n            Sha256Hash hash = Sha256Hash.wrap(hashBytes);\n\n            // Add the checkpoint to the map.\n            checkpoints.put(height, new StoredBlock(hash, height));\n        }\n\n        // Return the hash of the concatenated checkpoint data.\n        return dataHash();\n    "
    },
    {
        "Example": 129,
        "Generated Java Code": "```java\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\nclass PackFormatInputStream {\n\n    private final ByteArrayOutputStream packed;\n    private final String format;\n\n    PackFormatInputStream(String format) {\n        this.packed = new ByteArrayOutputStream();\n        this.format = format;\n    }\n\n    void addValue(byte value) throws IOException {\n        packed.write(value);\n    }\n\n    void packLong() throws IOException {\n        packed.write(Integer.reverseBytes(packed.size()));\n    }\n\n    void addShort(short value) throws IOException {\n        packed.write(value >> 8);\n        packed.write(value);\n    }\n\n    void reset() throws IOException {\n        packed.reset();\n    }\n\n    String getFormat() {\n        return format;\n    }\n\n    void addByte(byte value) throws IOException {\n        packed.write(value);\n    }\n\n    void addInt(int value) throws IOException {\n        packed.write((value >> 24) & 0xFF);\n        packed.write((value >> 16) & 0xFF);\n        packed.write((value >> 8) & 0xFF);\n        packed.write(value & 0xFF);\n    }\n\n    void addLong(long value) throws IOException {\n        packed.write((byte) ((value >> 56) & 0xFF));\n        packed.write((byte) ((value >> 48) & 0xFF));\n        packed.write((byte) ((value >> 40) & 0xFF));\n        packed.write((byte) ((value >> 32) & 0xFF));\n        packed.write((byte) ((value >> 24) & 0xFF));\n        packed.write((byte) ((value >> 16) & 0xFF));\n        packed.write((byte) ((value >> 8) & 0xFF));\n        packed.write((byte) (value & 0xFF));\n    }\n\n    void addByteArray(byte[] value) throws IOException {\n        addInt(value.length);\n        packed.write(value);\n    }\n\n    void addByteArray(byte[] value, int offset, int len) throws IOException {\n        addInt(len);\n        packed.write(value, offset, len);\n    }\n\n    void addString(String value) throws IOException {\n        byte[] bytes = value.getBytes(\"UTF-8\");\n        addInt(bytes.length);\n        packed.write(bytes);\n    }\n\n}\n```"
    },
    {
        "Example": 130,
        "Generated Java Code": "```java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\nimport net.sf.marineapi.nmea.parser.HDMSentence;\nimport net.sf.marineapi.nmea.parser.HDTParser;\n\npublic class HDTParserTest {\n\n    private HDTParser parser;\n    private String example = \"HDM,240.53,M\";\n    private HDMSentence hdm;\n\n    @Before\n    public void setUp() {\n        parser = new HDTParser();\n        hdm = parser.parse(example);\n    }\n\n    @After\n    public void tearDown() {\n        parser = null;\n    }\n\n    @Test\n    public void testGetHeading() {\n        assertEquals(\"Test heading\", 240.53, hdm.getHeading(), 0.0001);\n    }\n\n    @Test\n    public void testSetHeading() {\n        double newHeading = 83.5;\n        hdm.setHeading(newHeading);\n        assertEquals(\"Test heading\", newHeading, hdm.getHeading(), 0.0001);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSetHeadingTooHigh() {\n        hdm.setHeading(361);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSetNegativeHeading() {\n        hdm.setHeading(-1);\n    }\n}\n```"
    },
    {
        "Example": 131,
        "Generated Java Code": "```java  \nimport com.google.errorprone.annotations.CheckReturnValue;\n\n/**\n * To cover visibility restrictions, an element must not have any of the restricted visibilities.\n *\n * <p>For example:\n *\n * <pre>{@code\n * &#64;RestrictVisibilitiesTo({Visibility.PUBLIC, Visibility.PRIVATE})\n * class Covered {}\n * }</pre>\n *\n * <p>An element covers all visibilities if it does not restrict to *any* of the restricted\n * visibilities.\n *\n * <p>For example:\n *\n * <pre>{@code\n * &#64;RestrictVisibilitiesTo({Visibility.PUBLIC, Visibility.PRIVATE})\n * class NotCovered {}\n * }</pre>\n *\n * <p>In other words, the coverage requirement is satisfied if the `@RestrictVisibilitiesTo` annotation\n * is not present.\n *\n * <p>For more information, see the :javadoc:link:`Restricts accesses by clients` section of the\n * Java language specification.\n */\n@CheckReturnValue\npublic interface RestrictVisibilitiesToCover {\n\n  /**\n   * Adds a required annotation to the element.\n   *\n   * <p>Note that even if the element has an annotation, if it does not have any of the required\n   * {@code Visibility} values, then the element is considered to cover all visibilities.\n   */\n  @CheckReturnValue\n  Element restrictVisibilitiesTo(Set<Signature.Visibility> visMask);\n\n  /**\n   * Adds a required annotation to the element, disallowing any visibilities.\n   *\n   * <p>Note that if the element has an annotation, but it does not restrict to any visibilities then\n   * the element is considered to cover all visibilities.\n   */\n  @CheckReturnValue\n  default Element coverAllVisibilities() {\n    return restrictVisibilitiesTo(EnumSet.allOf(Signature.Visibility.class));\n  }\n\n  /**\n   * Returns true if the element covers all visibilities.\n   *\n   * <p>The element is considered to cover all visibilities if it does not restrict to *any* of the\n   * restricted visibilities.\n   */\n  boolean covers(Element element);\n}  \n```"
    },
    {
        "Example": 132,
        "Generated Java Code": "```java\nimport java.util.Scanner;\n\npublic class InputHandler {\n\n    private static Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        // Get a character from the user\n        char character = getChar(\"Enter a character: \");\n\n        // Get a character from the user again, but this time ignore case\n        character = getCharIgnoreCase(\"Enter a character, ignoring case: \");\n\n        // Get an integer from the user\n        int integer = getInt(\"Enter an integer: \");\n\n        // Get a double from the user\n        double doubleValue = getDouble(\"Enter a double: \");\n\n        // Get a boolean from the user\n        boolean booleanValue = getBoolean(\"Enter a boolean (true or false): \");\n\n        // Get a string from the user\n        String string = getString(\"Enter a string: \");\n\n        // Print the values entered by the user\n        System.out.println(\"Character: \" + character);\n        System.out.println(\"Integer: \" + integer);\n        System.out.println(\"Double: \" + doubleValue);\n        System.out.println(\"Boolean: \" + booleanValue);\n        System.out.println(\"String: \" + string);\n    }\n\n    public static char getChar(String prompt) {\n        System.out.print(prompt);\n        return scanner.nextLine().charAt(0);\n    }\n\n    public static char getCharIgnoreCase(String prompt) {\n        System.out.print(prompt);\n        return scanner.nextLine().toLowerCase().charAt(0);\n    }\n\n    public static int getInt(String prompt) {\n        System.out.print(prompt);\n        return Integer.parseInt(scanner.nextLine());\n    }\n\n    public static double getDouble(String prompt) {\n        System.out.print(prompt);\n        return Double.parseDouble(scanner.nextLine());\n    }\n\n    public static boolean getBoolean(String prompt) {\n        System.out.print(prompt);\n        return Boolean.parseBoolean(scanner.nextLine());\n    }\n\n    public static String getString(String prompt) {\n        System.out.print(prompt);\n        return scanner.nextLine();\n    }\n}\n```"
    },
    {
        "Example": 133,
        "Generated Java Code": "```java\nimport com.google.cloud.storage.Storage;\nimport com.google.cloud.storage.StorageOptions;\nimport com.google.cloud.storage.CopyFieldOption;\nimport com.google.cloud.storage.StorageException;\nimport com.google.cloud.storage.CopyBlobToBlobOptions;\nimport com.google.cloud.storage.Blob;\n\npublic class CopyBlob {\n  public static void copyBlob(\n      String projectId,\n      String sourceBucketName,\n      String sourceObjectName,\n      String destinationBucketName,\n      String destinationObjectName) {\n    // The ID of your GCP project\n    // String projectId = \"your-project-id\";\n\n    // The ID of your GCS bucket\n    // String sourceBucketName = \"your-source-bucket-name\";\n\n    // The ID of your GCS object\n    // String sourceObjectName = \"your-source-object-name\";\n\n    // The ID of your GCS bucket (destination)\n    // String destinationBucketName = \"your-destination-bucket-name\";\n\n    // The ID of your GCS object (destination)\n    // String destinationObjectName = \"your-destination-object-name\";\n\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n    Blob sourceBlob = storage.get(BlobId.of(sourceBucketName, sourceObjectName));\n    Blob destinationBlob =\n        storage.create(\n            destinationBucketName, destinationObjectName, CopyBlobToBlobOptions.newBuilder().build());\n    System.out.println(destinationBlob.toString());\n  }\n}  \n```"
    },
    {
        "Example": 134,
        "Generated Java Code": "```java\nimport net.sf.marineapi.nmea.parser.VHWParser;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class VHWParserTest {\n\n    private VHWParser vhw;\n\n    // ------------------------------------------------------------------------\n    // Test methods: Constructor (String)\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testConstructorString() {\n        vhw = new VHWParser(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,K*55\");\n        assertEquals(251.80, vhw.getHeading(), 0.01);\n        assertEquals(0.02, vhw.getSpeedKnots(), 0.005);\n        assertEquals(0.01, vhw.getSpeedKilometres(), 0.005);\n        assertEquals(true, vhw.isTrue());\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: Constructor (TalkerId)\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testConstructorTalkerId() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.parse(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,K*55\");\n        assertEquals(251.80, vhw.getHeading(), 0.01);\n        assertEquals(0.02, vhw.getSpeedKnots(), 0.005);\n        assertEquals(0.01, vhw.getSpeedKilometres(), 0.005);\n        assertEquals(true, vhw.isTrue());\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: setTrue\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testIsTrue() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.parse(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,K*55\");\n        assertEquals(true, vhw.isTrue());\n        vhw.parse(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,D*55\");\n        assertEquals(false, vhw.isTrue());\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: setSpeedKnots\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testSetSpeedKnots() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.setSpeedKnots(1.0);\n        assertEquals(1.0, vhw.getSpeedKnots(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: setSpeedKilometres\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testSetSpeedKilometres() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.setSpeedKilometres(2.0);\n        assertEquals(2.0, vhw.getSpeedKilometres(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: setMagneticHeading\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testSetMagneticHeading() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.setHeading(3.0);\n        assertEquals(3.0, vhw.getHeading(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: getHeading\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testGetHeading() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.parse(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,K*55\");\n        assertEquals(251.80, vhw.getHeading(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: getSpeedKnots\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testGetSpeedKnots() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.parse(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,K*55\");\n        assertEquals(0.02, vhw.getSpeedKnots(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: getSpeedKilometres\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testGetSpeedKilometres() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.parse(\"$GPVHW,251.80,T,251.22,M,0.02,N,0.01,K*55\");\n        assertEquals(0.01, vhw.getSpeedKilometres(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: getMagneticHeading\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void testGetMagneticHeading() {\n        vhw = new VHWParser(VHWParser.TalkerId.GP);\n        vhw.setHeading(123.456);\n        assertEquals(123.456, vhw.getHeading(), 0.005);\n    }\n\n    // ------------------------------------------------------------------------\n    // Test methods: setUp\n    // ------------------------------------------------------------------------\n\n    @Test\n    public void setUp() {\n        // no setUp for this class\n    }\n}\n```"
    },
    {
        "Example": 135,
        "Generated Java Code": "```java\nimport java.util.*;\nimport java.lang.*;\n\npublic class CSP {\n\n    private Hashtable<Variable, Integer> varIndexHash;\n    private List<Variable> variables;\n    private Hashtable<Variable, List<Constraint>> cnet;\n    private List<Domain> domains;\n    private List<Constraint> constraints;\n    private boolean constraintAdded;\n\n    public CSP() {\n        this.varIndexHash = new Hashtable<>();\n        this.variables = new ArrayList<>();\n        this.cnet = new Hashtable<>();\n        this.domains = new ArrayList<>();\n        this.constraints = new ArrayList<>();\n        this.constraintAdded = false;\n    }\n\n    public CSP(CSP csp) {\n        this.varIndexHash = copyHashMap(csp.varIndexHash);\n        this.variables = new ArrayList<>(csp.variables);\n        this.cnet = copyHashMap(csp.cnet);\n        this.domains = copyDomains(csp.domains);\n        this.constraints = new ArrayList<>(csp.constraints);\n        this.constraintAdded = csp.constraintAdded;\n    }\n\n    public void addVariable(Variable var) {\n        varIndexHash.put(var, variables.size());\n        variables.add(var);\n        cnet.put(var, new ArrayList<>());\n        domains.add(var.getDomain());\n    }\n\n    public void removeVariable(Variable var) {\n        varIndexHash.remove(var);\n        variables.remove(var);\n        cnet.remove(var);\n        domains.remove(varIndexHash.get(var));\n        for (Constraint constraint : var.getConstraints()) {\n            constraints.remove(constraint);\n            for (Variable variable : constraint.getVariables()) {\n                cnet.get(variable).remove(constraint);\n            }\n        }\n    }\n\n    public void addConstraint(Constraint constraint) {\n        if (!constraintAdded) {\n            constraints.add(constraint);\n            for (Variable variable : constraint.getVariables()) {\n                cnet.get(variable).add(constraint);\n            }\n        }\n    }\n\n    public void removeConstraint(Constraint constraint) {\n        constraints.remove(constraint);\n        for (Variable variable : constraint.getVariables()) {\n            cnet.get(variable).remove(constraint);\n        }\n    }\n\n    public boolean isConsistent() {\n        for (Constraint constraint : constraints) {\n            if (!constraint.isSatisfied()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isComplete() {\n        for (Domain domain : domains) {\n            if (domain.size() == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isSolved() {\n        return isComplete() && isConsistent();\n    }\n\n    public List<Variable> getVariables() {\n        return variables;\n    }\n\n    public List<Constraint> getConstraints() {\n        return constraints;\n    }\n\n    public Domain getDomain(Variable var) {\n        return domains.get(varIndexHash.get(var));\n    }\n\n    public void setDomain(Variable var, Domain domain) {\n        domains.set(varIndexHash.get(var), domain);\n    }\n\n    public void removeValueFromDomain(Variable var, int value) {\n        domains.get(varIndexHash.get(var)).removeValue(value);\n    }\n\n    public CSP copyDomains() {\n        CSP csp = new CSP();\n        for (Domain domain : domains) {\n            csp.domains.add(domain.copy());\n        }\n        return csp;\n    }\n\n    private static Hashtable<Variable, List<Constraint>> copyHashMap(Hashtable<Variable, List<Constraint>> hashtable) {\n        Hashtable<Variable, List<Constraint>> copy = new Hashtable<>();\n        for (Map.Entry<Variable, List<Constraint>> entry : hashtable.entrySet()) {\n            copy.put(entry.getKey(), new ArrayList<>(entry.getValue()));\n        }\n        return copy;\n    }\n\n    public static class Variable {\n\n        private String name;\n        private Domain domain;\n        private List<Constraint> constraints;\n\n        public Variable(String name, Domain domain) {\n            this.name = name;\n            this.domain = domain;\n            this.constraints = new ArrayList<>();\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public Domain getDomain() {\n            return domain;\n        }\n\n        public void setDomain(Domain domain) {\n            this.domain = domain;\n        }\n\n        public List<Constraint> getConstraints() {\n            return constraints;\n        }\n\n        public void addConstraint(Constraint constraint) {\n            constraints.add(constraint);\n        }\n\n        public void removeConstraint(Constraint constraint) {\n            constraints.remove(constraint);\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Variable variable = (Variable) o;\n            return name.equals(variable.name);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(name);\n        }\n    }\n\n    public static class Domain {\n\n        private List<Integer> values;\n\n        public Domain() {\n            this.values = new ArrayList<>();\n        }\n\n        public Domain(List<Integer> values) {\n            this.values = values;\n        }\n\n        public List<Integer> getValues() {\n            return values;\n        }\n\n        public void setValues(List<Integer> values) {\n            this.values = values;\n        }\n\n        public void addValue(int value) {\n            values.add(value);\n        }\n\n        public void removeValue(int value) {\n            values.remove(Integer.valueOf(value));\n        }\n\n        public boolean contains(int value) {\n            return values.contains(value);\n        }\n\n        public int size() {\n            return values.size();\n        }\n\n        public Domain copy() {\n            return new Domain(new ArrayList<>(values));\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Domain domain = (Domain) o;\n            return values.equals(domain.values);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(values);\n        }\n    }\n\n    public static abstract class Constraint {\n\n        private List<Variable> variables;\n\n        public Constraint(List<Variable> variables) {\n            this.variables = variables;\n        }\n\n        public List<Variable> getVariables() {\n            return variables;\n        }\n\n        public abstract boolean isSatisfied();\n    }\n\n    public static class BinaryConstraint extends Constraint {\n\n        private Variable var1;\n        private Variable var2;\n\n        public BinaryConstraint(Variable var1, Variable var2) {\n            super(List.of(var1, var2));\n            this.var1 = var1;\n            this.var2 = var2;\n        }\n\n        public Variable getOtherVariable(Variable var) {\n            if (var.equals(var1)) {\n                return var2;\n            } else if (var.equals(var2)) {\n                return var1;\n            } else {\n                throw new IllegalArgumentException(\"Variable is not part of this constraint\");\n            }\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            BinaryConstraint that = (BinaryConstraint) o;\n            return (var1.equals(that.var1) && var2.equals(that.var2)) || (var1.equals(that"
    },
    {
        "Example": 136,
        "Generated Java Code": "```java\nimport java.util.Date;\n\npublic class SensorData {\n\n    private int volume;\n    private double occupancy;\n    private Date measurement_date;\n    private int lane_id;\n    private long id;\n    private double speed;\n    private int quality;\n\n    public SensorData() {\n    }\n\n    public SensorData(int volume, double occupancy, Date measurement_date, int lane_id, long id, double speed, int quality) {\n        this.volume = volume;\n        this.occupancy = occupancy;\n        this.measurement_date = measurement_date;\n        this.lane_id = lane_id;\n        this.id = id;\n        this.speed = speed;\n        this.quality = quality;\n    }\n\n    public int getVolume() {\n        return volume;\n    }\n\n    public void setVolume(int volume) {\n        this.volume = volume;\n    }\n\n    public double getOccupancy() {\n        return occupancy;\n    }\n\n    public void setOccupancy(double occupancy) {\n        this.occupancy = occupancy;\n    }\n\n    public Date getMeasurement_date() {\n        return measurement_date;\n    }\n\n    public void setMeasurement_date(Date measurement_date) {\n        this.measurement_date = measurement_date;\n    }\n\n    public int getLane_id() {\n        return lane_id;\n    }\n\n    public void setLane_id(int lane_id) {\n        this.lane_id = lane_id;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public double getSpeed() {\n        return speed;\n    }\n\n    public void setSpeed(double speed) {\n        this.speed = speed;\n    }\n\n    public int getQuality() {\n        return quality;\n    }\n\n    public void setQuality(int quality) {\n        this.quality = quality;\n    }\n\n    @Override\n    public String toString() {\n        return \"SensorData{\" +\n                \"volume=\" + volume +\n                \", occupancy=\" + occupancy +\n                \", measurement_date=\" + measurement_date +\n                \", lane_id=\" + lane_id +\n                \", id=\" + id +\n                \", speed=\" + speed +\n                \", quality=\" + quality +\n                '}';\n    }\n}\n```"
    },
    {
        "Example": 137,
        "Generated Java Code": "```java\npublic static void main(String[] args) {\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.toString()); // java.util.List\n        System.out.println(ScopeKindEnum.SK_INSTANCE.toString()); // java.lang.String\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.literalName()); // typeName\n        System.out.println(ScopeKindEnum.SK_INSTANCE.literalName()); // literalName\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.readResolve()); // ScopeKind\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.forName()); // java.util.List\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.refTypeName()); // typeName\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.hashCode()); // int\n        System.out.println(ScopeKindEnum.SK_CLASSIFIER.equals(ScopeKindEnum.SK_INSTANCE)); // boolean\n    }\n```"
    },
    {
        "Example": 138,
        "Generated Java Code": "```java\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\nimport java.awt.image.BufferedImage;\n\nimport org.xhtmlrenderer.pdf.ITextRenderer;\nimport org.xhtmlrenderer.swing.XHTMLPanel;\n\npublic class XhtmlRenderer {\n\n    private ITextRenderer renderer;\n    private XHTMLPanel panel;\n\n    public void setDocument(String html) {\n        renderer.setDocumentFromString(html);\n    }\n\n    public void layout() {\n        renderer.layout();\n    }\n\n    public BufferedImage renderToImageAutoSize() {\n        return renderer.getImage();\n    }\n\n    public void setSharedContext(SharedContext sharedContext) {\n        renderer.getSharedContext().setTextRendererFactory(sharedContext);\n    }\n\n    public Rectangle getMinimumSize() {\n        return panel.getMinimumSize();\n    }\n\n    public XHTMLPanel getPanel() {\n        return panel;\n    }\n\n    public SharedContext getSharedContext() {\n        return renderer.getSharedContext();\n    }\n\n    public void render(Dimension dim) {\n        renderer.render(dim.width, dim.height);\n    }\n\n    public BufferedImage renderToImage(Dimension dim) {\n        renderer.render(dim.width, dim.height);\n        return renderer.getImage();\n    }\n\n    private XhtmlRenderer(XHTMLPanel panel, ITextRenderer renderer) {\n        this.panel = panel;\n        this.renderer = renderer;\n    }\n\n    public static XhtmlRenderer create(String html) {\n        XHTMLPanel panel = new XHTMLPanel();\n        ITextRenderer renderer = new ITextRenderer();\n        XhtmlRenderer xhtmlRenderer = new XhtmlRenderer(panel, renderer);\n        xhtmlRenderer.setDocument(html);\n        return xhtmlRenderer;\n    }\n}\n```"
    },
    {
        "Example": 139,
        "Generated Java Code": ""
    },
    {
        "Example": 140,
        "Generated Java Code": "```java\npackage bank;\nimport java.util.*;\nimport java.text.*;\nimport java.io.*;\n\npublic class Bank {\n    private List<Customer> customers;\n\n    public Bank() {\n        customers = new ArrayList<Customer>();\n    }\n\n    public void addCustomer(Customer customer) {\n        customers.add(customer);\n    }\n\n    public String accountNumberSummary() {\n        double totalInterestPaid = 0;\n        StringBuilder sb = new StringBuilder();\n        DecimalFormat df = new DecimalFormat(\"#,###.##\");\n        for (Customer customer : customers) {\n            for (Account account : customer.getAccounts()) {\n                sb.append(String.format(\"%s: %s: %s\\n\",\n                        customer.getName(),\n                        account.getAccountNumber(),\n                        df.format(account.getInterestPaid())));\n                totalInterestPaid += account.getInterestPaid();\n            }\n        }\n        sb.append(String.format(\"Total interest paid: %s\\n\", df.format(totalInterestPaid)));\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.addCustomer(new Customer(\"John Doe\"));\n        bank.addCustomer(new Customer(\"Jane Doe\"));\n        bank.addCustomer(new Customer(\"John Smith\"));\n        bank.addCustomer(new Customer(\"Jane Smith\"));\n\n        bank.getCustomers().get(0).getAccounts().add(new Account(1000.0, 0.01));\n        bank.getCustomers().get(0).getAccounts().add(new Account(2000.0, 0.02));\n        bank.getCustomers().get(1).getAccounts().add(new Account(3000.0, 0.03));\n        bank.getCustomers().get(1).getAccounts().add(new Account(4000.0, 0.04));\n        bank.getCustomers().get(2).getAccounts().add(new Account(5000.0, 0.05));\n        bank.getCustomers().get(2).getAccounts().add(new Account(6000.0, 0.06));\n        bank.getCustomers().get(3).getAccounts().add(new Account(7000.0, 0.07));\n        bank.getCustomers().get(3).getAccounts().add(new Account(8000.0, 0.08));\n\n        System.out.println(bank.accountNumberSummary());\n    }\n}\n\nclass Customer {\n    private String name;\n    private List<Account> accounts;\n\n    public Customer(String name) {\n        this.name = name;\n        accounts = new ArrayList<Account>();\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<Account> getAccounts() {\n        return accounts;\n    }\n}\n\nclass Account {\n    private double balance;\n    private double interestRate;\n    private double interestPaid;\n\n    public Account(double balance, double interestRate) {\n        this.balance = balance;\n        this.interestRate = interestRate;\n        calculateInterestPaid();\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public double getInterestRate() {\n        return interestRate;\n    }\n\n    public double getInterestPaid() {\n        return interestPaid;\n    }\n\n    private void calculateInterestPaid() {\n        interestPaid = balance * interestRate;\n    }\n}\n```"
    },
    {
        "Example": 141,
        "Generated Java Code": "```java\nimport com.google.common.base.Preconditions;\nimport java.util.Collection;\n\n/**\n * A stream-friendly version of {@link Stats}. Does not support removing elements.\n *\n * <p>A Statistics object can be queried for various statistical properties of the data elements it has\n * seen. Currently, the following properties can be queried: minimum, maximum, mean, sum, variance, and\n * sample standard deviation.\n *\n * <p>Note that operations on a {@code Stats} object should not be interleaved with operations on a\n * different {@code Stats} object.\n */\npublic class Stats {\n\n  /** A builder for {@link Stats} objects. */\n  public static class Builder {\n    private final Stats stats = new Stats();\n\n    /**\n     * Adds the given value to this instance.\n     *\n     * @param value the value to add\n     * @return this {@link Builder}\n     * @throws IllegalStateException if this {@link Builder} is finished\n     */\n    public Builder add(double value) {\n      Preconditions.checkState(!stats.isFinished, \"Builder is finished\");\n      stats.add(value);\n      return this;\n    }\n\n    /**\n     * Adds all of the values from the specified {@link Iterable} to this instance.\n     *\n     * @param values the values to add\n     * @return this {@link Builder}\n     * @throws IllegalStateException if this {@link Builder} is finished\n     */\n    public Builder addAll(Iterable<Double> values) {\n      Preconditions.checkState(!stats.isFinished, \"Builder is finished\");\n      for (double value : values) {\n        stats.add(value);\n      }\n      return this;\n    }\n\n    /**\n     * Adds all of the values from the specified {@link Collection} to this instance.\n     *\n     * @param values the values to add\n     * @return this {@link Builder}\n     * @throws IllegalStateException if this {@link Builder} is finished\n     */\n    public Builder addAll(Collection<Double> values) {\n      return addAll(values.iterator());\n    }\n\n    /**\n     * Calls {@link #addAll(Iterable)} with the specified values.\n     *\n     * @param values the values to add\n     * @return this {@link Builder}\n     * @throws IllegalStateException if this {@link Builder} is finished\n     */\n    public Builder addAll(double... values) {\n      for (double value : values) {\n        add(value);\n      }\n      return this;\n    }\n\n    /**\n     * Builds the {@link Stats} object (to make it immutable). Interleaving operations on the returned\n     * object with operations on this {@link Builder} is not supported.\n     *\n     * @throws IllegalStateException if this {@link Builder} is finished\n     */\n    public Stats build() {\n      Preconditions.checkState(!stats.isFinished, \"Builder is finished\");\n      stats.isFinished = true;\n      return stats;\n    }\n  }\n\n  // Note: these fields are public to allow direct access for computation and to reduce allocations.\n\n  /**\n   * Indicates if the number of elements counted has been corrupted. This is necessary to support\n   * NaN/Infinity values.\n   */\n  protected boolean corruptionDetected;\n\n  /** True if this instance has been finished. */\n  protected boolean isFinished;\n\n  /** Number of elements added to this instance. This is not guaranteed to be the number of elements\n   * which had their properties queried. */\n  protected double count = 0;\n\n  /** Sum of all elements added to this instance. */\n  protected double sum = 0;\n\n  /** Sum of the squares of the difference between each element and the mean. */\n  protected double sumOfSquaresOfDeltas = 0;\n\n  /** Lowest value added to this instance. */\n  protected double min = Double.POSITIVE_INFINITY;\n\n  /** Highest value added to this instance. */\n  protected double max = Double.NEGATIVE_INFINITY;\n\n  /** The most recent mean. */\n  protected double mean = 0;\n\n  /** Builds a new instance of {@link Stats}. To avoid unnecessary allocations, build a {@link Builder}\n   * instead. */\n  private Stats() {}\n\n  /**\n   * Creates a new {@link Builder} for a {@link Stats} object.\n   *\n   * @return a new {@link Builder}\n   */\n  public static Builder build() {\n    return new Builder();\n  }\n\n  /**\n   * Adds the given value to this instance.\n   *\n   * @param value the value to add\n   * @throws IllegalStateException if this {@link Stats} is finished\n   */\n  public void add(double value) {\n    Preconditions.checkState(!isFinished, \"Stats is finished\");\n    if (!corruptionDetected) {\n      // Double.NEGATIVE_INFINITY and Double.POSITIVE_INFINITY are valid values.\n      if (count == 0 && Double.isNaN(value)) {\n        corruptionDetected = true;\n        return;\n      }\n      if (count == 0 || value < min) {\n        min = value;\n      }\n      if (value > max) {\n        max = value;\n      }\n      if (!Double.isNaN(value)) {\n        delta(value);\n      }\n      ++count;\n    }\n  }\n\n  /**\n   * Adds all of the values from the specified {@link Iterable} to this instance.\n   *\n   * @param values the values to add\n   * @throws IllegalStateException if this {@link Stats} is finished\n   */\n  public void addAll(Iterable<Double> values) {\n    for (double value : values) {\n      add(value);\n    }\n  }\n\n  /**\n   * Adds all of the values from the specified {@link Collection} to this instance.\n   *\n   * @param values the values to add\n   * @throws IllegalStateException if this {@link Stats} is finished\n   */\n  public void addAll(Collection<Double> values) {\n    addAll(values.iterator());\n  }\n\n  /**\n   * Calls {@link #addAll(Iterable)} with the specified values.\n   *\n   * @param values the values to add\n   * @throws IllegalStateException if this {@link Stats} is finished\n   */\n  public void addAll(double... values) {\n    for (double value : values) {\n      add(value);\n    }\n  }\n\n  /**\n   * Calculates the delta between the new mean and the current value.\n   *\n   * @param value the new value\n   */\n  protected void delta(double value) {\n    final double prevMean = mean;\n    mean = calculateNewMeanNonFinite((mean * count) + value, count + 1);\n    sumOfSquaresOfDeltas += ((value - prevMean) * (value - mean));\n  }\n\n  /**\n   * Calculates the new mean.\n   *\n   * @param newSum the new sum\n   * @param newCount the new count\n   * @return the new mean\n   */\n  protected double calculateNewMeanNonFinite(double newSum, double newCount) {\n    return newSum / newCount;\n  }\n\n  /**\n   * Returns the minimum value from this instance. The count must be non-zero. Non-finite values\n   * (NaN/Infinity) are handled as follows: if the dataset contains Double.#NaN then the result is\n   * Double.#NaN. If it contains only Double.#NEGATIVE_INFINITY and not Double.#NaN then the result is\n   * Double.#NEGATIVE_INFINITY. If it contains only Double.#POSITIVE_INFINITY and finite values then\n   * the result is the lowest finite value. If it contains only Double.#POSITIVE_INFINITY then the result\n   * is Double.#POSITIVE_INFINITY.\n   *\n   * @return the minimum value from this instance\n   * @throws IllegalStateException if this {@link Stats} is not finished or has no elements\n   */\n  public double min() {\n    Preconditions.checkState(isFinished, \"Stats is not finished\");\n    Preconditions.checkState(count > 0, \"Stats has no elements\");\n    return min;\n  }\n\n  /**\n   * Returns the maximum value from this instance. The count must be non-zero. Non-finite values\n   * (NaN/Infinity) are handled as follows: if the dataset contains Double.#NaN then the result is\n   * Double.#NaN. If it contains only Double.#NEGATIVE_INFINITY and not Double.#NaN then the result is\n   * Double.#NEGATIVE_INFINITY. If it contains only Double.#POSITIVE_INFINITY and finite values then\n   * the result is the highest finite value. If it contains only Double.#POSITIVE_INFINITY then the result\n   * is Double.#POSITIVE_INFINITY.\n   *\n   * @return the maximum value from this instance\n   * @throws IllegalStateException if this {@link Stats} is not finished or has no elements\n   */\n  public double max() {\n    Preconditions.checkState(isFinished, \"Stats is not finished\");\n    Preconditions.checkState("
    },
    {
        "Example": 142,
        "Generated Java Code": "```java\nimport static org.junit.Assert.*;\n\nimport javax.swing.JPanel;\n\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class DeviceTest {\n\tprivate static Device dev;\n\n\t@BeforeClass\n\tpublic static void setUpClass() {\n\t    dev = new Device(\"HD Pro Video Recorder\", \"com.example.device\", \"00:08:f6:f0:28:40\", \"camera\");\n\t}\n\t\n\t@Before\n\tpublic void setUp() {\n\t\tdev = new Device(\"HD Pro Video Recorder\", \"com.example.device\", \"00:08:f6:f0:28:40\", \"camera\");\n\t}\n\n\t@Test\n\tpublic void testGetType() {\n\t\tassertEquals(\"camera\", dev.getType());\n\t}\n\n\t@Test\n\tpublic void testGetDeviceName_0args() {\n\t\tassertEquals(\"HD Pro Video Recorder\", dev.getDeviceName());\n\t}\n\n\t@Test\n\tpublic void testAddToPane() {\n\t\tJPanel p = new JPanel();\n\t\tdev.addToPane(p);\n\t\tassertTrue(p.getComponentCount() > 0);\n\t}\n\n\t@Test\n\tpublic void testGetAddress() {\n\t\tassertEquals(\"00:08:f6:f0:28:40\", dev.getAddress());\n\t}\n\n\t@Test\n\tpublic void tearDownClass() {\n\t\t// NA\n\t}\n\n\t@Test\n\tpublic void tearDown() {\n\t\t// NA\n\t}\n\n\t@Test\n\tpublic void testGetDeviceNames() {\n\t\tdev.addDeviceName(\"de\", \"HD Pro Video Recorder Deutsch\");\n\t\tassertEquals(\"HD Pro Video Recorder Deutsch\", dev.getDeviceName(\"de\"));\n\t}\n\n\t@Test\n\tpublic void testAddCapabilities() {\n\t\t// NA\n\t}\n\n\t@Test\n\tpublic void testToString() {\n\t\tassertEquals(\"dev{name=\\\"HD Pro Video Recorder\\\", addr=\\\"00:08:f6:f0:28:40\\\", type=\\\"camera\\\"}\", dev.toString());\n\t}\n\n\t@Test\n\tpublic void testGetImgName() {\n\t\t// NA\n\t}\n\n\t@Test\n\tpublic void testAddCapability() {\n\t\tdev.addCapability(\"camera\", \"video\");\n\t\tassertTrue(dev.hasCapability(\"camera\", \"video\"));\n\t}\n\n\t@Test\n\tpublic void testGetDeviceName_Locale() {\n\t\tdev.addDeviceName(\"de\", \"HD Pro Video Recorder Deutsch\");\n\t\tassertEquals(\"HD Pro Video Recorder Deutsch\", dev.getDeviceName(\"de\"));\n\t}\n\n\t@Test\n\tpublic void testGetImage() {\n\t\t// NA\n\t}\n\n\t@Test\n\tpublic void testGetDeviceID() {\n\t\tassertEquals(\"com.example.device\", dev.getDeviceID());\n\t}\n\n\t@Test\n\tpublic void testGetCapabilityBlock() {\n\t\t// NA\n\t}\n\n\t@Test\n\tpublic void testGetCapabilities() {\n\t\tdev.addCapability(\"camera\", \"video\");\n\t\tassertEquals(1, dev.getCapabilities(\"camera\").size());\n\t}\n\n\t@Test\n\tpublic void testRemoveCapability() {\n\t\tdev.addCapability(\"camera\", \"video\");\n\t\tdev.removeCapability(\"camera\", \"video\");\n\t\tassertFalse(dev.hasCapability(\"camera\", \"video\"));\n\t}\n}\n```"
    },
    {
        "Example": 143,
        "Generated Java Code": "```java\npackage com.parrot.arsdk.arcontroller;\n\nimport android.util.Log;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class ARDroneFeatureGeneralMotorControl extends ARControllerFeatureBase {\n    private static final String TAG = \"ARDroneFeatureGeneralMotorControl\";\n    private static final long threadTimer = TimeUnit.MILLISECONDS.toNanos(100);\n    private static final GENERALMOTORCON_CMD downloadPresetList;\n    private static final GENERALMOTORCON_CMD manualControl;\n    private static final GENERALMOTORCON_CMD takeOff;\n    private static final GENERALMOTORCON_CMD landing;\n    private static final GENERALMOTORCON_CMD emergency;\n    private static final GENERALMOTORCON_CMD resetAllMotors;\n    private static final GENERALMOTORCON_CMD toggleCircleMovement = new GENERALMOTORCON_CMD(8);\n    private static final GENERALMOTORCON_CMD hover;\n    private static final GENERALMOTORCON_CMD forward;\n    private static final GENERALMOTORCON_CMD spinLeft;\n    private static final GENERALMOTORCON_CMD spinRight;\n    private static final GENERALMOTORCON_CMD backward;\n    private static final GENERALMOTORCON_CMD left;\n    private static final GENERALMOTORCON_CMD right;\n    private static final GENERALMOTORCON_CMD flip;\n    private static final GENERALMOTORCON_CMD spin90Left;\n    private static final GENERALMOTORCON_CMD spin90Right;\n    private static final GENERALMOTORCON_CMD playPreset;\n    private static final GENERALMOTORCON_CMD stopPreset;\n    private static final GENERALMOTORCON_CMD changePreset;\n\n    public static GENERALMOTORCON_CMD getDownloadPresetList() {\n        return downloadPresetList;\n    }\n\n    public static GENERALMOTORCON_CMD getManualControl() {\n        return manualControl;\n    }\n\n    public static GENERALMOTORCON_CMD getTakeOff() {\n        return takeOff;\n    }\n\n    public static GENERALMOTORCON_CMD getLanding() {\n        return landing;\n    }\n\n    public static GENERALMOTORCON_CMD getEmergency() {\n        return emergency;\n    }\n\n    public static GENERALMOTORCON_CMD getResetAllMotors() {\n        return resetAllMotors;\n    }\n\n    public static GENERALMOTORCON_CMD getToggleCircleMovement() {\n        return toggleCircleMovement;\n    }\n\n    public static GENERALMOTORCON_CMD getHover() {\n        return hover;\n    }\n\n    public static GENERALMOTORCON_CMD getForward() {\n        return forward;\n    }\n\n    public static GENERALMOTORCON_CMD getSpinLeft() {\n        return spinLeft;\n    }\n\n    public static GENERALMOTORCON_CMD getSpinRight() {\n        return spinRight;\n    }\n\n    public static GENERALMOTORCON_CMD getBackward() {\n        return backward;\n    }\n\n    public static GENERALMOTORCON_CMD getLeft() {\n        return left;\n    }\n\n    public static GENERALMOTORCON_CMD getRight() {\n        return right;\n    }\n\n    public static GENERALMOTORCON_CMD getFlip() {\n        return flip;\n    }\n\n    public static GENERALMOTORCON_CMD getSpin90Left() {\n        return spin90Left;\n    }\n\n    public static GENERALMOTORCON_CMD getSpin90Right() {\n        return spin90Right;\n    }\n\n    public static GENERALMOTORCON_CMD getPlayPreset() {\n        return playPreset;\n    }\n\n    public static GENERALMOTORCON_CMD getStopPreset() {\n        return stopPreset;\n    }\n\n    public static GENERALMOTORCON_CMD getChangePreset() {\n        return changePreset;\n    }\n\n    public interface Listener {\n        /**\n         * Motor commands status callback\n         *\n         * @param speed      Command speed (% of full speed 0-100)\n         * @param spinSpeed  Rotation speed (% of full speed 0-100)\n         * @param hoverTime  Hover duration (in ms)\n         * @param spinTime   Rotation duration (in ms)\n         * @param spin90Time Rotation duration (in ms)\n         * @param spin90Speed Rotation speed (% of full speed 0-100)\n         * @param spin90Dir  Rotation direction (1 for Left, 2 for Right)\n         * @param batLvl     Battery level (0-100)\n         */\n        void onCommandReceived(int speed, int spinSpeed, int hoverTime, int spinTime, int spin90Time, int spin90Speed, int spin90Dir, int batLvl);\n    }\n\n    private Listener listener;\n\n    public ARDroneFeatureGeneralMotorControl(ARDrone drone) {\n        super(drone);\n    }\n\n    /**\n     * Set a listener to be called when a command is received from the drone for General Motor Control.\n     *\n     * @param listener a {@link Listener} object\n     */\n    public void setListener(Listener listener) {\n        this.listener = listener;\n    }\n\n    private static void sendCommand(ARDroneFeatureGeneralMotorControl feature, GENERALMOTORCON_CMD cmd, int delay) throws IllegalArgumentException {\n        if (feature.isFeatureOpened()) {\n            try {\n                Thread.sleep(delay);\n            } catch (InterruptedException e) {\n                Log.e(TAG, \"Thread sleep failed during command execution.; Sending command: \" + cmd.getName());\n                return;\n            }\n            long startTime = System.nanoTime();\n            boolean received = false;\n            do {\n                received = ARCONTROLLER_ERROR_OK == feature.sendCommand(cmd);\n                if (received) {\n                    feature.waitForAck();\n                    break;\n                } else {\n                    Log.w(TAG, \"Failed to send command: \" + cmd.getName());\n                }\n            } while (System.nanoTime() - startTime < threadTimer);\n\n            if (!received) {\n                Log.e(TAG, \"Unable to send command: \" + cmd.getName());\n                return;\n            }\n            if (cmd == downloadPresetList) {\n                feature.drone.getARDroneFeatures().listAll();\n            }\n        }\n    }\n\n    private static void sendCommandWithDelay(ARDroneFeatureGeneralMotorControl feature, GENERALMOTORCON_CMD cmd) throws IllegalArgumentException {\n        sendCommand(feature, cmd, 0);\n    }\n\n    /**\n     * Download preset list (with auto-discovery)\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void downloadPresetList() throws IllegalArgumentException {\n        if (listener != null)\n            listener.onCommandReceived(0, 0, 0, 0, 0, 0, 0, getBatLvl());\n        sendCommandWithDelay(this, downloadPresetList);\n    }\n\n    /**\n     * Set alert or unlock the manual control motors\n     *\n     * @param alert true to alert, false to unlock\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void manualControl(boolean alert) throws IllegalArgumentException {\n        int flag = alert ? 1 : 0;\n        sendCommandWithDelay(this, new GENERALMOTORCON_CMD(manualControl, flag));\n    }\n\n    /**\n     * Take off if not already taken off\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void takeoff() throws IllegalArgumentException {\n        sendCommandWithDelay(this, takeOff);\n    }\n\n    /**\n     * Land if not already landed\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void landing() throws IllegalArgumentException {\n        sendCommandWithDelay(this, landing);\n    }\n\n    /**\n     * Emergency stop\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void emergency() throws IllegalArgumentException {\n        sendCommandWithDelay(this, emergency);\n    }\n\n    /**\n     * Reset all motors\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void resetAllMotors() throws IllegalArgumentException {\n        sendCommandWithDelay(this, resetAllMotors);\n    }\n\n    /**\n     * Toggle circle movement\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void toggleCircleMovement() throws IllegalArgumentException {\n        sendCommandWithDelay(this, toggleCircleMovement);\n    }\n\n    /**\n     * Do nothing\n     *\n     * @throws IllegalArgumentException if state is not READY\n     */\n    public void hover() throws IllegalArgumentException {\n        if (listener != null)\n            listener.onCommandReceived(0, 0, 0, 0, 0, 0, 0, getBatLvl());\n        sendCommandWithDelay(this, hover);\n    }\n\n    /**\n     * Move forward\n     *\n     * @param speed    Command speed (% of full speed 0-100)\n     * @param hoverTime Hover duration (in ms)\n     * @throws IllegalArgumentException if speed is < 0 or > 100, or state is not"
    },
    {
        "Example": 144,
        "Generated Java Code": ""
    },
    {
        "Example": 145,
        "Generated Java Code": "```java\nimport com.google.bitcoin.core.NetworkParameters;\nimport com.google.bitcoin.core.Sha256Hash;\nimport com.google.bitcoin.core.block.Block;\n\npublic interface NetworkParameters {\n\n    int addressHeader;\n    int INTERVAL;\n    byte[] alertSigningKey;\n    int[] acceptableAddressCodes;\n    long packetMagic;\n    int p2shHeader;\n    java.util.List<NetworkParameters> paramSet;\n    int PROTOCOL_VERSION;\n    Block genesisBlock;\n    BigInteger proofOfWorkLimit;\n    int subsidyDecreaseBlockCount;\n    int port;\n    BigInteger MAX_MONEY;\n    int TARGET_SPACING;\n    String[] dnsSeeds;\n    java.util.Map<Integer, Sha256Hash> checkpoints;\n    byte[] SATOSHI_KEY;\n    int interval;\n    String id;\n    int spendableCoinbaseDepth;\n    int dumpedPrivateKeyHeader;\n    int targetTimespan;\n    int TARGET_TIMESPAN;\n    int BIP16_ENFORCE_TIME;\n    NetworkParameters regTests;\n    boolean allowEmptyPeerChain;\n    int getDumpedPrivateKeyHeader();\n    NetworkParameters testNet2;\n    NetworkParameters testNet3;\n    NetworkParameters unitTests;\n    String getId();\n    int getAddressHeader();\n    int[] getAcceptableAddressCodes();\n    NetworkParameters prodNet;\n    NetworkParameters fromID(String id);\n    int getTargetTimespan();\n    String[] getDnsSeeds();\n    int hashCode();\n    int getSpendableCoinbaseDepth();\n    NetworkParameters testNet;\n    Sha256Hash calculateBlockPoWHash(Block block);\n    BigInteger getMaxMoney();\n    NetworkParameters getParamsFromAddressByte(byte b);\n    void registerParams(NetworkParameters params);\n    boolean isCheckpoint(Sha256Hash hash);\n    int getP2SHHeader();\n    int getInterval();\n    int getRetargetBlockCount();\n    int getRetargetBlockCount();\n    Block getGenesisBlock();\n    int getSubsidyDecreaseBlockCount();\n    Block createGenesis();\n    long getPacketMagic();\n    int getPort();\n    boolean equals(Object o);\n    boolean passesCheckpoint(Sha256Hash hash);\n    boolean isAcceptableAddressVersion(int version);\n    String getURIScheme();\n    BigInteger getProofOfWorkLimit();\n}\n```"
    },
    {
        "Example": 146,
        "Generated Java Code": "```java\n@Override\npublic String getType(Uri uri) {\n    SQLiteUriMatcher instance = getInstance();\n    synchronized (instance) {\n        String type = instance.getMimeType(uri);\n        if (type != null) {\n            return type;\n        }\n    }\n    SQLiteUriMatcher instance2 = getInstance();\n    int uriList = instance2.uriList();\n    for (int entryCount = instance2.getEntries().size() - 1; entryCount >= 0; entryCount--) {\n        Entry entry = instance2.getEntries().get(entryCount);\n        if (entry.isMatcher()) {\n            instance2.addMatcherEntry((E) entry);\n        } else {\n            instance2.addSQLBuilderCallback((E) entry);\n        }\n    }\n    for (int entryCount2 = instance2.getEntries().size() - 1; entryCount2 >= 0; entryCount2--) {\n        Entry entry2 = instance2.getEntries().get(entryCount2);\n        instance2.addRawSQL(entry2.getSQL());\n    }\n    SQLiteUriMatcher instance3 = getInstance();\n    synchronized (instance3) {\n        return instance3.getMimeType(uri);\n    }\n}\n```"
    },
    {
        "Example": 147,
        "Generated Java Code": "```java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class ByteOrder {\n\n  public static void writeShortLE(short x, OutputStream out) throws IOException {\n    out.write((byte) (x & 0xFF));\n    out.write((x >> 8) & 0xFF);\n  }\n\n  public static short readShortLE(InputStream in) throws IOException {\n    int b1 = in.read();\n    int b2 = in.read();\n    return (short) (b1 | (b2 << 8));\n  }\n\n  public static void writeIntLE(int x, OutputStream out) throws IOException {\n    out.write((byte) (x & 0xFF));\n    out.write((x >> 8) & 0xFF);\n    out.write((x >> 16) & 0xFF);\n    out.write((x >> 24) & 0xFF);\n  }\n\n  public static int readIntLE(InputStream in) throws IOException {\n    int b1 = in.read();\n    int b2 = in.read();\n    int b3 = in.read();\n    int b4 = in.read();\n    return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);\n  }\n\n  public static void writeLongLE(long x, OutputStream out) throws IOException {\n    out.write((byte) (x & 0xFF));\n    out.write((x >> 8) & 0xFF);\n    out.write((x >> 16) & 0xFF);\n    out.write((x >> 24) & 0xFF);\n    out.write((x >> 32) & 0xFF);\n    out.write((x >> 40) & 0xFF);\n    out.write((x >> 48) & 0xFF);\n    out.write((x >> 56) & 0xFF);\n  }\n\n  public static long readLongLE(InputStream in) throws IOException {\n    int b1 = in.read();\n    int b2 = in.read();\n    int b3 = in.read();\n    int b4 = in.read();\n    int b5 = in.read();\n    int b6 = in.read();\n    int b7 = in.read();\n    int b8 = in.read();\n    return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) |\n        (b8 << 56);\n  }\n}\n```"
    },
    {
        "Example": 148,
        "Generated Java Code": "```java\npublic class Householder {\n\n    private double[] v;\n    private double beta;\n\n    public Householder(double[] v) {\n        this.v = copy(v);\n        this.beta = 2.0 / innerProd(v, v);\n    }\n\n    public double mult(double[] x, double[] y) {\n        double innerProdA = innerProd(x, v);\n        double innerProdTranA = innerProd(y, v);\n        addOuterProd(y, v, beta * innerProdA);\n        addOuterProd(x, v, beta * innerProdTranA);\n\n        return 0;\n    }\n\n    public double rank1Update(double[] x, double[] y) {\n        double innerProdA = innerProd(x, v);\n        addOuterProd(y, v, beta * innerProdA);\n        return 0;\n    }\n\n    public double rank1Update(double[] x) {\n        return rank1Update(x, v);\n    }\n\n    public double innerProd(double[] x, double[] y) {\n        double innerProd = 0.0;\n        for (int i = 0; i < x.length; i++) {\n            innerProd += x[i] * y[i];\n        }\n\n        return innerProd;\n    }\n\n    public void outerProd(double[] x, double[] y, double[] z) {\n        for (int i = 0; i < x.length; i++) {\n            for (int j = 0; j < y.length; j++) {\n                z[i * y.length + j] = x[i] * y[j];\n            }\n        }\n    }\n\n    public void addOuterProd(double[] x, double[] y, double alpha) {\n        for (int i = 0; i < x.length; i++) {\n            for (int j = 0; j < y.length; j++) {\n                x[i * y.length + j] += alpha * y[i] * y[j];\n            }\n        }\n    }\n\n    private double[] copy(double[] v) {\n        double[] copy = new double[v.length];\n        for (int i = 0; i < v.length; i++) {\n            copy[i] = v[i];\n        }\n\n        return copy;\n    }\n}\n```"
    },
    {
        "Example": 149,
        "Generated Java Code": "```java  \n        try (TarOutputStream tos = new TarOutputStream(os, TarEntry.LENGTH_SIZE)) {\n          TarHelper.tar(\n              tos, path, basepath, null, lastSubmittedRevision, compressed, tar, LOGGER);\n          return true;\n        } catch (IOException ex) {\n          LOGGER.severe(\"Error occured during tar creation.\", ex);\n          return false;\n        }  \n```"
    },
    {
        "Example": 150,
        "Generated Java Code": "```java  \n    // Imports the Google Cloud client library\n\n    // Instantiates a client\n    try (CloudSpanner spanner = SpannerOptions.getDefaultInstance().getService()) {\n      // Creates a new instance of SQL query using builder pattern\n      Statement.Builder statement =\n          Statement.newBuilder(\n              String.format(\"SELECT SingerId, FirstName, LastName FROM SINGERS WHERE FIQL =\"\n                  + \" '%s'\", FIQL));\n      Statement query = statement.setLanguage(DEFAULT_LANGUAGE).build();\n      // Using try with resources ensures that the resultSet is closed later on\n      try (ResultSet resultSet = spanner.singleUse().executeQuery(query)) {\n        while (resultSet.next()) {\n          System.out.printf(\n              \"%d %s %s\\n\", resultSet.getLong(0), resultSet.getString(1), resultSet.getString(2));\n        }\n      }\n    }  \n```"
    },
    {
        "Example": 151,
        "Generated Java Code": "```java\n    void addAll(Set<T> set, Class<?> clazz) {\n      set.add(this.value);\n      if (clazz == null || clazz.isInstance(this.value)) {\n        set.addAll(getNodes());\n      }\n      for (PlaceHolder childPlaceHolder : this.children) {\n        childPlaceHolder.addAll(set, clazz);\n      }\n    }\n```"
    },
    {
        "Example": 152,
        "Generated Java Code": "```java\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Matrix;\nimport android.graphics.Paint;\nimport android.graphics.PointF;\nimport android.graphics.RectF;\nimport android.util.AttributeSet;\nimport android.view.GestureDetector;\nimport android.view.MotionEvent;\nimport android.view.ScaleGestureDetector;\nimport android.view.View;\n\nimport com.microsoft.handwriter.ihk.HwInfoKeys;\nimport com.microsoft.handwriter.ihk.HwInteractionHandler;\nimport com.microsoft.handwriter.ihk.HwInteractionListener;\nimport com.microsoft.handwriter.ihk.HwInteractionParameters;\nimport com.microsoft.handwriter.ihk.HwPenCommand;\nimport com.microsoft.handwriter.hwdoodling.R;\nimport com.microsoft.handwriter.hwdoodling.Page;\nimport com.microsoft.handwriter.hwdoodling.Strokes;\nimport com.microsoft.handwriter.hwdoodling.Transformation;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HandwriterView extends View implements HwInteractionListener {\n\n    private Paint mPaint;\n    private Strokes mStrokes;\n    private HwInteractionHandler mHwInteractionHandler;\n    private ScaleGestureDetector mScaleGestureDetector;\n    private GestureDetector mGestureDetector;\n    private Transformation mTransformation;\n    private RectF mRectF;\n    private Rect mRect;\n    private boolean mOnlyPenInput;\n    private boolean mDrawPinchZoomPreview;\n    private boolean mDoubleClickPossible;\n    private boolean mDoubleClickWhileWritingDisabled;\n    private float mScaledPenThickness;\n    private boolean mUseForWriting;\n    private int mMoveGestureMinDistance;\n    private float mPinchZoomScaleFactor;\n    private HwPenCommand mHwPenCommand;\n    private float mLastX = 0;\n    private float mLastY = 0;\n    private float mDownX = 0;\n    private float mDownY = 0;\n    private long mDownTime = 0;\n    private boolean mStartFromOutside;\n    private boolean mDoubleClickStarted;\n    private boolean mPinchZoomed;\n    private Page mPage;\n\n    private HwInteractionParameters mHwParameters;\n\n    public HandwriterView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        initHwInteraction();\n        initScales();\n        initPaints();\n        initGestureDetector();\n    }\n\n    @Override\n    public void onDraw(Canvas canvas) {\n        mRectF = new RectF(0, 0, getWidth(), getHeight());\n        mRect = new Rect(0, 0, getWidth(), getHeight());\n        canvas.drawColor(Color.WHITE);\n        canvas.drawRect(mRectF, mPaint);\n        mPage.onDraw(canvas, mTransformation);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        setMeasuredDimension(\n                MeasureSpec.getSize(widthMeasureSpec),\n                MeasureSpec.getSize(heightMeasureSpec));\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        super.onTouchEvent(event);\n\n        float x = event.getX();\n        float y = event.getY();\n\n        // Handle pinch to zoom\n        mScaleGestureDetector.onTouchEvent(event);\n\n        // Handle double tap to reset\n        mGestureDetector.onTouchEvent(event);\n\n        if (mPinchZoomScaleFactor != 1) {\n            if (mDrawPinchZoomPreview) {\n                drawPinchZoomPreview();\n            }\n            return true;\n        }\n\n        if (!mUseForWriting) {\n            return true;\n        }\n\n        if (!mOnlyPenInput) {\n            mHwInteractionHandler.processTouchEvent(event);\n        } else {\n            long timeDiff = event.getEventTime() - mDownTime;\n            handleFingerTouch(event, timeDiff, x, y);\n            mDownX = x;\n            mDownY = y;\n            mLastX = x;\n            mLastY = y;\n        }\n        return true;\n    }\n\n    @Override\n    public void onClick(HwPenCommand command) {\n    }\n\n    @Override\n    public void onStrokeStart(HwPenCommand command, float touchX, float touchY) {\n    }\n\n    @Override\n    public void onStrokeUpdate(HwPenCommand command, float touchX, float touchY, float touchWidth) {\n        float x = command.getTouchX() * mTransformation.mScaleFactor;\n        float y = command.getTouchY() * mTransformation.mScaleFactor;\n        if (mHwPenCommand != null && mHwPenCommand.getPenId() == command.getPenId()) {\n            mStrokes.drawLine(x, y, touchWidth * mScaledPenThickness);\n        }\n        redraw();\n    }\n\n    @Override\n    public void onStrokeEnd(HwPenCommand command, float touchX, float touchY, float touchWidth) {\n        mStrokes.finalizeWithErrorCheck();\n        redraw();\n    }\n\n    @Override\n    public void onPump(HwPenCommand command, float tiltX, float tiltY, float twist) {\n    }\n\n    @Override\n    public void onAutoCorrect(HwPenCommand command) {\n        mStrokes.refresh();\n        redraw();\n    }\n\n    @Override\n    public void onChangePage(HwPenCommand command, byte pageNo) {\n        mPage.clearStrokes();\n        redraw();\n    }\n\n    @Override\n    public void onZoom(HwPenCommand command, float zoomFactor) {\n    }\n\n    @Override\n    public void onDestroy() {\n        mHwInteractionHandler.destroy();\n    }\n\n    private void initHwInteraction() {\n        mHwParameters = new HwInteractionParameters();\n        mHwParameters.setContext(getContext());\n        mHwParameters.setPageManager(new PageManager(getContext()));\n        mHwParameters.setListener(this);\n        mHwInteractionHandler = new HwInteractionHandler(mHwParameters);\n    }\n\n    private void initScales() {\n        mScaleGestureDetector = new ScaleGestureDetector(getContext(), new PinchZoomListener());\n        mGestureDetector = new GestureDetector(getContext(), new GestureListener());\n    }\n\n    private void initPaints() {\n        mPaint = new Paint();\n        mPaint.setColor(Color.BLACK);\n        mPaint.setStyle(Paint.Style.FILL);\n    }\n\n    private void initGestureDetector() {\n        mGestureDetector = new GestureDetector(\n                getContext(), new GestureDetector.SimpleOnGestureListener() {\n                    @Override\n                    public boolean onDoubleTap(MotionEvent e) {\n                        if (!mDoubleClickWhileWritingDisabled) {\n                            if (getPage().getNumStrokes() == 0) {\n                                // The page is empty, reset pinch zoom instead\n                                resetPinchZoom();\n                            } else {\n                                // Reset the page\n                                redraw(true);\n                            }\n                        }\n                        return false;\n                    }\n\n                    @Override\n                    public boolean onDown(MotionEvent e) {\n                        mDoubleClickPossible = true;\n                        return false;\n                    }\n\n                    @Override\n                    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\n                        if (mDoubleClickPossible &&\n                                isQuickEnough(e1, e2, velocityX, velocityY) &&\n                                isFarEnough(e1, e2) &&\n                                moveGestureWhileWriting()) {\n                            mDoubleClickPossible = false;\n                            movePage(velocityX, velocityY);\n                            return true;\n                        }\n                        return false;\n                    }\n\n                    @Override\n                    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n                        if (!moveGestureWhileWriting()) {\n                            return false;\n                        }\n                        mDoubleClickPossible = false;\n                        movePage(-distanceX, -distanceY);\n                        return true;\n                    }\n                });\n    }\n\n    private void handleFingerTouch(MotionEvent event, long timeDiff, float x, float y) {\n        int action = event.getActionMasked();\n        boolean isStartOfStroke = false;\n        boolean isEndOfStroke = false;\n\n        switch (action) {\n            case MotionEvent.ACTION_DOWN:\n                mDownTime = event.getEventTime();\n                mStartFromOutside = !mRect.contains((int) x, (int) y);\n                if (mStartFromOutside) {\n                    x = mDownX = mLastX = mRect.centerX();\n                    y = mDownY = mLastY = mRect.centerY();\n                }\n                if (!mDoubleClickStarted && timeDiff <= ViewConfiguration.getDoubleTapTimeout() && mDoubleClickPossible && !mPinchZoomed) {\n                    mDoubleClickStarted = true;\n                } else {\n                    mDoubleClickStarted = false;\n                    mHwPenCommand = createPenCommand(x, y, event);\n                    isStartOfStroke = true;\n                }\n"
    },
    {
        "Example": 153,
        "Generated Java Code": "```java\nimport com.google.api.client.auth.oauth2.ClientCredentials;\nimport com.google.api.client.auth.oauth2.ClientParametersAuthentication;\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.auth.oauth2.CredentialStore;\nimport com.google.api.client.auth.oauth2.TokenResponse;\nimport com.google.api.client.extensions.auth.helpers.CredentialFactory;\nimport com.google.api.client.extensions.guava.GuavaScopes;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.client.util.store.FileDataStoreFactory;\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\nimport java.util.Collection;\n\npublic class OAuth2ClientCredentials {\n\n  private static final String APPLICATION_NAME = \"Google OAuth2\";\n  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();\n  private static final String TOKENS_DIRECTORY_PATH = \"tokens\";\n\n  /**\n   * Global instance of the scopes required by this application. If modifying these\n   * scopes, delete your previously saved tokens/ folder.\n   */\n  private static final Collection<String> SCOPES =\n      GuavaScopes.newArrayList(\"https://www.googleapis.com/auth/calendar\");\n  private static final String CREDENTIALS_FILE_PATH = \"/credentials.json\";\n\n  /**\n   * Creates an authorized Credential object.\n   *\n   * @param HTTP_TRANSPORT The network HTTP Transport.\n   * @return An authorized Credential object.\n   * @throws IOException If the credentials.json file cannot be found.\n   */\n  public static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT)\n      throws IOException {\n\n    // Load client secrets.\n    GoogleClientSecrets clientSecrets =\n        GoogleClientSecrets.load(JSON_FACTORY, OAuth2ClientCredentials.class.getResourceAsStream(CREDENTIALS_FILE_PATH));\n\n    // Build flow and trigger user authorization request.\n    GoogleAuthorizationCodeFlow flow =\n        new GoogleAuthorizationCodeFlow.Builder(\n                HTTP_TRANSPORT,\n                JSON_FACTORY,\n                clientSecrets,\n                SCOPES)\n            .setDataStoreFactory(\n                new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))\n            .setAccessType(\"offline\")\n            .build();\n    LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();\n    return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"user\");\n  }\n\n  public static void main(String... args) throws IOException, GeneralSecurityException {\n    // Build a new authorized API client service.\n    final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n    Credential credential = getCredentials(HTTP_TRANSPORT);\n    // Create a credential factory for the client ID and secret.\n    ClientCredentials clientCredentials =\n        new ClientCredentials(\n            clientSecrets.getDetails().getClientId(), clientSecrets.getDetails().getClientSecret());\n    // Create the client authentication based on the credential factory.\n    ClientParametersAuthentication clientParametersAuthentication =\n        new ClientParametersAuthentication(clientCredentials);\n    // Set up authorization code flow.\n    final GoogleAuthorizationCodeFlow flow =\n        new GoogleAuthorizationCodeFlow.Builder(\n                HTTP_TRANSPORT,\n                JSON_FACTORY,\n                clientSecrets,\n                SCOPES)\n            .setCredentialStore(new CredentialStore() {\n              public void store(String key, Credential credential) throws IOException {}\n\n              public Credential load(String key) throws IOException {\n                return credential;\n              }\n\n              public void delete(String key, Credential credential) throws IOException {}\n\n              public boolean containsKey(String key) throws IOException {\n                return false;\n              }\n\n              public Collection<String> keySet() throws IOException {\n                return null;\n              }\n            })\n            .build();\n    // Create the credential factory for storing credentials.\n    CredentialFactory credentialFactory =\n        new CredentialFactory(flow, clientParametersAuthentication) {\n          @Override\n          public Credential createAndStoreCredentialsFromResponse(\n              TokenResponse tokenResponse, Credential credential) throws IOException {\n            return flow.createAndStoreCredential(\n                tokenResponse, ClientOAuth2Credentials.CLIENT_ID, credential);\n          }\n        };\n    // Obtain token from credential flow.\n    Credential refreshedCredential = flow.refreshAccessToken();\n  }\n}\n```"
    },
    {
        "Example": 154,
        "Generated Java Code": "```java\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\nimport org.jivesoftware.smack.XMPPConnection;\nimport org.jivesoftware.smack.XMPPException;\nimport org.jivesoftware.smack.packet.Presence;\nimport org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration;\nimport org.jivesoftware.smackx.ping.PingFailedListener;\nimport org.jivesoftware.smackx.ping.PingManager;\nimport org.jivesoftware.smackx.pubsub.PubSubManager;\nimport org.jivesoftware.smackx.pubsub.Topic;\nimport org.jivesoftware.smackx.pubsub.VenueManager;\nimport org.jivesoftware.smackx.pubsub.util.SubscriberEventListener;\nimport org.jivesoftware.smackx.pubsub.util.SubscriptionEventListener;\n\nimport com.google.common.collect.Maps;\nimport com.google.common.util.concurrent.ThreadFactoryBuilder;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport com.google.inject.name.Named;\n\nimport net.shibboleth.ext.spring.service.BaseSpringService;\nimport net.shibboleth.utilities.java.support.component.ComponentSupport;\nimport net.shibboleth.utilities.java.support.logic.ThrowableProxy;\nimport net.shibboleth.utilities.java.support.primitive.DeprecationSupport;\nimport net.shibboleth.utilities.java.support.primitive.StringSupport;\n\n/**\n * {@link net.shibboleth.utilities.java.support.service.ServiceableService} that manages XMPP connections.\n * \n * <p>This service has been deprecated in favor of\n * {@link net.shibboleth.idp.xmpp.impl.XMPPPingFlushService}, which provides more sophisticated xmpp connection\n * management and pinging.</p>\n *  \n * @since 3.4.0\n */\n@Deprecated\n@Singleton\npublic class XMPPService extends BaseSpringService<Map<String, XMPPConnection>> {\n\n    /** Configuration data instance. */\n    @Inject\n    private ConfigurationContext configurationContext;\n\n    /** XMPP connection instances. */\n    private final Map<String, XMPPConnection> xmppConnections = Maps.newHashMap();\n\n    /**\n     * Constructor.\n     *\n     * @throws XMPPException if there is a problem in creating an XMPP connection\n     */\n    public XMPPService() throws XMPPException {\n        super(\"XMPP Service\");\n    }\n\n    /**\n     * Get the configuration context.\n     *\n     * @return {@link ConfigurationContext}\n     */\n    public final ConfigurationContext getConfigurationContext() {\n        return configurationContext;\n    }\n\n    /**\n     * Get all XMPP connections.\n     *\n     * @return Map of connections\n     */\n    public final Map<String, XMPPConnection> getXmppConnections() {\n        return xmppConnections;\n    }\n\n    /** {@inheritDoc} */\n    @Override protected void doLoad() throws Throwable {\n        ComponentSupport.ifInitializedThrowUnmodifiabledError(configurationContext, \"Configuration\");\n        xmppConnections.clear();\n\n        try {\n            initializeConnectionFactories();\n        } catch (final XMPPException e) {\n            throw new ThrowableProxy(e);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override protected void doUnload() throws Throwable {\n        stop();\n        ComponentSupport.ifNotInitializedThrowUninitializedError(xmppConnections, \"XMPP Connection Map\");\n        xmppConnections.clear();\n    }\n\n    /**\n     * Initializes the XMPP connection factories.\n     *\n     * @throws XMPPException if there is a problem initializing a connection factory\n     */\n    private void initializeConnectionFactories() throws XMPPException {\n        final Set<XMPPServerCredentials> serverCredentialsList =\n                configurationContext.getServerCredentialsList();\n\n        if (serverCredentialsList == null || serverCredentialsList.isEmpty()) {\n            logger.warn(\"No XMPP servers registered, skipping initialization\");\n            return;\n        }\n\n        for (final XMPPServerCredentials serverCredentials : serverCredentialsList) {\n            final XMPPConnection connection = createConnection(serverCredentials);\n            connection.connect();\n            connection.login(serverCredentials.getUsername(), serverCredentials.getPassword());\n            updatePresence(connection);\n            addTopicListener(connection);\n            attachPingManager(connection);\n            xmppConnections.put(serverCredentials.getServiceId(), connection);\n            logger.info(\"Successfully initialized XMPP connection to {}.\", serverCredentials.getServiceId());\n        }\n    }\n\n    /**\n     * Starts.\n     *\n     * @throws Throwable if there is a problem starting the service\n     */\n    public void start() throws Throwable {\n        log.debug(\"Starting XMPP Service\");\n        if (!isInitialized()) {\n            log.debug(\"XMPP Service is not initialized. Calling load\");\n            load();\n        }\n    }\n\n    /**\n     * Stops the listener and disconnects from XMPP servers.\n     *\n     * @throws Throwable if there is a problem starting the service\n     */\n    public void stop() throws Throwable {\n        log.debug(\"Stopping XMPP Service\");\n        if (!xmppConnections.isEmpty()) {\n            for (final XMPPConnection conn : xmppConnections.values()) {\n                detachPingManager(conn);\n                conn.disconnect();\n            }\n            xmppConnections.clear();\n        }\n        unload();\n    }\n\n    /**\n     * Creates XMPP connection.\n     *\n     * @param serverCredentials server credentials to use for the connection\n     * @return connection\n     * @throws XMPPException if there is a problem creating the connection\n     */\n    private XMPPConnection createConnection(final XMPPServerCredentials serverCredentials) throws XMPPException {\n        final XMPPTCPConnectionConfiguration config =\n                XMPPTCPConnectionConfiguration.builder()\n                        .setServiceName(serverCredentials.getServiceId())\n                        .setHost(serverCredentials.getXmppServerAddress())\n                        .setPort(serverCredentials.getXmppServerPort())\n                        .setSecurityMode(serverCredentials.getSecurityMode())\n                        .setConnectTimeout(configurationContext.getXmppConnectTimeout())\n                        .setSendTimeout(configurationContext.getXmppSendTimeout())\n                        .build();\n\n        return new XMPPConnection(config);\n    }\n\n    /**\n     * Adds the ping manager to the XMPP connection.\n     *\n     * @param conn xmpp connection\n     */\n    private void attachPingManager(final XMPPConnection conn) {\n        final PingManager pingManager = PingManager.getInstanceFor(conn);\n        final PingFailedListener listener = new PingFailedListener() {\n            @Override public void pingFailed() {\n                try {\n                    logger.error(\"Ping to '{}' failed. Attempting reconnect.\",\n                            conn.getServiceName());\n                    conn.disconnect();\n                    conn.connect();\n                    conn.login(configurationContext.getUsername(), configurationContext.getPasswordFor(\n                            conn.getServiceName()));\n                    attachPingManager(conn);\n                } catch (final XMPPException e) {\n                    logger.error(\"Failed ping reconnect to '{}'.\", conn.getServiceName(), e);\n                }\n            }\n        };\n        pingManager.registerPingFailedListener(listener);\n        pingManager.setPingInterval(configurationContext.getXmppPingInterval());\n        pingManager.start();\n    }\n\n    /**\n     * Removes the ping manager from the XMPP connection.\n     *\n     * @param conn xmpp connection\n     */\n    private void detachPingManager(final XMPPConnection conn) {\n        final PingManager pingManager = PingManager.getInstanceFor(conn);\n        pingManager.stop();\n    }\n\n    /**\n     * Adds a topic listener for the provided connection.\n     *\n     * @param conn xmpp connection\n     */\n    private void addTopicListener(final XMPPConnection conn) {\n        @SuppressWarnings(\"unchecked\")\n        final VenueManager venueManager = new VenueManager(conn);\n        final PubSubManager manager = new PubSubManager(conn);\n        final String topicName = configurationContext.getXmppTopic();\n        if (StringSupport.isNullOrEmpty(topicName)) {\n            logger.warn(\"No XMPP topic configured. Skipping topic listener.\");\n            return;\n        }\n        try {\n            final Topic topic = manager.getTopic(topicName);\n            final SubscriberEventListener<SubscriptionEventListener> listener =\n                    new SubscriberEventListener<SubscriptionEventListener>() {\n                        @Override\n                        protected void handleMessage(final String messageId, final SubscriptionEventListener listener,\n                                final String subId, final Topic topic, final String message) {\n                            logger.debug(\"Received topic message {} in subscription {}\", messageId, subId);\n                        }\n                    };\n            topic.subscribe(listener);\n            logger.info(\"Added topic listener to"
    },
    {
        "Example": 155,
        "Generated Java Code": "```java\npublic class MapUtils {\n\n    private MapUtils() {\n    }\n\n    /**\n     * Retrieve a String value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The String value.\n     * @throws JSONException If the item does not contain a String value.\n     */\n    public static String getString(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (String) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof String) {\n            return (String) pItem;\n        }\n        throw new JSONException(\"Item does not contain a String value.\");\n    }\n\n    /**\n     * Retrieve a JSONObject value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The JSONObject value.\n     * @throws JSONException If the item does not contain a JSONObject value.\n     */\n    public static JSONObject getObject(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (JSONObject) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof JSONObject) {\n            return (JSONObject) pItem;\n        }\n        throw new JSONException(\"Item does not contain a JSONObject value.\");\n    }\n\n    /**\n     * Retrieve a boolean value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The boolean value.\n     * @throws JSONException If the item does not contain a boolean value.\n     */\n    public static boolean getBoolean(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (boolean) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof Boolean) {\n            return (boolean) pItem;\n        }\n        throw new JSONException(\"Item does not contain a boolean value.\");\n    }\n\n    /**\n     * Retrieve a double value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The double value.\n     * @throws JSONException If the item does not contain a double value.\n     */\n    public static double getDouble(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (double) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof Double) {\n            return (double) pItem;\n        }\n        throw new JSONException(\"Item does not contain a double value.\");\n    }\n\n    /**\n     * Retrieve a float value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The float value.\n     * @throws JSONException If the item does not contain a float value.\n     */\n    public static float getFloat(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (float) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof Float) {\n            return (float) pItem;\n        }\n        throw new JSONException(\"Item does not contain a float value.\");\n    }\n\n    /**\n     * Retrieve a long value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The long value.\n     * @throws JSONException If the item does not contain a long value.\n     */\n    public static long getLong(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (long) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof Long) {\n            return (long) pItem;\n        }\n        throw new JSONException(\"Item does not contain a long value.\");\n    }\n\n    /**\n     * Retrieve an int value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The int value.\n     * @throws JSONException If the item does not contain an int value.\n     */\n    public static int getInt(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (int) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof Integer) {\n            return (int) pItem;\n        }\n        throw new JSONException(\"Item does not contain an int value.\");\n    }\n\n    /**\n     * Retrieve a char value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The char value.\n     * @throws JSONException If the item does not contain a char value.\n     */\n    public static char getChar(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (char) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof Character) {\n            return (char) pItem;\n        }\n        throw new JSONException(\"Item does not contain a char value.\");\n    }\n\n    /**\n     * Retrieve an Object value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The Object value.\n     * @throws JSONException If the item does not contain an Object value.\n     */\n    public static Object get(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof JSONObject) {\n            return pItem;\n        }\n        throw new JSONException(\"Item does not contain an Object value.\");\n    }\n\n    /**\n     * Retrieve a JSONArray value from an arbitrary data source.\n     *\n     * @param pItem The item to get the value from.\n     * @return The JSONArray value.\n     * @throws JSONException If the item does not contain a JSONArray value.\n     */\n    public static JSONArray getArray(Object pItem) throws JSONException {\n        Assert.notNull(pItem);\n        if (pItem instanceof Map) {\n            return (JSONArray) ((Map) pItem).get(\"value\");\n        } else if (pItem instanceof JSONArray) {\n            return (JSONArray) pItem;\n        }\n        throw new JSONException(\"Item does not contain a JSONArray value.\");\n    }\n\n    /**\n     * Returns whether the given object contains the specified key.\n     *\n     * @param pItem The object to check.\n     * @param pKey  The key to check for.\n     * @return True if the key is present, false otherwise.\n     */\n    public static boolean contains(Object pItem, String pKey) {\n        Assert.notNull(pItem);\n        Assert.notNull(pKey);\n        if (pItem instanceof Map) {\n            return ((Map) pItem).containsKey(pKey);\n        } else if (pItem instanceof JSONObject) {\n            return ((JSONObject) pItem).has(pKey);\n        }\n        return false;\n    }\n\n    /**\n     * Put a value into a map.\n     *\n     * @param pMap  The map to put the value into.\n     * @param pKey  The key to use.\n     * @param pItem The value to put.\n     */\n    public static void put(Map<String, Object> pMap, String pKey, Object pItem) {\n        Assert.notNull(pMap);\n        Assert.notNull(pKey);\n        Assert.notNull(pItem);\n        pMap.put(pKey, wrap(pItem));\n    }\n\n    /**\n     * Put the contents of the specified map into the given map.\n     *\n     * @param pMap1 The map to put the contents into.\n     * @param pMap2 The map to get the contents from.\n     */\n    public static void putAll(Map<String, Object> pMap1, Map pMap2) {\n        Assert.notNull(pMap1);\n        Assert.notNull(pMap2);\n        for (Object key : pMap2.keySet()) {\n            pMap1.put((String) key, wrap(pMap2.get(key)));\n        }\n    }\n\n    /**\n     * Put the contents of the specified JSONObject into the given map.\n     *\n     * @param pMap1   The map to put the contents into.\n     * @param pObject The JSONObject to get the contents from.\n     */\n    public static void putAll(Map<String, Object> pMap1, JSONObject pObject) {\n"
    },
    {
        "Example": 156,
        "Generated Java Code": "```java\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine.Info;\nimport javax.sound.sampled.LineListener;\nimport javax.sound.sampled.SourceDataLine;\n\npublic class PcmPlayer {\n\n  private static final int AUDIO_BUFFER_SIZE = 1024 * 256;\n  private static final AtomicBoolean RUNNING = new AtomicBoolean(false);\n  private static SourceDataLine line;\n  private static String filePath;\n  private static Thread playerThread;\n  private static FLACDecoder decoder;\n  private static AudioFormat fmt;\n  private static Info info;\n\n  public static void main(String[] args) {\n    filePath = \"path/to/your/audio.flac\";\n    play();\n  }\n\n  public static void play() {\n    try {\n      processStreamInfo();\n      playerThread = new Thread(PcmPlayer::run);\n      playerThread.start();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n  public static void processStreamInfo() throws Exception {\n    decoder = FLACDecoder.readMetadata(new FileInputStream(filePath));\n    fmt = decoder.format();\n    info = new Info(SourceDataLine.class, fmt);\n  }\n\n  public static void stop() {\n    RUNNING.set(false);\n    if (line != null) {\n      line.stop();\n      line.close();\n    }\n    if (playerThread != null) {\n      playerThread.interrupt();\n    }\n  }\n\n  public static void update(byte[] decoded) {\n    line.write(decoded, 0, decoded.length);\n  }\n\n  public static void run() {\n    try {\n      line = (SourceDataLine) AudioSystem.getLine(info);\n      line.open(fmt, AUDIO_BUFFER_SIZE);\n      line.start();\n      Lock lock = new ReentrantLock();\n      Condition condition = lock.newCondition();\n      int bytesRead = 0;\n      byte[] decoded;\n      RUNNING.set(true);\n      while (bytesRead >= 0 && RUNNING.get()) {\n        decoded = decoder.decodeNextFrame();\n        lock.lock();\n        try {\n          update(decoded);\n          condition.await(100, TimeUnit.MILLISECONDS);\n        } catch (InterruptedException e) {\n          System.out.println(\"Interruption of line thread\");\n        } finally {\n          lock.unlock();\n        }\n      }\n      stop();\n    } catch (Exception e) {\n      e.printStackTrace();\n      stop();\n    }\n  }\n\n  public static void removeListener(LineListener listener) {\n    line.removeLineListener(listener);\n  }\n\n  public static void decode() {\n    decoder.decodeNextFrame();\n  }\n\n  public static void addListener(LineListener listener) {\n    line.addLineListener(listener);\n  }\n}\n```"
    },
    {
        "Example": 157,
        "Generated Java Code": "```java  \n    public int getOriginalSizeInBytes() {\n      return (int) encode.length;\n    }  \n```"
    },
    {
        "Example": 158,
        "Generated Java Code": "```java\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.base.Preconditions;\nimport com.google.common.io.ByteSink;\nimport com.google.common.io.ByteSource;\nimport com.google.common.io.Files;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.CodedInputStream;\nimport com.google.protobuf.CodedOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.net.InetSocketAddress;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SocketChannel;\nimport java.util.Arrays;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.bitcoinj.core.BloomFilter;\nimport org.bitcoinj.core.GetDataMessage;\nimport org.bitcoinj.core.GetDataMessage.FilterType;\nimport org.bitcoinj.core.Message;\nimport org.bitcoinj.core.MessageSerializer;\nimport org.bitcoinj.core.NetworkParameters;\nimport org.bitcoinj.core.ProtocolException;\nimport org.bitcoinj.core.ProtocolVersion;\nimport org.bitcoinj.core.Sha256Hash;\nimport org.bitcoinj.core.Transaction;\nimport org.bitcoinj.core.VerificationException;\nimport org.bitcoinj.core.listeners.AbstractPeerConnectionEventListener;\nimport org.bitcoinj.core.listeners.OnTransactionBroadcastListener;\nimport org.bitcoinj.core.listeners.PeerConnectionEventListener;\nimport org.bitcoinj.script.Script;\nimport org.bitcoinj.utils.BlockFile;\nimport org.bitcoinj.utils.BriefLogFormatter;\nimport org.bitcoinj.utils.ListenerRegistration;\nimport org.bitcoinj.utils.Threading;\nimport org.bitcoinj.wallet.Protos.PeerAddress;\nimport org.bitcoinj.wallet.Protos.TransactionInput;\nimport org.bitcoinj.wallet.Protos.TransactionOutput;\nimport org.slf4j.LoggerFactory;\n\n/**\n * <p>Functionality that does not depend on any particular implementation of {@link Message}, such as message parsing and checksumming.\n * The static methods defined in this class are useful for working with the Bitcoin protocol regardless of whether you're working\n * with block chain downloaded from the internet, creating transactions, or communicating with other nodes.</p>\n *\n * <p>To Parse a message you must:\n * <ol>\n * <li>Use {@link #seekPastMagicBytes(InputStream)} to read past the magic bytes header if present.</li>\n * <li>Use {@link #deserializeHeader(InputStream)} or {@link #deserializeHeader(ByteBuffer)} to deserialize the header.</li>\n * <li>Use {@link #deserializePayload(byte[], Message)} or {@link #deserializePayload(ByteBuffer, Message)} to deserialize the payload.</li>\n * </ol></p>\n *\n * <p>To calculate the checksum of a message you must:\n * <li>Use {@link #seekPastMagicBytes(InputStream)} to read past the magic bytes header if present.</li>\n * <li>Use {@link #calculateChecksum(InputStream)} or {@link #calculateChecksum(byte[])} or {@link #calculateChecksum(ByteBuffer)} to calculate the checksum.</li>\n * </ol></p>\n *\n * <p>Note that magic bytes are only found in messages that were written by a peer on the wire. If you are reading\n * blocks or other messages from disk, you should <b>not</b> use seekPastMagicBytes.</p>\n */\npublic class MessageSerializer {\n    private static final org.slf4j.Logger log = LoggerFactory.getLogger(MessageSerializer.class);\n\n    private final NetworkParameters params;\n\n    /** The size of the header in bytes. */\n    public static final int HEADER_LENGTH = 24;\n    /** The size of the checksum in bytes. */\n    public static final int CHECKSUM_LENGTH = 4;\n    /** The maximum length of a message in bytes. */\n    public static final int MAX_MESSAGE_LENGTH = MAX_SIZE_MESSAGE_OVERHEAD + MAX_SIZE_MESSAGE_PAYLOAD;\n    /** The max message payload size a message can potentially have. */\n    public static final int MAX_SIZE_MESSAGE_PAYLOAD = (int) Math.pow(2, 32);\n    /** The max overhead in bytes a message can potentially have. */\n    public static final int MAX_SIZE_MESSAGE_OVERHEAD = HEADER_LENGTH + CHECKSUM_LENGTH;\n\n    /** A reference to the \"latest protocol version\" message header. */\n    public static final BitcoinPacketHeader LATEST_PROTOCOL_VERSION_HEADER;\n\n    static {\n        // Note that the \"latest protocol version\" isn't actually the latest version - it's whatever the latest\n        // version was at the time the library was compiled.\n        LATEST_PROTOCOL_VERSION_HEADER = new BitcoinPacketHeader(params.getProtocolVersion(), 0);\n    }\n\n    /** The total length of the protocol magic bytes. */\n    public static final int MAGIC_BYTES_LENGTH = 4;\n    protected static final byte[] MAGIC_BYTES = params.getNetMagicBytes();\n\n    /** The offset of the protocol version in the header. */\n    public static final int PROTOCOL_VERSION_OFFSET = 0;\n    /** The offset of the payload length in the header. */\n    public static final int PAYLOAD_LENGTH_OFFSET = 4;\n    /** The offset of the checksum in the header. */\n    public static final int CHECKSUM_OFFSET = 16;\n\n    /** The offset of the command in the header. */\n    public static final int COMMAND_OFFSET = 12;\n    /** The max length of the command in the header. */\n    public static final int COMMAND_LEN = 12;\n\n    public static final boolean DEFAULT_PARSE_LAZY = false;\n    public static final boolean DEFAULT_PARSE_RETAIN = false;\n\n    protected final Map<Class<? extends Message>, String> names = new HashMap<>();\n\n    /** Constructs a message serializer with the given behavior. */\n    public MessageSerializer(NetworkParameters params) {\n        this.params = params;\n    }\n\n    /**\n     * Writes a message to the given file.\n     *\n     * @param file\n     *            The file to write to.\n     * @param message\n     *            The message to write.\n     * @throws IOException\n     *             if an error occurs while writing the file.\n     */\n    public void writeMessage(File file, Message message) throws IOException {\n        FileOutputStream out = new FileOutputStream(file);\n        try {\n            writeMessage(out, message);\n            out.flush();\n        } finally {\n            out.close();\n        }\n    }\n\n    /**\n     * Writes a message to the given stream.\n     *\n     * @param stream\n     *            The stream to write to.\n     * @param message\n     *            The message to write.\n     * @throws IOException\n     *             if an error occurs while writing the stream.\n     */\n    public void writeMessage(OutputStream stream, Message message) throws IOException {\n        writeMessage(stream, message, false);\n    }\n\n    /**\n     * Writes a message to the given stream.\n     *\n     * @param stream\n     *            The stream to write to.\n     * @param message\n     *            The message to write.\n     * @param parseLazy\n     *            Whether to use parse lazy mode\n     * @throws IOException\n     *             if an error occurs while writing the stream.\n     */\n    public void writeMessage(OutputStream stream, Message message, boolean parseLazy) throws IOException {\n        networkSerializeToStream(message, stream, parseLazy);\n    }\n\n    /**\n     * Writes a message to the given file.\n     *\n     * @param file\n     *            The file to write to.\n     * @param message\n     *            The message to write.\n     * @throws IOException\n     *             if an error occurs while writing the file.\n     */\n    public static void writeMessage(File file, Message message, NetworkParameters params) throws IOException {\n        FileOutputStream out = new FileOutputStream(file);\n        try {\n            writeMessage(out, message, params);\n            out.flush();\n        } finally {\n            out.close();\n        }\n    }\n\n    /**\n     * Writes a message to the given stream.\n     *\n     * @param stream\n     *            The stream to write to.\n     * @param message\n     *            The message to write.\n     * @throws IOException\n     *             if an error occurs while writing the stream.\n     */\n    public static void writeMessage(OutputStream stream, Message message"
    },
    {
        "Example": 159,
        "Generated Java Code": "```java\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;\nimport java.util.Arrays;\n\npublic class FeedRun {\n    private BigDecimal feedConfigId;\n    private Timestamp startDate;\n    private String resultCode;\n    private String resultMessage;\n    private BigDecimal fileCount;\n    private Timestamp maxReceiptDate;\n    private BigDecimal downloadSize;\n    private BigDecimal feedId;\n    private String configInfo;\n    private long runId;\n    private byte[] errors;\n    private String runStatus;\n\n    public BigDecimal getFeedConfigId() {\n        return feedConfigId;\n    }\n\n    public Timestamp getStartDate() {\n        return startDate;\n    }\n\n    public String getResultCode() {\n        return resultCode;\n    }\n\n    public String getResultMessage() {\n        return resultMessage;\n    }\n\n    public BigDecimal getFileCount() {\n        return fileCount;\n    }\n\n    public Timestamp getMaxReceiptDate() {\n        return maxReceiptDate;\n    }\n\n    public BigDecimal getDownloadSize() {\n        return downloadSize;\n    }\n\n    public BigDecimal getFeedId() {\n        return feedId;\n    }\n\n    public void setFeedId(BigDecimal feedId) {\n        this.feedId = feedId;\n    }\n\n    public String getConfigInfo() {\n        return configInfo;\n    }\n\n    public void setConfigInfo(String configInfo) {\n        this.configInfo = configInfo;\n    }\n\n    public long getRunId() {\n        return runId;\n    }\n\n    public void setRunId(long runId) {\n        this.runId = runId;\n    }\n\n    public byte[] getErrors() {\n        return errors;\n    }\n\n    public void setErrors(byte[] errors) {\n        this.errors = errors;\n    }\n\n    public String getRunStatus() {\n        return runStatus;\n    }\n\n    public void setRunStatus(String runStatus) {\n        this.runStatus = runStatus;\n    }\n\n    public void setFeedConfigId(BigDecimal feedConfigId) {\n        this.feedConfigId = feedConfigId;\n    }\n\n    public void setStartDate(Timestamp startDate) {\n        this.startDate = startDate;\n    }\n\n    public void setResultCode(String resultCode) {\n        this.resultCode = resultCode;\n    }\n\n    public void setResultMessage(String resultMessage) {\n        this.resultMessage = resultMessage;\n    }\n\n    public void setFileCount(BigDecimal fileCount) {\n        this.fileCount = fileCount;\n    }\n\n    public void setMaxReceiptDate(Timestamp maxReceiptDate) {\n        this.maxReceiptDate = maxReceiptDate;\n    }\n\n    public void setDownloadSize(BigDecimal downloadSize) {\n        this.downloadSize = downloadSize;\n    }\n\n    public void setEndDate(Timestamp endDate) {\n        this.endDate = endDate;\n    }\n\n    private Timestamp endDate;\n\n    public Timestamp getEndDate() {\n        return endDate;\n    }\n\n    @Override\n    public String toString() {\n        return \"FeedRun{\" +\n                \"feedConfigId=\" + feedConfigId +\n                \", startDate=\" + startDate +\n                \", endDate=\" + endDate +\n                \", resultCode='\" + resultCode + '\\'' +\n                \", resultMessage='\" + resultMessage + '\\'' +\n                \", fileCount=\" + fileCount +\n                \", maxReceiptDate=\" + maxReceiptDate +\n                \", downloadSize=\" + downloadSize +\n                \", feedId=\" + feedId +\n                \", configInfo='\" + configInfo + '\\'' +\n                \", runId=\" + runId +\n                \", errors=\" + Arrays.toString(errors) +\n                \", runStatus='\" + runStatus + '\\'' +\n                '}';\n    }\n}\n```"
    },
    {
        "Example": 160,
        "Generated Java Code": "```java\nimport android.util.Log;\nimport androidx.annotation.NonNull;\nimport com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY;\nimport com.parrot.arsdk.arcommands.ARCOMMANDS_ARDRONE3_PILOTING_SPIN;\nimport com.parrot.arsdk.arcommands.ARCOMMANDS_COMMON_COMMON_ALLSTATES_CMD;\nimport com.parrot.arsdk.arcommands.ARCOMMANDS_COMMON_VELOCITY;\nimport com.parrot.arsdk.arcontroller.ARController;\nimport com.parrot.arsdk.arcontroller.ARControllerCodec;\nimport com.parrot.arsdk.arcontroller.ARControllerException;\nimport com.parrot.arsdk.arcontroller.ARControllerListener;\nimport com.parrot.arsdk.ardiscovery.ARDISCOVERY_PRODUCT_ENUM;\nimport com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;\nimport com.parrot.arsdk.ardiscovery.ARDiscoveryException;\nimport com.parrot.arsdk.ardiscovery.ARDiscoveryService;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GeneralMotorCon implements ARControllerListener {\n\n    private static GeneralMotorCon ourInstance = null;\n\n    public static GeneralMotorCon getInstance() {\n        if (ourInstance == null) {\n            ourInstance = new GeneralMotorCon();\n        }\n        return ourInstance;\n    }\n\n    private ARDiscoveryService service;\n    private ARDiscoveryDevice device;\n    private ARController controller;\n    private ARDrone drone;\n    private CommandManager cmd;\n    private int speed = 0;\n    private int spinSpeed = 0;\n    private int spin90Speed = 0;\n    private int hoverTime = 0;\n    private int spinTime = 0;\n    private int spin90Time = 0;\n    private static final String TAG = GeneralMotorCon.class.getSimpleName();\n    private int batLvl = 0;\n    private long threadTimer = 0;\n\n    private GeneralMotorCon() {\n        cmd = new CommandManager();\n    }\n\n    public void setDrone(ARDrone drone) {\n        this.drone = drone;\n    }\n\n    @Override\n    public void onCommandReceived(List<Integer> list) {\n        Thread.currentThread().setName(\"GeneralMotorCon\");\n        Log.i(TAG, \"onCommandReceived: \" + list);\n        if (list.size() >= 8 && list.get(0) == 50) {\n            if (list.get(1) == 0) {\n                cmd.addCommand(list, \"spin90Right\");\n            } else if (list.get(1) == 1) {\n                cmd.addCommand(list, \"spin90Left\");\n            } else if (list.get(1) == 2) {\n                cmd.addCommand(list, \"backward\");\n            } else if (list.get(1) == 3) {\n                cmd.addCommand(list, \"forward\");\n            } else if (list.get(1) == 4) {\n                cmd.addCommand(list, \"right\");\n            } else if (list.get(1) == 5) {\n                cmd.addCommand(list, \"left\");\n            } else if (list.get(1) == 6) {\n                cmd.addCommand(list, \"raiseAltitude\");\n            } else if (list.get(1) == 7) {\n                cmd.addCommand(list, \"lowerAltitude\");\n            } else if (list.get(1) == 8) {\n                cmd.addCommand(list, \"takeoff\");\n            } else if (list.get(1) == 9) {\n                cmd.addCommand(list, \"landing\");\n            }\n        }\n    }\n\n    @SuppressWarnings(\"unused\")\n    public void setBatLvl(int batLvl) {\n        this.batLvl = batLvl;\n    }\n\n    @Override\n    public void onStateChanged(ARControllerState arControllerState) {\n        switch (arControllerState) {\n            case RUNNING:\n                Log.i(TAG, \"RUNNING\");\n                break;\n            case CONNECTED:\n                Log.i(TAG, \"UUID: \" + controller.getARControllerDevice().getUUID());\n                Log.i(TAG, \"CONNECTED\");\n                break;\n            case DISCONNECTED:\n                Log.i(TAG, \"DISCONNECTED\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    @Override\n    public void onExtensionStateChanged(ARControllerState arControllerState, ARDISCOVERY_PRODUCT_ENUM ardiscovery_product_enum) {\n    }\n\n    @Override\n    public void onError(ARControllerException e) {\n        Log.e(TAG, \"onError: \" + e);\n    }\n\n    @Override\n    public void onConfigureController(@NonNull ARControllerCodec arControllerCodec) {\n        try {\n            arControllerCodec.setCommandListener(this);\n        } catch (ARControllerException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int getBatLvl() {\n        return batLvl;\n    }\n\n    public void spin90Left() {\n        controller.sendCommand(ARCOMMANDS_ARDRONE3_PILOTING_SPIN.encodeSPIN(ARCOMMANDS_ARDRONE3_PILOTING_SPIN.SPIN_DIRECTION_TYPE_CLOCKWISE, spin90Time, spin90Speed));\n\n        Log.i(TAG, String.format(\"spin90Left, spinTime: %d\", spin90Time));\n        spinWait();\n    }\n\n    public void spinRight() {\n        controller.sendCommand(ARCOMMANDS_ARDRONE3_PILOTING_SPIN.encodeSPIN(ARCOMMANDS_ARDRONE3_PILOTING_SPIN.SPIN_DIRECTION_TYPE_COUNTERCLOCKWISE, spinTime, spinSpeed));\n        Log.i(TAG, String.format(\"spinRight, spinTime: %d\", spinTime));\n        spinWait();\n    }\n\n    public void takeoff() {\n        controller.sendCommand(ARCOMMANDS_COMMON_COMMON_ALLSTATES_CMD.encodeALLOUT(1));\n        Log.i(TAG, \"takeoff\");\n        takeoffWait();\n    }\n\n    public void forward() {\n        controller.sendCommand(\n                ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.encodeMOVEBY(ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.AXIS_TYPE_X, ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.DIRECTION_TYPE_POS, Math.round(speed * Math.cos(Math.toRadians(drone.getHeading()))), Math.round(speed * Math.sin(Math.toRadians(drone.getHeading()))), 0, 0));\n\n        Log.i(TAG, String.format(\"forward, speed: %d\", speed));\n        movementWait();\n    }\n\n    public void spinLeft() {\n        controller.sendCommand(ARCOMMANDS_ARDRONE3_PILOTING_SPIN.encodeSPIN(ARCOMMANDS_ARDRONE3_PILOTING_SPIN.SPIN_DIRECTION_TYPE_CLOCKWISE, spinTime, spinSpeed));\n        Log.i(TAG, String.format(\"spinLeft, spinTime: %d\", spinTime));\n        spinWait();\n    }\n\n    public void right() {\n        controller.sendCommand(\n                ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.encodeMOVEBY(ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.AXIS_TYPE_X, ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.DIRECTION_TYPE_NEG, Math.round(speed * Math.cos(Math.toRadians(drone.getHeading()))), Math.round(speed * Math.sin(Math.toRadians(drone.getHeading()))), 0, 0));\n        Log.i(TAG, String.format(\"right, speed: %d\", speed));\n        movementWait();\n    }\n\n    public void lowerAltitude() {\n        controller.sendCommand(\n                ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.encodeMOVEBY(ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.AXIS_TYPE_Z, ARCOMMANDS_ARDRONE3_PILOTING_MOVE_BY.DIRECTION_TYPE_NEG, 0, 0, ARCOMMANDS_COMMON_VELOCITY.VELOCITY_025, 0));\n        Log.i(TAG, \"lowerAltitude\");\n        movementWait();\n    }\n\n    public void landing() {\n        controller.sendCommand(ARCOMMANDS_COMMON_COMMON_ALLSTATES_CMD.encodeALLOUT(0));\n        Log.i(TAG, \"landing\");\n    }\n\n    public void left() {\n        controller.sendCommand(\n                ARCOMMANDS_AR"
    },
    {
        "Example": 161,
        "Generated Java Code": "```java\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.collect.ImmutableMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nfinal class MapByClientIdCache {\n  static final Map<Long, Integer> EMPTY = ImmutableMap.of();\n\n  private final Cache<String, Integer> summaryCache;\n  private final Cache<Long, Integer> byClientIdCache;\n\n  MapByClientIdCache(ApprovedSiteService approvedSiteService, ClientDetailsEntityService clientService) {\n    CacheBuilder<String, Integer> summaryBuilder =\n        CacheBuilder.newBuilder().expireAfterAccess(1, TimeUnit.HOURS);\n    summaryCache = summaryBuilder.build(approvedSiteService::computeSummaryStats);\n    CacheBuilder<Long, Integer> byClientBuilder =\n        CacheBuilder.newBuilder().expireAfterAccess(1, TimeUnit.HOURS);\n    byClientIdCache = byClientBuilder.build(clientService::computeByClientId);\n  }\n\n  // cache miss returns 0\n  public Map<Long, Integer> getByClientId() {\n    if (byClientIdCache.size() == 0) {\n      byClientIdCache.putAll(computeByClientId());\n    }\n    return byClientIdCache.asMap();\n  }\n\n  Map<Long, Integer> computeByClientId() {\n    return EMPTY;\n  }\n\n  public void resetCache() {\n    summaryCache.invalidateAll();\n    byClientIdCache.invalidateAll();\n  }\n\n  // cache miss returns 0\n  public Map<String, Integer> getSummaryStats() {\n    if (summaryCache.size() == 0) {\n      summaryCache.putAll(computeSummaryStats());\n    }\n    return summaryCache.asMap();\n  }\n\n  // overrides for testing\n  public Map<String, Integer> computeSummaryStats() {\n    return EMPTY;\n  }\n\n  public Supplier<Map<String, Integer>> createSummaryCache() {\n    return summaryCache::asMap;\n  }\n\n  public Supplier<Map<Long, Integer>> createByClientIdCache() {\n    return byClientIdCache::asMap;\n  }\n}\n```"
    },
    {
        "Example": 162,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.xml.namespace.QName;\n\npublic final class XPathContext {\n    private static final String OPEN = \"{\";\n    private static final String CLOSE = \"}\";\n    private static final String PI = \"PI\";\n    private static final String TEXT = \"TEXT\";\n    private static final String EMPTY = \"EMPTY\";\n    private static final String COMMENT = \"COMMENT\";\n    private static final String ATTR = \"ATTR\";\n    private static final String SEP = \" \";\n\n    public final String xpath;\n    public final QName name;\n    public final short type;\n    public final Map<String, String> uri2Prefix;\n    public final Map<QName, Level> attributes;\n    public final List<Level> children;\n    public final Deque<Level> path;\n    public final String expression;\n\n    private XPathContext(XPathContext context, short type, String expression) {\n        this.xpath = context.xpath;\n        this.name = context.name;\n        this.type = type;\n        this.uri2Prefix = context.uri2Prefix;\n        this.attributes = context.attributes;\n        this.children = context.children;\n        this.path = context.path;\n        this.expression = expression;\n    }\n\n    private XPathContext(String xpath, QName name, short type, Map<String, String> uri2Prefix,\n                         Map<QName, Level> attributes, List<Level> children, Deque<Level> path, String expression) {\n        this.xpath = xpath;\n        this.name = name;\n        this.type = type;\n        this.uri2Prefix = uri2Prefix == null ? new HashMap<>() : uri2Prefix;\n        this.attributes = attributes == null ? new HashMap<>() : attributes;\n        this.children = children == null ? new ArrayList<>() : children;\n        this.path = path == null ? new LinkedList<>() : path;\n        this.expression = expression == null ? \"\" : expression;\n    }\n\n    public XPathContext clone() {\n        return new XPathContext(xpath, name, type, uri2Prefix, attributes, children, path, expression);\n    }\n\n    public XPathContext clone(short type, String expression) {\n        return new XPathContext(this, type, expression);\n    }\n\n    public String getName() {\n        return name.toString();\n    }\n\n    public void appendChildren(List<Level> levels) {\n        children.addAll(levels);\n    }\n\n    public void navigateToChild(Level child, String expression) {\n        path.add(child);\n        children = child.children;\n        xpath = this.xpath + SEP + child.xpath;\n        name = child.name;\n        this.expression = expression;\n    }\n\n    public void navigateToParent() {\n        if (!path.isEmpty()) {\n            Level parent = path.removeLast();\n            xpath = xpath.substring(0, xpath.lastIndexOf(SEP));\n            children = parent.children;\n            name = parent.name;\n            expression = \"\";\n        }\n    }\n\n    public void navigateToAttribute(QName name, String expression) {\n        Level child;\n        switch (type) {\n            case Level.ELEMENT:\n                child = attributes.get(name);\n                if (child != null) {\n                    xpath = this.xpath + SEP + child.xpath;\n                    children = Collections.singletonList(child);\n                    this.name = name;\n                    this.expression = expression;\n                } else {\n                    throw new Error(\"attribute \" + child + \" not found in \" + xpath);\n                }\n                break;\n            case Level.ATTRIBUTE:\n                if (name.equals(this.name)) {\n                    this.expression = expression;\n                }\n                break;\n        }\n    }\n\n    public String getXPath() {\n        if (path.isEmpty()) {\n            return xpath;\n        } else {\n            return xpath + SEP + path.getLast().xpath;\n        }\n    }\n\n    public void addAttribute(QName name, String value) {\n        attributes.put(name, new Level(xpath, name, Level.ATTRIBUTE, \"\", SEP + value));\n    }\n\n    public void addAttributes(Map<QName, String> attributes) {\n        for (Map.Entry<QName, String> entry : attributes.entrySet()) {\n            addAttribute(entry.getKey(), entry.getValue());\n        }\n    }\n\n    public short getType() {\n        return type;\n    }\n\n    private static class Level {\n        public static final short ATTRIBUTE = 3;\n        public static final short COMMENT = 5;\n        public static final short ELEMENT = 1;\n        public static final short EMPTY = 2;\n        public static final short PI = 4;\n        public static final short TEXT = 6;\n\n        public final String xpath;\n        public final QName name;\n        public final short type;\n        public final String expression;\n        public final List<Level> children;\n\n        private Level(String xpath, QName name, short type, String expression, String children) {\n            this.xpath = xpath;\n            this.name = name;\n            this.type = type;\n            this.expression = expression;\n            this.children = parseChildren(children);\n        }\n\n        private List<Level> parseChildren(String children) {\n            if (\"\".equals(children) || EMPTY.equals(children)) {\n                return Collections.emptyList();\n            } else {\n                List<Level> result = new ArrayList<>();\n                for (String child : children.split(SEP)) {\n                    if (COMMENT.equals(child)) {\n                        result.add(new Level(xpath, null, COMMENT, \"\", \"<!-- -->\"));\n                    } else if (TEXT.equals(child)) {\n                        result.add(new Level(xpath, null, TEXT, \"\", \" \"));\n                    } else if (PI.equals(child)) {\n                        result.add(new Level(xpath, null, PI, \"\", \"<??>\"));\n                    } else if (OPEN.equals(child.substring(0, 1))) {\n                        int i = child.indexOf(CLOSE);\n                        result.add(new Level(xpath, new QName(child.substring(1, i)), ELEMENT, child.substring(i + 1), \"\"));\n                    } else {\n                        result.add(new Level(xpath, new QName(child), ATTRIBUTE, \"\", \"\"));\n                    }\n                }\n                return result;\n            }\n        }\n\n        public String toString() {\n            return name == null ? typeToString() : name + \":\" + typeToString();\n        }\n\n        private String typeToString() {\n            switch (type) {\n                case ATTRIBUTE:\n                    return ATTR;\n                case COMMENT:\n                    return COMMENT;\n                case ELEMENT:\n                    return OPEN + xpath + CLOSE;\n                case EMPTY:\n                    return EMPTY;\n                case PI:\n                    return PI;\n                case TEXT:\n                    return TEXT;\n                default:\n                    throw new Error(\"unknown type \" + type);\n            }\n        }\n    }\n}\n```"
    },
    {
        "Example": 163,
        "Generated Java Code": "```java\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\nimport com.google.protobuf.ByteString;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * An index which uses Linear Probing to resolve hash collisions. This index can be either loaded from\n * a byte array or created empty and populated with keys using {@link #put}.\n */\npublic class LinearProbingIndex {\n\n  // Configuration parameters\n  private static final int BUCKET_SIZE_BYTES = 4; // size of a bucket is 4 bytes\n  private static final int INDEX_HASHER_SEED = 0x87654321; // seed for index hash function\n  private static final int FINGERPRINT_HASHER_SEED = 0xfedcba98; // seed for fingerprint hash function\n  private static final HashFunction FINGERPRINT_HASHER = Hashing.farmHashFingerprint64();\n  private static final HashFunction INDEX_HASHER =\n      Hashing.murmur3_32(INDEX_HASHER_SEED); // index hash function\n  private static final int MAX_PROBES = 2; // number of probes to perform when searching for a key\n\n  // Storage\n  private ByteBuffer mHashTableBuf;\n  private int mNumBuckets; // Number of buckets in the index\n\n  /**\n   * Constructor for {@link LinearProbingIndex}.\n   *\n   * @param mKeyCount Number of keys in the index\n   * @param mBuf Byte buffer representing the index\n   */\n  private LinearProbingIndex(int mKeyCount, ByteBuffer mBuf) {\n    // Initialize storage\n    mHashTableBuf = mBuf;\n    mHashTableBuf.order(ByteOrder.LITTLE_ENDIAN);\n    mNumBuckets = mHashTableBuf.limit() / BUCKET_SIZE_BYTES;\n  }\n\n  /**\n   * Create an empty LinearProbingIndex. The index must be populated with keys using {@link #put}.\n   *\n   * @param keyCount Number of keys in the index\n   * @return Empty LinearProbingIndex\n   */\n  public static LinearProbingIndex createEmptyIndex(int keyCount) {\n    // Allocate buffer for hash table\n    ByteBuffer buf = ByteBuffer.allocate(keyCount * BUCKET_SIZE_BYTES);\n    buf.order(ByteOrder.LITTLE_ENDIAN);\n    return new LinearProbingIndex(keyCount, buf);\n  }\n\n  /**\n   * Load a LinearProbingIndex from a byte array.\n   *\n   * @param data Byte array representing the index\n   * @return Loaded LinearProbingIndex\n   */\n  public static LinearProbingIndex loadFromByteArray(byte[] data) {\n    // Wrap byte array in byte buffer\n    ByteBuffer buf = ByteBuffer.wrap(data);\n    buf.order(ByteOrder.LITTLE_ENDIAN);\n    // Extract key count\n    int keyCount = buf.getInt();\n    // Create empty index\n    LinearProbingIndex index = createEmptyIndex(keyCount);\n    // Copy index data into buffer\n    buf.get(index.mHashTableBuf.array());\n    return index;\n  }\n\n  /**\n   * Get the byte count of the LinearProbingIndex.\n   *\n   * @return Byte count\n   */\n  public int byteCount() {\n    return mNumBuckets * BUCKET_SIZE_BYTES;\n  }\n\n  /**\n   * Get a key from the LinearProbingIndex.\n   *\n   * @param fingerprintHash Fingerprint hash of the key to get\n   * @return Byte buffer representing the key\n   */\n  public ByteBuffer get(byte[] fingerprintHash) {\n    // Calculate offset in hash table\n    int bucketOffset = INDEX_HASHER.hashBytes(fingerprintHash).asInt() % mNumBuckets;\n    // Search for key in hash table\n    for (int i = 0; i < MAX_PROBES; i++) {\n      int offset = bucketOffset * BUCKET_SIZE_BYTES + i * BUCKET_SIZE_BYTES;\n      if (mHashTableBuf.array()[offset] == fingerprintHash[0]) {\n        return ByteBuffer.wrap(mHashTableBuf.array(), offset + 1, 3);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the next key from the LinearProbingIndex.\n   *\n   * @param fingerprintHash Fingerprint hash of the current key\n   * @return Byte buffer representing the next key\n   */\n  public ByteBuffer nextKey(byte[] fingerprintHash) {\n    // Calculate offset in hash table\n    int bucketOffset = INDEX_HASHER.hashBytes(fingerprintHash).asInt() % mNumBuckets;\n    // Search for next key in hash table\n    for (int i = 0; i < MAX_PROBES; i++) {\n      int offset = bucketOffset * BUCKET_SIZE_BYTES + i * BUCKET_SIZE_BYTES;\n      if (offset < mHashTableBuf.limit()\n          && mHashTableBuf.array()[offset] != 0) {\n        return ByteBuffer.wrap(mHashTableBuf.array(), offset + 1, 3);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Put a key into the LinearProbingIndex.\n   *\n   * @param key Byte buffer representing the key to put\n   * @return True if the key was successfully put\n   */\n  public boolean put(ByteBuffer key) {\n    // Calculate fingerprint hash of key\n    byte[] fingerprintHash = FINGERPRINT_HASHER.hashBytes(key.array()).asBytes();\n    // Calculate offset in hash table\n    int bucketOffset = INDEX_HASHER.hashBytes(fingerprintHash).asInt() % mNumBuckets;\n    // Search for empty bucket in hash table\n    for (int i = 0; i < MAX_PROBES; i++) {\n      int offset = bucketOffset * BUCKET_SIZE_BYTES + i * BUCKET_SIZE_BYTES;\n      if (mHashTableBuf.array()[offset] == 0) {\n        // Put fingerprint hash and key into bucket\n        mHashTableBuf.array()[offset] = fingerprintHash[0];\n        System.arraycopy(key.array(), 0, mHashTableBuf.array(), offset + 1, 3);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the keys from the LinearProbingIndex as an iterator.\n   *\n   * @return Iterator over keys\n   */\n  public Iterator<ByteBuffer> keyIterator() {\n    return new Iterator<ByteBuffer>() {\n      private int mBucketOffset = 0;\n      private int mProbeCount = 0;\n\n      @Override\n      public boolean hasNext() {\n        while (mProbeCount < MAX_PROBES) {\n          if (mBucketOffset < mNumBuckets) {\n            if (mHashTableBuf.array()[mBucketOffset * BUCKET_SIZE_BYTES + mProbeCount * BUCKET_SIZE_BYTES] != 0) {\n              return true;\n            }\n            mProbeCount++;\n          } else {\n            mBucketOffset = 0;\n            mProbeCount = 0;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public ByteBuffer next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        int offset = mBucketOffset * BUCKET_SIZE_BYTES + mProbeCount * BUCKET_SIZE_BYTES;\n        mBucketOffset++;\n        mProbeCount = 0;\n        return ByteBuffer.wrap(mHashTableBuf.array(), offset + 1, 3);\n      }\n    };\n  }\n\n  /**\n   * Get the LinearProbingIndex as a byte array.\n   *\n   * @return Byte array representing the index\n   */\n  public byte[] getBytes() {\n    // Allocate byte array for index\n    byte[] data = new byte[byteCount() + 4];\n    // Copy key count into byte array\n    ByteBuffer.wrap(data).order(ByteOrder.LITTLE_ENDIAN).putInt(mNumBuckets);\n    // Copy index data into byte array\n    System.arraycopy(mHashTableBuf.array(), 0, data, 4, byteCount());\n    return data;\n  }\n}\n```"
    },
    {
        "Example": 164,
        "Generated Java Code": "```java\nimport net.sf.marineapi.nmea.parser.SentenceFactory;\nimport net.sf.marineapi.nmea.parser.SentenceParser;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass SentenceFactoryTest {\n\n    private static final char TEST_CHAR = 't';\n\n    private SentenceFactory factory;\n\n    @Test\n    void testRegisterInvalidParser() {\n        boolean exceptionCaught = false;\n        try {\n            factory.registerParser(null, TEST_CHAR);\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    @Test\n    void testUnregisterParser() {\n        // register parser\n        factory.registerParser(TestParser1.class, TEST_CHAR);\n        // check parser exists\n        Assertions.assertTrue(factory.hasParser(TEST_CHAR));\n        // unregister parser\n        factory.unregisterParser(TEST_CHAR);\n        // check parser no longer exists\n        Assertions.assertFalse(factory.hasParser(TEST_CHAR));\n    }\n\n    @Test\n    void testListParsers() {\n        // register parser\n        factory.registerParser(TestParser1.class, TEST_CHAR);\n        // check parser exists\n        Assertions.assertArrayEquals(new Class[]{TestParser1.class}, factory.listParsers());\n    }\n\n    @Test\n    void testCreateParserWithNull() {\n        boolean exceptionCaught = false;\n        try {\n            factory.createParser((char) 0);\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    @Test\n    void testCreateEmptyParserWithSentenceIdStr() {\n        boolean exceptionCaught = false;\n        try {\n            factory.createParser(\"\");\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    @Test\n    void testCreateEmptyCustomParser() {\n        boolean exceptionCaught = false;\n        try {\n            factory.createParser((Class<? extends SentenceParser>) null);\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    @Test\n    void testCreateParserWithUnregistered() {\n        boolean exceptionCaught = false;\n        try {\n            factory.createParser(TestParser2.class);\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    @Test\n    void testCreateEmptyParserWithSentenceId() {\n        boolean exceptionCaught = false;\n        try {\n            factory.createParser(null);\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    @Test\n    void testCreateCustomParser() {\n        TestParser3 parser = factory.createParser(TestParser3.class);\n        Assertions.assertNotNull(parser);\n    }\n\n    @Test\n    void testRegisterParserWithAlternativeBeginChar() {\n        factory.registerParser(TestParser1.class, TEST_CHAR, 'a');\n        Assertions.assertTrue(factory.hasParser(TEST_CHAR));\n        Assertions.assertTrue(factory.hasParser('a'));\n    }\n\n    @Test\n    void testSupportedTypesRegistered() {\n        factory.registerParser(TestParser1.class, TEST_CHAR);\n        SentenceParser parser = factory.createParser(TEST_CHAR);\n        Assertions.assertTrue(parser instanceof TestParser1);\n    }\n\n    @Test\n    void testCreateParser() {\n        SentenceParser parser = factory.createParser(TEST_CHAR);\n        Assertions.assertNotNull(parser);\n    }\n\n    @Test\n    void testCreateParserWithRandom() {\n        char randomChar = randomChar();\n        SentenceParser parser = factory.createParser(randomChar);\n        Assertions.assertEquals(randomChar, parser.getSentenceId());\n    }\n\n    @Test\n    void setUp() {\n        factory = SentenceFactory.getInstance();\n    }\n\n    @Test\n    void testGetInstance() {\n        Assertions.assertNotNull(factory);\n    }\n\n    @Test\n    void testCreateParserWithEmptyString() {\n        boolean exceptionCaught = false;\n        try {\n            factory.createParser(\"\");\n        } catch (IllegalArgumentException e) {\n            exceptionCaught = true;\n        }\n        Assertions.assertTrue(exceptionCaught);\n    }\n\n    // custom sentence parser\n    private static class TestParser1 implements SentenceParser {\n\n        @Override\n        public char getSentenceId() {\n            return TEST_CHAR;\n        }\n\n        @Override\n        public boolean isSentenceIdChar(char id) {\n            return false;\n        }\n\n        @Override\n        public void parse(String sentence) {\n        }\n    }\n\n    // custom sentence parser\n    private static class TestParser2 implements SentenceParser {\n\n        @Override\n        public char getSentenceId() {\n            return 'T';\n        }\n\n        @Override\n        public boolean isSentenceIdChar(char id) {\n            return false;\n        }\n\n        @Override\n        public void parse(String sentence) {\n        }\n    }\n\n    // custom sentence parser\n    private static class TestParser3 implements SentenceParser {\n\n        @Override\n        public char getSentenceId() {\n            return '3';\n        }\n\n        @Override\n        public boolean isSentenceIdChar(char id) {\n            return false;\n        }\n\n        @Override\n        public void parse(String sentence) {\n        }\n    }\n\n    private static char randomChar() {\n        return (char) (Math.random() * (126 - 33) + 33);\n    }\n}\n```"
    },
    {
        "Example": 165,
        "Generated Java Code": "```java\nimport com.google.common.base.Splitter;\nimport com.google.common.collect.ImmutableSet;\nimport java.util.regex.Pattern;\nimport org.apache.http.Header;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.util.TextUtils;\n\npublic class ProxyUtils {\n  // commaSeparatedValuesPattern is used to match and split a comma-separated list of values,\n  // and the values must not contain commas.\n  private static final Pattern commaSeparatedValuesPattern =\n      Pattern.compile(\"(?:[^,]+,)*[^,]+\");\n\n  // log is the log level for this class, it will not be null because we set it in the constructor\n  // of our parent.\n  private ESLogger log;\n\n  private String remoteIpHeader = \"X-Forwarded-For\";\n  private Pattern trustedProxies;\n  private Pattern internalProxies = Pattern.compile(\".*\");\n  private String proxiesHeader = \"x-forwarded-by\";\n\n  // commaDelimitedListToStringArray creates an array of strings by splitting a comma-delimited string.\n  private String[] commaDelimitedListToStringArray(String commaSeparatedList) {\n    return Splitter.on(\",\").splitToList(commaSeparatedList).toArray(new String[0]);\n  }\n\n  // detect populates data structures to configure the HTTP client and sets the header used to detect\n  // the client's real IP.\n  public void detect(HttpRequest request) {\n    // We don't want to use log.debug() here because this method is called on every request, and it is\n    // pointless to have so many logs at this level.\n    log.trace(\"Detecting proxy headers\");\n\n    if (!TextUtils.isEmpty(proxiesHeader)) {\n      String proxiesValue = getProxiesHeader(request);\n\n      if (!TextUtils.isEmpty(proxiesValue)) {\n        // The proxies header contains a comma-separated list of the intermediate proxies\n        // that have been traversed by the HTTP request.\n        String[] proxies = commaDelimitedListToStringArray(proxiesValue);\n\n        // Get the trusted proxies.\n        String trustedProxiesValue = getTrustedProxies();\n        Pattern trustedProxiesPattern =\n            trustedProxiesValue == null ? internalProxies : trustedProxies;\n\n        // Get the internal proxies.\n        Pattern internalProxiesPattern =\n            internalProxies == null ? trustedProxiesPattern : internalProxies;\n\n        // Populate data structures to configure the HTTP client.\n        for (String proxy : proxies) {\n          if (trustedProxiesPattern.matcher(proxy).matches()) {\n            // This is a trusted proxy, so we can use it to detect the client's real IP.\n            setRemoteIpHeader(proxy);\n          }\n        }\n      }\n    }\n  }\n\n  public String getRemoteIpHeader() {\n    return remoteIpHeader;\n  }\n\n  // setRemoteIpHeader sets the header that will be used to detect the client's real IP.\n  public void setRemoteIpHeader(String header) {\n    remoteIpHeader = header;\n  }\n\n  // getProxiesHeader returns the value of the proxies header, which can be comma-delimited.\n  public String getProxiesHeader(HttpRequest request) {\n    Header proxiesHeader = request.getFirstHeader(this.proxiesHeader);\n    return proxiesHeader != null ? proxiesHeader.getValue() : null;\n  }\n\n  // getInternalProxies returns the regular expression that is used to match internal proxies.\n  public String getInternalProxies() {\n    return internalProxies == null ? null : internalProxies.pattern();\n  }\n\n  // setInternalProxies sets the regular expression that is used to match internal proxies.\n  public void setInternalProxies(String pattern) {\n    internalProxies = pattern == null ? null : Pattern.compile(pattern);\n  }\n\n  // getTrustedProxies returns the regular expression that is used to match trusted proxies.\n  public String getTrustedProxies() {\n    return trustedProxies == null ? null : trustedProxies.pattern();\n  }\n\n  // setInternalProxies sets the regular expression that is used to match trusted proxies.\n  public void setTrustedProxies(String pattern) {\n    trustedProxies = pattern == null ? null : Pattern.compile(pattern);\n  }\n}\n```"
    },
    {
        "Example": 166,
        "Generated Java Code": "```java\n private static final short TEXT = 1;\n private static final short ATTR = 2;\n private static final short OPEN = 4;\n private static final short CLOSE = 8;\n private static final short EMPTY = 16;\n private static final short PI = 32;\n private static final short COMMENT = 64;\n private static final String SEP = \"/\";\n private static final String ATTR = \"@\";\n private static final String EMPTY = \"\";\n\n private final String xpath;\n private final QName name;\n private final String expression;\n private final QName pushName;\n private final int level;\n private final short type;\n\n private final Map<String, String> uri2Prefix = new HashMap<String, String>();\n private final Map<QName, Level> attributes = new HashMap<QName, Level>();\n\n private Deque<Level> path = new ArrayDeque<Level>();\n\n private final List<Level> children = new ArrayList<Level>();\n\n public static String stringify(Level level, XPathContext context) {\n  String uri = level.name.getURI();\n  String prefix = context.getPrefixForURI(uri);\n\n  String xpath = \"\";\n\n  if (level.pushName != null) {\n   xpath += stringify(level.pushName, context);\n  }\n\n  if (level.uri2Prefix.size() > 0) {\n   for (Map.Entry<String, String> e : level.uri2Prefix.entrySet()) {\n    xpath += \"declare namespace \" + e.getValue() + \" = \\\"\" + e.getKey() + \"\\\"; \";\n   }\n  }\n\n  switch (level.type) {\n   case PI:\n    xpath += \"processing-instruction(\";\n    xpath += \"\\'\" + level.expression + \"\\'\"\n      + \")\";\n    break;\n   case TEXT:\n    xpath += \"\\'\" + level.expression + \"\\'\";\n    break;\n   case OPEN:\n    if (prefix != null && prefix.length() > 0)\n     xpath += prefix + \":\";\n    xpath += level.name.getLocalPart();\n    xpath += OPEN;\n    if (level.attributes.size() > 0) {\n     for (Map.Entry<QName, Level> e : level.attributes.entrySet()) {\n      xpath += \" \" + stringify(e.getValue(), context);\n     }\n    }\n    break;\n   case CLOSE:\n    if (prefix != null && prefix.length() > 0)\n     xpath += prefix + \":\";\n    xpath += level.name.getLocalPart();\n    xpath += CLOSE;\n    break;\n   case EMPTY:\n    if (prefix != null && prefix.length() > 0)\n     xpath += prefix + \":\";\n    xpath += level.name.getLocalPart();\n    break;\n   case COMMENT:\n    xpath += \"<!--\" + level.expression + \"-->\";\n    break;\n   case ATTR:\n    xpath += ATTR;\n    if (prefix != null && prefix.length() > 0)\n     xpath += prefix + \":\";\n    xpath += level.name.getLocalPart();\n    xpath += \"='\";\n    xpath += level.expression + \"'\";\n    break;\n  }\n\n  if (level.children.size() > 0) {\n   xpath += SEP;\n\n   for (Level child : level.children) {\n    xpath += stringify(child, context);\n   }\n  }\n\n  return xpath;\n }\n\n public String stringify(XPathContext context) {\n  return stringify(this, context);\n }\n\n public String stringify() {\n  return stringify(this, XPathContext.EMPTY);\n }\n\n public String stringify(boolean invert) {\n  if (!invert) {\n   return stringify();\n  }\n\n  Level top = this;\n  while (top.parentLevel != null) {\n   top = top.parentLevel;\n  }\n\n  return stringify(top, top.xpathContext.getInvertedContext());\n }\n\n private Level(int level, QName name, QName pushName, String expression, short type,\n   Map<String, String> uri2Prefix, Map<QName, Level> attributes,\n   XPathContext xpathContext, Level parentLevel) {\n\n  this.level = level;\n  this.xpath = xpathContext.getXPathString(level);\n  this.name = name;\n  this.expression = expression;\n  this.pushName = pushName;\n  this.uri2Prefix = uri2Prefix;\n  this.attributes = attributes;\n  this.xpathContext = xpathContext;\n  this.parentLevel = parentLevel;\n  this.type = type;\n }\n\n private void navigateToParent() {\n  parentLevel = parentLevel.parentLevel;\n\n  if (parentLevel == null)\n   return;\n\n  if (type == OPEN)\n   parentLevel.children.add(this);\n  else if (type == CLOSE) {\n   parentLevel.children.add(this);\n   xpathContext.resolveUri2Prefix(parentLevel.uri2Prefix);\n\n   Map<String, String> attrs = invert(uri2Prefix);\n   for (Map.Entry<QName, Level> e : attributes.entrySet()) {\n    String uri = e.getKey().getURI();\n    String prefix = attrs.get(uri);\n    if (prefix != null && prefix.length() > 0) {\n     e.getValue().uri2Prefix.put(uri, prefix);\n    }\n   }\n\n   if (parentLevel.pushName != null) {\n    Level level = parentLevel.pushName;\n\n    if (level.type == OPEN) {\n     xpathContext.declarePrefix(name.getURI(), name.getLocalPart());\n     path.push(this);\n     return;\n    }\n   }\n\n   xpathContext.release(path);\n  } else if (type != EMPTY)\n   parentLevel.attributes.put(name, this);\n }\n\n public String getName() {\n  return name.getLocalPart();\n }\n\n public QName getName() {\n  return name;\n }\n\n public void appendChildren() {\n  if (parentLevel == null)\n   return;\n\n  parentLevel.children.addAll(children);\n }\n\n private static Map<String, String> invert(Map<String, String> map) {\n  Map<String, String> invertedMap = new HashMap<String, String>();\n\n  for (Map.Entry<String, String> e : map.entrySet()) {\n   invertedMap.put(e.getValue(), e.getKey());\n  }\n\n  return invertedMap;\n }\n\n private void addAttribute() {\n  attributes.put(name, this);\n }\n\n public short getType() {\n  return type;\n }\n\n public short getType() {\n  return type;\n }\n\n private void addAttributes() {\n  if (parentLevel == null)\n   return;\n  parentLevel.attributes.putAll(attributes);\n }\n\n public XPathContext clone() {\n  Level top = this;\n  while (top.parentLevel != null) {\n   top = top.parentLevel;\n  }\n\n  XPathContext copy = top.xpathContext.clone();\n  return top.clone(copy);\n }\n\n public Level clone(XPathContext xpathContext) {\n  return new Level(level, name, pushName, expression, type, uri2Prefix, attributes,\n    xpathContext, parentLevel);\n }\n\n private int add1OrIncrement() {\n  if (xpathContext.prefixes.containsKey(name.getURI())) {\n   String prefix = xpathContext.prefixes.get(name.getURI());\n   uri2Prefix.put(name.getURI(), prefix);\n   return 0;\n  }\n\n  return xpathContext.generateUniquePrefix();\n }\n\n private void navigateToChild(Level child) {\n  if (type == PI) {\n   children.add(child);\n   return;\n  }\n\n  if (child.type == ATTR) {\n   attributes.put(child.name, child);\n   return;\n  }\n\n  if (child.type == OPEN) {\n   if (type == OPEN && name.equals(child.name))\n    path.push(this);\n   children.add(child);\n   return;\n  }\n\n  if (child.type == CLOSE)\n   return;\n\n  if (child.type == TEXT) {\n   xpathContext.clearPrefixes();\n   if (expression == null || expression.length() == 0)\n    expression = child.expression;\n   else\n    expression += child.expression;\n  }\n }\n\n public void setChildren(List<Level> levels) {\n  children.clear();\n  children.addAll(levels);\n }\n\n private void navigateToAttribute() {\n  if (parentLevel == null)\n   return;\n\n  parentLevel.attributes.put(name, this);\n }\n\n public static class Factory {\n  private final XPathContext context;\n\n  public Factory(XPathContext context) {\n   this.context = context;\n  }\n\n  public Level startTag(QName name) {\n   return new Level(context"
    },
    {
        "Example": 167,
        "Generated Java Code": "```java\npackage com.google.cloud.datacatalog.v1;\n\nimport com.google.api.gax.rpc.ApiException;\nimport com.google.cloud.datacatalog.v1.DataCatalogClient;\nimport com.google.cloud.datacatalog.v1.Job;\nimport com.google.cloud.datacatalog.v1.JobName;\nimport com.google.cloud.datacatalog.v1.UpdateJobRequest;\nimport com.google.protobuf.FieldMask;\nimport java.io.IOException;\n\n// Sample to update job\npublic class UpdateJob {\n\n  public static void main(String[] args) throws ApiException, IOException {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"MY_PROJECT_ID\";\n    String location = \"MY_LOCATION\";\n    String jobId = \"MY_JOB_ID\";\n    // optionally provide run_id to update\n    long runId = 12345L;\n    updateJob(projectId, location, jobId, runId);\n  }\n\n  public static void updateJob(String projectId, String location, String jobId, long runId)\n      throws ApiException, IOException {\n    // Initialize client that will be used to send requests. This client only needs to be created\n    // once, and can be reused for multiple requests. After completing all of your requests, call\n    // the \"close\" method on the client to safely clean up any remaining background resources.\n    try (DataCatalogClient dataCatalogClient = DataCatalogClient.create()) {\n      // Construct the Job object.\n      JobName jobName = JobName.of(projectId, location, jobId);\n      Job job =\n          Job.newBuilder()\n              .setName(jobName.toString())\n              // Set job's run_id\n              .setRunId(runId)\n              .build();\n      // Construct the FieldMask object. FieldMask restricts the set of fields to be updated\n      // in the Job object. It can be used to update individual fields without updating\n      // all of them.\n      FieldMask fieldMask = FieldMask.newBuilder().addPaths(\"run_id\").build();\n      // Construct the UpdateJobRequest object.\n      UpdateJobRequest request =\n          UpdateJobRequest.newBuilder().setJob(job).setUpdateMask(fieldMask).build();\n      // Send the request to update the job.\n      Job response = dataCatalogClient.updateJob(request);\n      System.out.format(\"Job updated successfully: %s\\n\", response.getName());\n    }\n  }\n}  \n```"
    },
    {
        "Example": 168,
        "Generated Java Code": "```java\nimport java.util.Objects;\n\npublic class LRItem extends ParseItem {\n    public final boolean isDotAtEnd;\n    public final Production production;\n\n    public LRItem(boolean isDotAtEnd, Production production, ParsingSymbol symbolAfterDot, int objHash,\n                  int dotPos, int hashCode) {\n        super(symbolAfterDot, objHash, dotPos, hashCode);\n        this.isDotAtEnd = isDotAtEnd;\n        this.production = production;\n    }\n\n    public String toSimpleString() {\n        return this.production.toSimpleString(dotPos);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof LRItem)) return false;\n        LRItem lrItem = (LRItem) o;\n        return isDotAtEnd == lrItem.isDotAtEnd &&\n                Objects.equals(production, lrItem.production) &&\n                Objects.equals(symbolAfterDot, lrItem.symbolAfterDot) &&\n                objHash == lrItem.objHash &&\n                dotPos == lrItem.dotPos &&\n                hashCode == lrItem.hashCode;\n    }\n\n    @Override\n    public int hashCode() {\n        return hashCode;\n    }\n\n    @Override\n    public String toString() {\n        return \"LRItem{\" +\n                \"isDotAtEnd=\" + isDotAtEnd +\n                \", production=\" + production +\n                \", symbolAfterDot=\" + symbolAfterDot +\n                \", objHash=\" + objHash +\n                \", dotPos=\" + dotPos +\n                \", hashCode=\" + hashCode +\n                '}';\n    }\n}\n```"
    },
    {
        "Example": 169,
        "Generated Java Code": "```java\npackage com.squareup.wire.internal;\n\nimport com.google.gson.Gson;\nimport com.squareup.wire.CompleteFileOptions;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class CompleteFileOptionsTest {\n\n  private static CompleteFileOptions options = new CompleteFileOptions();\n\n  // Java interop only\n  @Test public void defaults() {\n    assertEquals(0L, options.option1);\n    assertEquals(\"2\", options.option2);\n    assertEquals(true, options.option3);\n    assertEquals(\"default\", options.option4);\n    assertEquals(10.5, options.option5, .0001);\n    assertEquals(new NestedOptions(500L, \"501\"), options.nestedOptions);\n  }\n\n  // Java interop only\n  @Test public void roundTrip() {\n    String json = new Gson().toJson(options);\n    assertEquals(options, new Gson().fromJson(json, CompleteFileOptions.class));\n  }\n}\n```"
    },
    {
        "Example": 170,
        "Generated Java Code": "```java\nimport java.util.Map;\n\npublic class Permission {\n  public static final String NOT_SHARED = \"NOT_SHARED\";\n  public static final String FRIENDS = \"FRIENDS\";\n  public static final String ALL = \"ALL\";\n  public static final String FRIEND_FRIEND = \"FRIEND_FRIEND\";\n  public static final String PUBLIC = \"PUBLIC\";\n  public static final String FRIEND_PUBLIC = \"FRIEND_PUBLIC\";\n  private static Map<String, Permission> PERMISSIONS = Map.of(NOT_SHARED, new Permission(\"NOT_SHARED\", 0), FRIENDS, new Permission(\"FRIENDS\", 1), ALL, new Permission(\"ALL\", 2), FRIEND_FRIEND, new Permission(\"FRIEND_FRIEND\", 3), PUBLIC, new Permission(\"PUBLIC\", 4), FRIEND_PUBLIC, new Permission(\"FRIEND_PUBLIC\", 5));\n  public static final long serialVersionUID = 129L;\n  private String m_key;\n  private int m_permissionIndex;\n  private int m_id;\n\n  public Permission(String key, int id) {\n    m_key = key;\n    m_id = id;\n    m_permissionIndex = id;\n  }\n\n  public String getKey() {\n    return m_key;\n  }\n\n  public int getID() {\n    return m_id;\n  }\n\n  public static Permission getInstance(String key) {\n    return PERMISSIONS.get(key);\n  }\n\n  @Override\n  public String toString() {\n    return m_key;\n  }\n}\n```"
    },
    {
        "Example": 171,
        "Generated Java Code": "```java\nimport android.content.Context;\n\nimport androidx.loader.content.AsyncTaskLoader;\nimport java.util.Collections;\nimport java.util.List;\n\nabstract class DuplicateProvider<T> extends AsyncTaskLoader<List<T>> {\n\n    private final DuplicateProviderListener<T, DuplicateProvider<T>> listener;\n\n    private boolean cancelled;\n\n    public DuplicateProvider(Context context, DuplicateProviderListener<T, DuplicateProvider<T>> listener) {\n        super(context);\n        this.listener = listener;\n    }\n\n    @Override\n    protected void onStartLoading() {\n        super.onStartLoading();\n        if (listener != null) {\n            listener.onPreExecute(this);\n        }\n        if (!cancelled) {\n            forceLoad();\n        }\n    }\n\n    @Override\n    public void deliverResult(List<T> data) {\n        if (!isCancelled()) {\n            super.deliverResult(data);\n        }\n    }\n\n    @Override\n    protected void onStopLoading() {\n        super.onStopLoading();\n        cancelled = true;\n    }\n\n    @Override\n    protected void onReset() {\n        super.onReset();\n        onStopLoading();\n        if (listener != null) {\n            listener.onPostExecute(this);\n        }\n    }\n\n    public boolean isCancelled() {\n        return cancelled;\n    }\n\n    public boolean deleteItem(T item) {\n        return false;\n    }\n\n    public boolean deleteItem(long id) {\n        return false;\n    }\n\n    @Override\n    public List<T> loadInBackground() {\n        return Collections.emptyList();\n    }\n\n    public String[] getCursorProjection() {\n        return null;\n    }\n\n    public String getCursorSelection() {\n        return null;\n    }\n\n    public String[] getReadPermissions() {\n        return null;\n    }\n\n    public String[] getDeletePermissions() {\n        return null;\n    }\n\n    public Uri getContentUri() {\n        return null;\n    }\n\n    public T createItem(String[] values) {\n        return null;\n    }\n\n    public void populateItem(T item, String[] values) {\n    }\n\n    public List<T> getItems() {\n        return null;\n    }\n\n    public void setListener(DuplicateProviderListener<T, DuplicateProvider<T>> listener) {\n    }\n\n    public DuplicateProviderListener<T, DuplicateProvider<T>> getListener() {\n        return listener;\n    }\n\n    public Context getContext() {\n        return getContext();\n    }\n\n    public void deletePairs() {\n    }\n\n    public String empty() {\n        return null;\n    }\n}\n```"
    },
    {
        "Example": 172,
        "Generated Java Code": ""
    },
    {
        "Example": 173,
        "Generated Java Code": "```java\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class VHWParserTest {\n\n  private VHWParser parser;\n\n  @Test\n  public void testConstructorTalkerId() {\n    parser = new VHWParser(\"$IIVHW,22.3,N,125.6,E,00.0,E\");\n    assertEquals(\"II\", parser.getTalkerId());\n  }\n\n  @Test\n  public void testConstructorString() {\n    parser = new VHWParser(\"$IIVHW,22.3,N,125.6,E,00.0,E\");\n    assertEquals(\"$IIVHW,22.3,N,125.6,E,00.0,E\", parser.getSource());\n  }\n\n  @Test\n  public void testIsTrue() {\n    assertTrue(parser.isTrue());\n  }\n\n  @Test\n  public void setUp() throws Exception {\n    parser.setUp();\n    // hard to test\n  }\n\n  @Test\n  public void testSetHeading() {\n    parser.setHeading(85);\n    assertEquals(85, parser.getHeading());\n  }\n\n  @Test\n  public void testSetSpeedKilometres() {\n    parser.setSpeedKilometres(22.3);\n    assertEquals(22.3, parser.getSpeedKilometres(), 0);\n  }\n\n  @Test\n  public void testSetSpeedKnots() {\n    parser.setSpeedKnots(125.6);\n    assertEquals(125.6, parser.getSpeedKnots(), 0);\n  }\n\n  @Test\n  public void testGetHeading() {\n    parser.setHeading(85);\n    assertEquals(85, parser.getHeading());\n  }\n\n  @Test\n  public void testGetMagneticHeading() {\n    assertEquals(0.0, parser.getMagneticHeading(), 0);\n  }\n\n  @Test\n  public void testGetSpeedKnots() {\n    parser.setSpeedKnots(125.6);\n    assertEquals(125.6, parser.getSpeedKnots(), 0);\n  }\n\n  @Test\n  public void testGetSpeedKmH() {\n    parser.setSpeedKilometres(22.3);\n    assertEquals(22.3, parser.getSpeedKilometres(), 0);\n  }\n\n}\n```"
    },
    {
        "Example": 174,
        "Generated Java Code": "```java\nimport io.netty.buffer.ByteBuf;\n\nclass RPCMessage {\n\n    public void encode(ByteBuf buf) { throw new RuntimeException(\"Not implemented\"); }\n\n    public static ByteToMessageDecoder createFrameDecoder() { throw new RuntimeException(\"Not implemented\"); }\n\n    public Type getType() { throw new RuntimeException(\"Not implemented\"); }\n\n    public DataBuffer getPayloadDataBuffer() { throw new RuntimeException(\"Not implemented\"); }\n\n    public int getId() { throw new RuntimeException(\"Not implemented\"); }\n\n    public static RPCMessage decodeMessage(final ByteBuf in) { throw new RuntimeException(\"Not implemented\"); }\n\n    public boolean hasPayload() { throw new RuntimeException(\"Not implemented\"); }\n\n    public Type decode(ByteBuf buf) { throw new RuntimeException(\"Not implemented\"); }\n\n    public int getEncodedLength() { throw new RuntimeException(\"Not implemented\"); }\n}\n```"
    },
    {
        "Example": 175,
        "Generated Java Code": "```java\nimport java.util.List;\n\nimport org.apache.accumulo.core.client.BatchScanner;\nimport org.apache.accumulo.core.data.Key;\nimport org.apache.accumulo.core.data.Range;\nimport org.apache.accumulo.core.data.Value;\nimport org.apache.accumulo.core.iterators.user.IntersectingIterator;\n\npublic class ExampleBatchScanner {\n\n  public static void main(String[] args) {\n    // Create a batch scanner using a list of scans\n    List<Range> ranges = List.of(new Range(), new Range());\n    BatchScanner batchScanner = new BatchScanner(ranges);\n\n    // Add an intersecting iterator to the batch scanner\n    batchScanner.addScanIterator(new IntersectingIterator());\n\n    // Iterate over the results of the batch scanner\n    for (Map.Entry<Key,Value> entry : batchScanner) {\n      System.out.println(entry.getKey() + \" = \" + entry.getValue());\n    }\n  }\n}\n```"
    },
    {
        "Example": 176,
        "Generated Java Code": ""
    },
    {
        "Example": 177,
        "Generated Java Code": "```java  \nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.namespace.QName;\n\nimport com.google.api.client.util.Key;\nimport com.google.api.client.util.Value;\n\npublic class HandlerChain {\n  @Key(\"@handlerClass\")\n  public String handlerClass;\n\n  @Key(\"init-param\")\n  @Value\n  public List<ParamValueType> initParam = new ArrayList<ParamValueType>();\n\n  @Key(\"display-name\")\n  @Value\n  public List<DisplayNameType> displayName = new ArrayList<DisplayNameType>();\n\n  @Key(\"soap-role\")\n  @Value\n  public List<String> soapRole = new ArrayList<String>();\n\n  @Key(\"soap-header\")\n  @Value\n  public List<XsdQNameType> soapHeader = new ArrayList<XsdQNameType>();\n\n  @Key(\"icon\")\n  @Value\n  public List<IconType> icon = new ArrayList<IconType>();\n\n  @Key(\"description\")\n  @Value\n  public List<DescriptionType> description = new ArrayList<DescriptionType>();\n\n  @Key(\"handler-name\")\n  public String handlerName;;\n\n  @Key(\"@id\")\n  public String id;\n\n  public List<XsdQNameType> getSoapHeader() {\n    return soapHeader;\n  }\n\n  public List<DisplayNameType> getDisplayName() {\n    return displayName;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n\n  public String getHandlerName() {\n    return handlerName;\n  }\n\n  public void setHandlerName(String handlerName) {\n    this.handlerName = handlerName;\n  }\n\n  public String getHandlerClass() {\n    return handlerClass;\n  }\n\n  public void setHandlerClass(String handlerClass) {\n    this.handlerClass = handlerClass;\n  }\n\n  public List<ParamValueType> getInitParam() {\n    return initParam;\n  }\n\n  public List<DescriptionType> getDescription() {\n    return description;\n  }\n\n  public List<SoapRole> getSoapRole() {\n    List<SoapRole> roles = new ArrayList<SoapRole>();\n    for (String r : soapRole) {\n      roles.add(SoapRole.valueOf(r));\n    }\n    return roles;\n  }\n\n  public List<IconType> getIcon() {\n    return icon;\n  }\n\n  public static class ParamValueType {\n\n    @Key(\"param-name\")\n    public String paramName;\n\n    @Key(\"param-value\")\n    public String paramValue;\n\n    public ParamValueType() {\n    }\n\n    public String getParamName() {\n      return paramName;\n    }\n\n    public String getParamValue() {\n      return paramValue;\n    }\n\n  }\n\n  public static class DisplayNameType {\n\n    @Key(\"lang\")\n    public String lang;\n\n    @Key(\"value\")\n    public String value;\n\n    public DisplayNameType() {\n    }\n\n    public String getLang() {\n      return lang;\n    }\n\n    public String getValue() {\n      return value;\n    }\n  }\n\n  public static class XsdQNameType extends QName {\n\n    public XsdQNameType(String namespaceURI, String localPart) {\n      super(namespaceURI, localPart);\n    }\n\n  }\n\n  public static class IconType {\n\n    @Key(\"lang\")\n    public String lang;\n\n    @Key(\"small-icon\")\n    public String smallIcon;\n\n    @Key(\"large-icon\")\n    public String largeIcon;\n\n    @Key(\"gif\")\n    public String gif;\n\n    public IconType() {\n    }\n\n    public String getLang() {\n      return lang;\n    }\n\n    public String getSmallIcon() {\n      return smallIcon;\n    }\n\n    public String getLargeIcon() {\n      return largeIcon;\n    }\n\n    public String getGif() {\n      return gif;\n    }\n  }\n\n  public static class DescriptionType {\n\n    @Key(\"lang\")\n    public String lang;\n\n    @Key(\"value\")\n    public String value;\n\n    public DescriptionType() {\n    }\n\n    public String getLang() {\n      return lang;\n    }\n\n    public String getValue() {\n      return value;\n    }\n  }\n\n  public enum SoapRole {\n\n    AUTHENTICATION, AUTHORIZATION;\n  }\n}  \n```"
    },
    {
        "Example": 178,
        "Generated Java Code": "```java\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.logging.Logger;\n\npublic class Patch_Graph_Merge {\n\n    private HashMap<String, String> oldRevisionGraphMap;\n    private Logger logger;\n\n    public void saveGraphVorMergingInMap(String revisionInformation, String getaddSetUri,\n                                          String getdeleteSetUri) {\n        this.oldRevisionGraphMap = loadGraphVorMergingFromMap(revisionInformation);\n        addGraphTripleSets(getaddSetUri, getdeleteSetUri);\n    }\n\n    public void addGraphTripleSets(String getaddSetUri, String getdeleteSetUri) {\n        if (getaddSetUri != null) {\n            LinkedList<String> createAddedOrRemovedTripleSet = createAddedOrRemovedTripleSet(getaddSetUri);\n            for (String s : createAddedOrRemovedTripleSet) {\n                oldRevisionGraphMap.put(s, \"added\");\n            }\n        }\n        if (getdeleteSetUri != null) {\n            LinkedList<String> createAddedOrRemovedTripleSet = createAddedOrRemovedTripleSet(getdeleteSetUri);\n            for (String s : createAddedOrRemovedTripleSet) {\n                oldRevisionGraphMap.put(s, \"deleted\");\n            }\n        }\n    }\n\n    private LinkedList<String> createAddedOrRemovedTripleSet(String uri) {\n        LinkedList<String> createAddedOrRemovedTripleSet = new LinkedList<>();\n        // TODO\n        return createAddedOrRemovedTripleSet;\n    }\n\n    private HashMap<String, String> loadGraphVorMergingFromMap(String revisionInformation) {\n        HashMap<String, String> loadGraphVorMerging = new HashMap<>();\n        // TODO\n        return loadGraphVorMerging;\n    }\n}\n```"
    },
    {
        "Example": 179,
        "Generated Java Code": "```java\nimport java.util.Arrays;\n\npublic class ParseTable {\n    private int _size;\n    private int[] default_reduce;\n    private int[][] reduction_count;\n    private int[][] under_term;\n\n    public void clear() {\n        Arrays.fill(default_reduce, 0);\n        for (int[] row : reduction_count) {\n            Arrays.fill(row, 0);\n        }\n        for (int[] row : under_term) {\n            Arrays.fill(row, 0);\n        }\n        _size = 0;\n    }\n\n    public void compute_default() {\n        for (int i = 1; i <= _size; i++) {\n            for (int j = 1; j <= under_term[i].length; j++) {\n                if (under_term[i][j] > 0) {\n                    if (reduction_count[i][reduction_count[i].length - 1] == 0) {\n                        reduction_count[i][reduction_count[i].length - 1] = 1;\n                        default_reduce[i] = j;\n                    }\n                }\n            }\n        }\n    }\n\n}\n```"
    },
    {
        "Example": 180,
        "Generated Java Code": "```java\nimport com.google.common.collect.CopyOnWriteArrayList;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SpringChain {\n    private static final int DEFAULT_ATTACHMENT_TENSION = 1;\n    private static final int DEFAULT_ATTACHMENT_FRICTION = 1;\n    private static final int DEFAULT_MAIN_TENSION = 1;\n    private static final int DEFAULT_MAIN_FRICTION = 1;\n\n    private final SpringConfigRegistry registry;\n\n    private final CopyOnWriteArrayList<Spring> mSprings;\n    private final CopyOnWriteArrayList<SpringListener> mListeners;\n\n    private final int id;\n    private int mControlSpringIndex;\n\n    private SpringConfig mAttachmentSpringConfig;\n    private SpringConfig mMainSpringConfig;\n    private SpringSystem mSpringSystem;\n\n    private SpringChain(SpringSystem springSystem, int id, List<Spring> springs) {\n        this.id = id;\n        this.mSprings = new CopyOnWriteArrayList<>(springs);\n        this.mListeners = new CopyOnWriteArrayList<>();\n        this.registry = springSystem.getSpringConfigRegistry();\n\n        mAttachmentSpringConfig = registry.getSpringConfig(DEFAULT_ATTACHMENT_TENSION, DEFAULT_ATTACHMENT_FRICTION);\n        mMainSpringConfig = registry.getSpringConfig(DEFAULT_MAIN_TENSION, DEFAULT_MAIN_FRICTION);\n        mControlSpringIndex = -1;\n\n        mSpringSystem = springSystem;\n        mSpringSystem.addSpringChain(this);\n    }\n\n    public SpringConfig getMainSpringConfig() {\n        return mMainSpringConfig;\n    }\n\n    public List<Spring> getAllSprings() {\n        return new ArrayList<>(mSprings);\n    }\n\n    public SpringChain setControlSpringIndex(int index) {\n        mControlSpringIndex = index;\n        return this;\n    }\n\n    void onSpringActivate(Spring spring) {\n        for (SpringListener listener : mListeners) {\n            listener.onSpringActivate(this, spring);\n        }\n    }\n\n    void onSpringAtRest(Spring spring) {\n        for (SpringListener listener : mListeners) {\n            listener.onSpringAtRest(this, spring);\n        }\n    }\n\n    static SpringChain create(SpringSystem springSystem, int id, List<Spring> springs) {\n        return new SpringChain(springSystem, id, springs);\n    }\n\n    static SpringChain create(SpringSystem springSystem, int id, Spring... springs) {\n        return new SpringChain(springSystem, id, new ArrayList<>(List.of(springs)));\n    }\n\n    void onSpringUpdate(Spring spring) {\n        calculatePositions();\n        for (SpringListener listener : mListeners) {\n            listener.onSpringUpdate(this, spring);\n        }\n    }\n\n    SpringChain addSpring(Spring spring) {\n        mSprings.add(spring);\n        return this;\n    }\n\n    void onSpringEndStateChange(Spring spring) {\n        for (SpringListener listener : mListeners) {\n            listener.onSpringEndStateChange(this, spring);\n        }\n    }\n\n    SpringConfig getAttachmentSpringConfig() {\n        return mAttachmentSpringConfig;\n    }\n\n    private void calculatePositions() {\n        int springIndex = 0;\n        Spring controlSpring = mSprings.get(mControlSpringIndex);\n        for (Spring spring : mSprings) {\n            if (spring != controlSpring) {\n                spring.setEndValue(controlSpring.getEndValue());\n            }\n            springIndex++;\n        }\n    }\n}\n```"
    },
    {
        "Example": 181,
        "Generated Java Code": "```java\nvoid readExtensions(ExtensionInfo extensionInfo, ClassFileLoader loader, ErrorQueue eq,\n                      Collection<JavaFileObject> outputFiles, List<ExtensionInfo> allExtensions,\n                      List<Job> jobs) {\n    boolean done = runToGoal(Goal.CLASS_PATH_EXTENSIONS);\n    outputFiles = maybeRunJobs(done, eq, outputFiles, jobs);\n\n    if (done) {\n        // Late allocation of ExtensionInfo objects to allow loaded class files\n        // to enforce necessary constraints between them\n        for (ExtensionInfo info : allExtensions) {\n            info.setClassFileLoader(loader);\n        }\n\n    }\n    ExtensionInfo info = extensionInfo;\n    for (ExtensionInfo extension : allExtensions) {\n        if (extension.getExtension().equals(info.getExtension())\n                && extension != info) {\n            if (loader.isEmpty()) {\n                loader.addClasses(info.getExtension().getSuppliedClasses());\n            }\n            loader.addClasses(extension.getExtension().getSuppliedClasses());\n            extension.setExtension(info);\n            info.addExtension(extension);\n        }\n    }\n    if (!done) {\n        jobs.add(new CompileExtensionJob(extensionInfo, eq));\n    }\n}\n```"
    },
    {
        "Example": 182,
        "Generated Java Code": ""
    },
    {
        "Example": 183,
        "Generated Java Code": "```java\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.auth.oauth2.CredentialRefreshListener;\nimport com.google.api.client.auth.oauth2.TokenResponse;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\n\n/* Class generated by 'go generate'. DO NOT EDIT. */\n\n/**\n * A OAuth2 credential representing user authorization.\n *\n * @since 1.22\n */\npublic class OAuth2UserCredential extends Credential {\n\n  /**\n   * The subject that created the object. Usually an OAuth 2.0 user subject.\n   */\n  private final UserSubject subject;\n\n  /**\n   * The scopes related to the create methods.\n   */\n  private final Collection<OAuthPermission> scopes;\n\n  /**\n   * Lifetime (> 0) of the credential in seconds since issued, unless epoch time was defined in\n   * {@link #issuedAt}.\n   */\n  private final Long lifetime;\n\n  /**\n   * Instant at which the token was issued. Usually used in combination with {@link #lifetime}.\n   */\n  private final Long issuedAt;\n\n  /**\n   * Whether the credential has been revoked.\n   *\n   * <p>Subsequent accessors that depend on the credential having been revoked should only be used\n   * after calling {@link #revoke()} and checking this value.\n   *\n   * <p>It is recommended that the OAuth 2.0 server be used to check the revocation status.\n   *\n   * @since 1.15\n   */\n  private boolean revoked;\n\n  /**\n   * @param subject the subject that created the object. Usually an OAuth 2.0 user subject.\n   * @param scopes the scopes related to the create methods\n   * @param lifetime lifetime (> 0) of the credential in seconds since issued, unless epoch time was\n   *     defined in {@link #issuedAt}.\n   * @param issuedAt instant at which the token was issued. Usually used in combination with {@link\n   *     #lifetime}.\n   */\n  public OAuth2UserCredential(\n      UserSubject subject,\n      Collection<OAuthPermission> scopes,\n      Long lifetime,\n      Long issuedAt) {\n    super();\n    this.subject = subject;\n    this.scopes = scopes;\n    this.lifetime = lifetime;\n    this.issuedAt = issuedAt;\n  }\n\n  public final UserSubject getSubject() {\n    return subject;\n  }\n\n  public final Collection<OAuthPermission> getScopes() {\n    return scopes;\n  }\n\n  public final Long getLifetime() {\n    return lifetime;\n  }\n\n  public final Long getIssuedAt() {\n    return issuedAt;\n  }\n\n  @Override\n  public final boolean isExpired() {\n    if (revoked) {\n      return true;\n    }\n    if (lifetime == null || issuedAt == null) {\n      return false;\n    }\n    return issuedAt + lifetime * 1000 < (new Date()).getTime();\n  }\n\n  // Override toString to suppress client_secret from logging.\n\n  @Override\n  public String toString() {\n    return getSubject() + \" (\" + getScopes() + \")\";\n  }\n\n  // Override methods that require creating child credentials with new OAuth2 credentials.\n\n  @Override\n  public OAuth2UserCredential createScoped(List<String> scopes) {\n    return new OAuth2UserCredential(subject, scopes, lifetime, issuedAt);\n  }\n\n  @Override\n  public OAuth2UserCredential createScopedRequired() {\n    return createScoped(getScopes());\n  }\n\n  @Override\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  public static class Builder extends Credential.Builder {\n\n    private UserSubject subject;\n    private Collection<OAuthPermission> scopes;\n    private Long lifetime;\n    private Long issuedAt;\n    private boolean revoked;\n\n    public Builder() {\n      super();\n    }\n\n    protected Builder(OAuth2UserCredential credential) {\n      super(credential);\n      this.subject = credential.subject;\n      this.scopes = credential.scopes;\n      this.lifetime = credential.lifetime;\n      this.issuedAt = credential.issuedAt;\n      this.revoked = credential.revoked;\n    }\n\n    public UserSubject getSubject() {\n      return subject;\n    }\n\n    public Builder setSubject(UserSubject subject) {\n      this.subject = subject;\n      return this;\n    }\n\n    public Collection<OAuthPermission> getScopes() {\n      return scopes;\n    }\n\n    public Builder setScopes(Collection<OAuthPermission> scopes) {\n      this.scopes = scopes;\n      return this;\n    }\n\n    public Long getLifetime() {\n      return lifetime;\n    }\n\n    public Builder setLifetime(Long lifetime) {\n      this.lifetime = lifetime;\n      return this;\n    }\n\n    public Long getIssuedAt() {\n      return issuedAt;\n    }\n\n    public Builder setIssuedAt(Long issuedAt) {\n      this.issuedAt = issuedAt;\n      return this;\n    }\n\n    public boolean isRevoked() {\n      return revoked;\n    }\n\n    public Builder setRevoked(Boolean revoked) {\n      this.revoked = revoked;\n      return this;\n    }\n\n    @Override\n    public OAuth2UserCredential build() {\n      return new OAuth2UserCredential(subject, scopes, lifetime, issuedAt);\n    }\n\n    @Override\n    public Builder setAccessToken(String accessToken) {\n      return (Builder) super.setAccessToken(accessToken);\n    }\n\n    @Override\n    public Builder setRefreshToken(String refreshToken) {\n      return (Builder) super.setRefreshToken(refreshToken);\n    }\n\n    @Override\n    public Builder setExpirationTimeMilliseconds(Long expirationTimeMilliseconds) {\n      return (Builder) super.setExpirationTimeMilliseconds(expirationTimeMilliseconds);\n    }\n\n    @Override\n    public Builder addRefreshListener(CredentialRefreshListener refreshListener) {\n      return (Builder) super.addRefreshListener(refreshListener);\n    }\n\n    @Override\n    public Builder setTokenResponse(TokenResponse tokenResponse) {\n      return (Builder) super.setTokenResponse(tokenResponse);\n    }\n  }\n}\n```"
    },
    {
        "Example": 184,
        "Generated Java Code": "```java\nimport java.util.List;\n\npublic class IngredientService {\n\n    private final Logger log;\n    private final IngredientRepository ingredientRepository;\n\n    public IngredientService(Logger log, IngredientRepository ingredientRepository) {\n        this.log = log;\n        this.ingredientRepository = ingredientRepository;\n    }\n\n    public List<String> getAutoSuggest(String maxSuggest) {\n        return ingredientRepository.getAutoSuggest(maxSuggest);\n    }\n\n    public Ingredient save(Ingredient ingredient) {\n        return ingredientRepository.save(ingredient);\n    }\n\n    public List<Ingredient> save(List<Ingredient> ingredients) {\n        return ingredientRepository.saveAll(ingredients);\n    }\n\n    public Ingredient findOne(Long id) {\n        return ingredientRepository.findById(id).orElse(null);\n    }\n\n    public void delete(Long id) {\n        ingredientRepository.deleteById(id);\n    }\n}\n```"
    },
    {
        "Example": 185,
        "Generated Java Code": "```java\npublic String getPartString(String[] dataLine, int column) {\n  if (column >= 0 && column < dataLine.length) {\n    return dataLine[column].trim();\n  }\n  return \"\";\n}\n```"
    },
    {
        "Example": 186,
        "Generated Java Code": "```java\nimport org.apache.activemq.artemis.api.core.ActiveMQException;\nimport org.apache.activemq.artemis.api.core.client.ClientConsumer;\nimport org.apache.activemq.artemis.api.core.client.ClientMessage;\nimport org.apache.activemq.artemis.api.core.client.ClientProducer;\nimport org.apache.activemq.artemis.api.core.client.ClientSession;\nimport org.apache.activemq.artemis.api.core.client.ServerLocator;\nimport org.apache.activemq.artemis.core.client.impl.ClientSessionFactoryImpl;\nimport org.apache.activemq.artemis.core.client.impl.ClientSessionImpl;\nimport org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;\n\npublic class ConsumerReceiveTimeout {\n\n   public static void main(String[] args) {\n      String hostname = \"localhost\";\n      int port = 5445;\n      String queueName = \"exampleQueue\";\n      long timeout = 10000;\n\n      try {\n         ServerLocator serverLocator = org.apache.activemq.artemis.core.client.impl.ServerLocatorImpl.createFactory(hostname, port);\n         ClientSessionFactoryImpl sessionFactory = new ClientSessionFactoryImpl(serverLocator);\n         ClientSession session = sessionFactory.createSession();\n         ClientProducer producer = session.createProducer(queueName);\n         ClientConsumer consumer = session.createConsumer(queueName);\n\n         // Set the receive timeout to 10 seconds\n         consumer.resetTimeout();\n         consumer.setTimeoutEnabled(true);\n         consumer.setTimeoutMillis(timeout);\n\n         // Reset the timeout\n         consumer.resetTimeout();\n\n         // Send a message\n         ClientMessage message = session.createMessage(false);\n         message.getBodyBuffer().writeString(\"Hello, World!\");\n         producer.send(message);\n\n         // Receive the message\n         ClientMessage receivedMessage = consumer.receive();\n         System.out.println(\"Received message: \" + receivedMessage.getBodyBuffer().readString());\n\n         // Close the session\n         session.close();\n      } catch (ActiveMQException e) {\n         e.printStackTrace();\n      }\n   }\n}\n```"
    },
    {
        "Example": 187,
        "Generated Java Code": "```java\nimport com.box.sdk.BoxAPIConnection;\nimport com.box.sdk.BoxFolder;\nimport com.box.sdk.BoxItem.Info;\nimport com.box.sdk.BoxUser;\nimport com.box.sdk.EventListener;\nimport com.box.sdk.RealBoxClient;\nimport com.box.sdk.RealBoxFolder;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.List;\n\npublic final class ListFolderStructure {\n    private static String getLoginMessage(String developerToken) {\n        return String.format(\"Logging in using developer token %s\", developerToken);\n    }\n\n    private static BoxFolder getRootFolder(BoxUser user, String devToken) {\n        return BoxFolder.getRootFolder(user, devToken);\n    }\n\n    private static String getMissingFolderMessage(String folderName) {\n        return String.format(\"Folder '%s' not found\", folderName);\n    }\n\n    private static BoxFolder getCurrentFolder(BoxFolder rootFolder, String path) {\n        BoxFolder currentFolder = rootFolder;\n        if (path.length() != 0) {\n            String[] splitPath = path.split(\"/\");\n            for (String folderName : splitPath) {\n                currentFolder = currentFolder.getSubfolder(folderName);\n                if (currentFolder == null) {\n                    return null;\n                }\n            }\n        }\n        return currentFolder;\n    }\n\n    private static void goToFolder(TextBot tb, BoxFolder currentFolder, String folderName) {\n        String currentPath = currentFolder.getInfo().getPathCollection().toString();\n        BoxFolder nextFolder = currentFolder.getSubfolder(folderName);\n        if (nextFolder == null) {\n            tb.reply(getMissingFolderMessage(folderName));\n        } else {\n            currentFolder = nextFolder;\n            tb.reply(String.format(\"Switched to folder /%s\", currentPath + \"/\" + folderName));\n        }\n    }\n\n    private static void uploadFile(TextBot tb, BoxFolder currentFolder, InputStream stream, String fileName) {\n        ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();\n        try {\n            int nRead;\n            byte[] data = new byte[16384];\n            while ((nRead = stream.read(data, 0, data.length)) != -1) {\n                byteOutputStream.write(data, 0, nRead);\n            }\n            byteOutputStream.flush();\n        } catch (IOException e) {\n            // Handle exception.\n        }\n        BoxFolder.Info info = currentFolder.createFile(fileName, byteOutputStream);\n        tb.reply(String.format(\"Uploaded file '%s' to folder /%s\", fileName, currentFolder.getInfo().getPathCollection().toString()));\n    }\n\n    private static void downloadFromCurrent(TextBot tb, BoxFolder currentFolder) {\n        List<Info> items = currentFolder.getChildren();\n        for (Info item : items) {\n            if (item instanceof BoxFolder.Info) {\n                tb.reply(String.format(\"Found folder '%s'\", item.getName()));\n            } else {\n                tb.reply(String.format(\"Found file '%s'\", item.getName()));\n            }\n        }\n    }\n\n    private static void createNewFolder(TextBot tb, BoxFolder currentFolder, String folderName) {\n        BoxFolder newFolder = currentFolder.createFolder(folderName);\n        tb.reply(String.format(\"Created folder '%s' in /%s\", newFolder.getInfo().getName(), currentFolder.getInfo().getPathCollection()));\n    }\n\n    private static void deleteFolder(TextBot tb, BoxFolder currentFolder, String folderName) {\n        BoxFolder folderToDelete = currentFolder.getSubfolder(folderName);\n        if (folderToDelete != null) {\n            folderToDelete.delete(false);\n            tb.reply(String.format(\"Deleted folder /%s\", folderToDelete.getInfo().getPathCollection().toString()));\n        } else {\n            tb.reply(getMissingFolderMessage(folderName));\n        }\n    }\n\n    private static void uploadFolder(TextBot tb, BoxFolder currentFolder, String folderName) {\n        File file = new File(folderName);\n        if (file.exists() && file.isDirectory()) {\n            BoxFolder newFolder = currentFolder.createFolder(file.getName()).newFolder();\n            int fileCount = 0, folderCount = 0;\n            for (File entry : file.listFiles()) {\n                if (entry.isDirectory()) {\n                    uploadFolder(tb, newFolder, entry.getName());\n                    folderCount++;\n                } else {\n                    uploadFile(tb, newFolder, file, entry.getName());\n                    fileCount++;\n                }\n            }\n            tb.reply(String.format(\"Uploaded %d files and %d folders to /%s\", fileCount, folderCount, newFolder.getInfo().getPathCollection()));\n        } else {\n            tb.reply(String.format(\"Folder '%s' not found\", folderName));\n        }\n    }\n\n    private static void listFolders(TextBot tb, BoxFolder currentFolder, String indent) {\n        List<Info> subFolders = currentFolder.getChildren();\n        for (Info subFolder : subFolders) {\n            tb.reply(indent + subFolder.getName());\n            if (subFolder instanceof BoxFolder.Info) {\n                listFolders(tb, (BoxFolder) subFolder, indent + \"  \");\n            }\n        }\n    }\n\n    private static void notify(TextBot tb, String message, Map<String, Object> metadata) {\n        tb.reply(String.format(\"%s: %s\", message, metadata.get(\"event\")));\n    }\n\n    private static List<String> getCurrentFiles(BoxFolder currentFolder) {\n        return currentFolder.getChildren();\n    }\n\n    private static void uploadFileToFolder(TextBot tb, BoxFolder currentFolder, InputStream stream, String fileName) {\n        ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();\n        try {\n            int nRead;\n            byte[] data = new byte[16384];\n            while ((nRead = stream.read(data, 0, data.length)) != -1) {\n                byteOutputStream.write(data, 0, nRead);\n            }\n            byteOutputStream.flush();\n        } catch (IOException e) {\n            // Handle exception.\n        }\n        BoxFolder.Info info = currentFolder.createFile(fileName, byteOutputStream);\n        tb.reply(String.format(\"Uploaded file '%s' to folder /%s\", fileName, currentFolder.getInfo().getPathCollection().toString()));\n    }\n\n    private static BoxFolder getFolder(BoxFolder currentFolder, String folderName) {\n        return currentFolder.getSubfolder(folderName);\n    }\n\n    private static BoxFolder getFolder(BoxFolder rootFolder, String path) {\n        BoxFolder currentFolder = rootFolder;\n        if (path.length() != 0) {\n            String[] splitPath = path.split(\"/\");\n            for (String folderName : splitPath) {\n                currentFolder = currentFolder.getSubfolder(folderName);\n                if (currentFolder == null) {\n                    return null;\n                }\n            }\n        }\n        return currentFolder;\n    }\n\n    private static void setUpNotifications(BoxUser user) {\n        setNotifications(user, \"/\");\n    }\n\n    private static void setNotifications(BoxUser user, String folderPath) {\n        BoxFolder folder = user.getFolder(folderPath);\n        Map<String, Object> metadata = new HashMap<>();\n        metadata.put(\"test\", \"value\");\n        folder.assignNotifications(metadata, new EventListener() {\n            @Override\n            public void onEvent(Map<String, Object> metadata, Info item) {\n                notify(TextBot.getBot(), item.getName(), metadata);\n            }\n        });\n\n        List<Info> subFolders = folder.getChildren();\n        for (Info subFolder : subFolders) {\n            if (subFolder instanceof BoxFolder.Info) {\n                setNotifications(user, ((BoxFolder.Info) subFolder).getId());\n            }\n        }\n    }\n\n    private static void goToRootFolder(BoxFolder currentFolder) {\n        if (!currentFolder.getInfo().getPathCollection().toString().equals(\"/\")) {\n            currentFolder = currentFolder.getInfo().getRootFolder();\n        }\n    }\n\n    public static void main(String[] args) {\n        String developerToken = \"\";\n        String folderName = \"\";\n        String fileName = \"\";\n        String prompt = \"> \";\n\n        // Create a new Box client and user from the provided developer token\n        BoxAPIConnection client = new BoxAPIConnection(developerToken);\n        BoxUser user = new BoxUser(client);\n        TextBot tb ="
    },
    {
        "Example": 188,
        "Generated Java Code": "```java\n@Override\npublic void writeBytes(ByteBuffer dbuf, boolean vCloseRequested) {\n  if (dbuf == null) {\n    return;\n  }\n  try {\n    int toWrite = Math.min(BUFFER_SIZE_UPPER_BOUND, dbuf.remaining());\n    int written = socket.getOutputStream().write(dbuf.array(), dbuf.arrayOffset(), toWrite);\n    dbuf.position(dbuf.position() + written);\n\n    log.debug(\"written: {}, {}\", written, dbuf.remaining());\n    if (vCloseRequested && dbuf.remaining() == 0) {\n      log.debug(\"Closing connection\");\n      socket.getOutputStream().close();\n      connectionClosed();\n    } else if (dbuf.remaining() < BUFFER_SIZE_LOWER_BOUND && written > 0) {\n      writeBytes(dbuf, vCloseRequested);\n    }\n  } catch (Exception e) {\n    connectionClosed();\n  }\n}\n```"
    },
    {
        "Example": 189,
        "Generated Java Code": ""
    },
    {
        "Example": 190,
        "Generated Java Code": ""
    },
    {
        "Example": 191,
        "Generated Java Code": "```java\nimport org.junit.Assert;\nimport java.util.Map;\n\npublic class AssertNotEmptyMap {\n\n    public static void isTrue(Map<?, ?> actual) {\n        Assert.assertTrue(actual != null && !actual.isEmpty());\n    }\n\n    public static void isAssignable() {\n        isTrue(new java.util.HashMap<>());\n    }\n\n    public static void notNull() {\n        isTrue(new java.util.HashMap<>());\n    }\n\n    public static void isNull() {\n        Assert.assertFalse(null != null && !null.isEmpty());\n    }\n\n    public static void noNullElements() {\n        isTrue(new java.util.HashMap<>());\n    }\n\n    public static void isInstanceOf() {\n        isTrue(new java.util.HashMap<>());\n    }\n\n    public static void state() {\n        Assert.assertTrue(new java.util.HashMap<>() != null);\n    }\n\n}\n```"
    },
    {
        "Example": 192,
        "Generated Java Code": "```java\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.gson.Gson;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@RunWith(JUnit4.class)\npublic class NotificationControllerTest {\n\n  private static final String MOCK_SESSION_ID = \"uuid\";\n  private static final String USER_ID = \"user-123\";\n  private static final String NOTIFICATION_ID = \"notification-246\";\n  private static final String TITLE = \"notification title\";\n\n  private NotificationController notificationController;\n  private ServerMessage mockServerMessage;\n  private ServerSession mockServerSession;\n  private Map<String, Object> testEventProperties;\n\n  @Before\n  public void setUp() {\n    mockServerSession = mock(ServerSession.class);\n    mockServerMessage = mock(ServerMessage.class);\n    notificationController = new NotificationController();\n    testEventProperties = new HashMap<>();\n    when(mockServerSession.getAppId()).thenReturn(\"demo\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullUser() {\n    testEventProperties.put(\"title\", TITLE);\n    try {\n      notificationController.handleEvent(null, mockServerMessage);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null user\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser() {\n    testEventProperties.put(\"title\", TITLE);\n    try {\n      notificationController.handleEvent(\"\", mockServerMessage);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for empty user\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullTitle() {\n    testEventProperties.put(\"user\", USER_ID);\n    try {\n      notificationController.handleEvent(USER_ID, null);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null title\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyTitle() {\n    testEventProperties.put(\"user\", USER_ID);\n    try {\n      notificationController.handleEvent(USER_ID, \"\");\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for empty title\");\n  }\n\n  @Test\n  public void testRegisterUserSession() {\n    Gson gson = new Gson();\n    Map<String, String> userSessionData = new HashMap<>();\n    notificationController.registerUserSession(userSessionData, mockServerSession, MOCK_SESSION_ID);\n    verify(mockServerSession).setData(gson.toJson(userSessionData));\n    verify(mockServerSession).setUser(USER_ID);\n  }\n\n  @Test\n  public void testRegisterUserSessionWithNullServerSessionIdThrowsException() {\n    Map<String, String> userSessionData = new HashMap<>();\n    try {\n      notificationController.registerUserSession(userSessionData, mockServerSession, null);\n    } catch (IllegalArgumentException e) {\n      verify(mockServerSession, Mockito.never()).setData(userSessionData);\n      verify(mockServerSession, Mockito.never()).setUser(USER_ID);\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null server session id\");\n  }\n\n  @Test\n  public void testDeregisterUserSessionWithNullServerSessonThrowsException() {\n    try {\n      notificationController.deregisterUserSession(null);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null server session\");\n  }\n\n  @Test\n  public void testDeregisterUserSessionWithNullServerSessionIdThrowsException() {\n    try {\n      notificationController.deregisterUserSession(\"\");\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for empty server session id\");\n  }\n\n  @Test\n  public void testDeregisterUserSessionRemovesUserFromKnownClients() {\n    notificationController.deregisterUserSession(MOCK_SESSION_ID);\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullApplication() {\n    testEventProperties.put(\"user\", USER_ID);\n    testEventProperties.put(\"title\", TITLE);\n    try {\n      notificationController.handleEvent(USER_ID, null);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null application\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyApplication() {\n    testEventProperties.put(\"user\", USER_ID);\n    testEventProperties.put(\"title\", TITLE);\n    try {\n      notificationController.handleEvent(USER_ID, \"\");\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for empty application\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullTimestamp() {\n    testEventProperties.put(\"user\", USER_ID);\n    testEventProperties.put(\"title\", TITLE);\n    testEventProperties.put(\"application\", \"demo\");\n    try {\n      notificationController.handleEvent(USER_ID, \"demo\", null, null);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null timestamp\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullMessage() {\n    testEventProperties.put(\"user\", USER_ID);\n    testEventProperties.put(\"title\", TITLE);\n    testEventProperties.put(\"application\", \"demo\");\n    testEventProperties.put(\"timestamp\", System.currentTimeMillis());\n    try {\n      notificationController.handleEvent(USER_ID, \"demo\", System.currentTimeMillis(), null);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null message\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyMessage() {\n    testEventProperties.put(\"user\", USER_ID);\n    testEventProperties.put(\"title\", TITLE);\n    testEventProperties.put(\"application\", \"demo\");\n    testEventProperties.put(\"timestamp\", System.currentTimeMillis());\n    try {\n      notificationController.handleEvent(USER_ID, \"demo\", System.currentTimeMillis(), \"\");\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for empty message\");\n  }\n\n  @Test\n  public void testGetServerSessionByUserId() {\n    notificationController.registerUserSession(new HashMap<>(), mockServerSession, MOCK_SESSION_ID);\n    notificationController.getServerSessionByUserId(USER_ID);\n    verify(mockServerSession).getAppId();\n  }\n\n  @Test\n  public void testDeletePersistentNotificationThrowsIllegalArgumentOnNullUserId() {\n    try {\n      notificationController.deletePersistentNotification(null, NOTIFICATION_ID);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null user id\");\n  }\n\n  @Test\n  public void testDeletePersistentNotificationThrowsIllegalArgumentOnNullServerSession() {\n    try {\n      notificationController.deletePersistentNotification(USER_ID, null);\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for null server session\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnEmptyUser() {\n    try {\n      HttpHeaders httpHeaders = new HttpHeaders();\n      httpHeaders.set(\"x-appengine-current-user\", \"\");\n      notificationController.handleEvent(httpHeaders, new Gson().toJson(testEventProperties));\n    } catch (IllegalArgumentException e) {\n      return;\n    }\n    throw new AssertionError(\"IllegalArgumentException should have been thrown for empty user\");\n  }\n\n  @Test\n  public void testHandleEventThrowsIllegalArgumentExceptionOnNullApplication() {\n    testEventProperties.put(\"user\", \"user-1\");\n    testEventProperties.put(\"title\", \"title\");\n    HttpHeaders httpHeaders"
    },
    {
        "Example": 193,
        "Generated Java Code": "```java\nimport javax.swing.JPanel;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Wizard {\n\n    private final List<JPanel> panels;\n    private int step;\n    private boolean started;\n    private boolean finished;\n    private WizardItem item;\n\n    public Wizard(List<JPanel> panels, WizardItem item) {\n        this.panels = panels;\n        this.item = item;\n    }\n\n    public void next() {\n        if (canGoNext()) {\n            getCurrentPanel().setVisible(false);\n            step++;\n            getCurrentPanel().setVisible(true);\n        }\n    }\n\n    public void back() {\n        if (canGoBack()) {\n            getCurrentPanel().setVisible(false);\n            step--;\n            getCurrentPanel().setVisible(true);\n        }\n    }\n\n    public void finish() {\n        if (canFinish()) {\n            finished = true;\n        }\n    }\n\n    public JPanel getPanel() {\n        return getCurrentPanel();\n    }\n\n    public void doAction() {\n        item.doAction(getCurrentPanel());\n    }\n\n    public void undo() {\n        item.undo(getCurrentPanel());\n    }\n\n    public int getStep() {\n        return step;\n    }\n\n    public int getNumSteps() {\n        return panels.size();\n    }\n\n    public boolean isStarted() {\n        return started;\n    }\n\n    public void setToDoItem(WizardItem item) {\n        this.item = item;\n    }\n\n    public boolean isFinished() {\n        return finished;\n    }\n\n    public int getProgress() {\n        return (int) ((double) step / panels.size() * 100);\n    }\n\n    public WizardItem getToDoItem() {\n        return item;\n    }\n\n    public boolean canGoNext() {\n        return step < panels.size() - 1;\n    }\n\n    public boolean canGoBack() {\n        return step > 0;\n    }\n\n    public boolean canFinish() {\n        return !finished && canGoNext();\n    }\n\n    public JPanel makePanel(WizardItem item) {\n        JPanel panel = item.makePanel();\n        panel.setVisible(false);\n        return panel;\n    }\n\n    public JPanel getCurrentPanel() {\n        return panels.get(step);\n    }\n\n    public void removePanel(JPanel panel) {\n        panels.remove(panel);\n    }\n\n    public static void main(String[] args) {\n        List<JPanel> panels = new ArrayList<>();\n        panels.add(new JPanel());\n        panels.add(new JPanel());\n        panels.add(new JPanel());\n\n        Wizard wizard = new Wizard(panels, new WizardItem() {\n            @Override\n            public void doAction(JPanel panel) {\n                // Do something\n            }\n\n            @Override\n            public void undo(JPanel panel) {\n                // Undo the action\n            }\n\n            @Override\n            public JPanel makePanel() {\n                return new JPanel();\n            }\n        });\n\n        wizard.next();\n        wizard.doAction();\n        wizard.undo();\n        wizard.back();\n        wizard.finish();\n    }\n}\n```"
    },
    {
        "Example": 194,
        "Generated Java Code": "```java\npublic int compareTo(Tag tag) {\n        if (key == tag.key) {\n            return value.compareTo(tag.value);\n        } else {\n            return key.compareTo(tag.key);\n        }\n    }\n```"
    },
    {
        "Example": 195,
        "Generated Java Code": "```java\n/*\n * Copyright (C) 2015 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage android.support.v7.widget;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Rect;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.view.ViewGroup;\n\n/**\n * A layout that arranges its children in a single row or column and distributes any additional\n * space among the children.\n */\npublic class LinearLayoutCompat extends ViewGroup {\n\n    public static final int HORIZONTAL = 0;\n    public static final int VERTICAL = 1;\n\n    public static final int SHOW_DIVIDER_NONE = 0;\n    public static final int SHOW_DIVIDER_BEGINNING = 1;\n    public static final int SHOW_DIVIDER_END = 2;\n    public static final int SHOW_DIVIDER_MIDDLE = 4;\n\n    private int mOrientation;\n    private int mGravity;\n    private int mTotalLength;\n    private int mDividerWidth;\n    private int mDividerHeight;\n    private boolean mUseLargestChild;\n    private boolean mBaselineAligned;\n    private boolean mBaselineAlignedChildIndex = -1;\n    private float[] mSpacing;\n    private float[] mDefaultSpacing;\n    private int[] sFlagsMap = new int[4];\n\n    private static final int START = 0x1;\n    private static final int END = 0x7F << 1;\n    private static final int TOP = 0x3;\n    private static final int BOTTOM = 0x5;\n    private static final int LEFT = 0x7;\n    private static final int RIGHT = 0x1F;\n    private static final int ALL = 0x3F;\n\n    private static final int HORIZONTAL_MASK = LEFT | TOP | RIGHT | BOTTOM;\n    private static final int VERTICAL_MASK = START | END | TOP | BOTTOM;\n\n    private final Rect mTempRect = new Rect();\n\n    public LinearLayoutCompat(Context context) {\n        this(context, null);\n    }\n\n    public LinearLayoutCompat(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public LinearLayoutCompat(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n\n        final TypedArray a = context.obtainStyledAttributes(attrs,\n                R.styleable.LinearLayoutCompat, defStyleAttr, 0);\n\n        int index = a.getInt(R.styleable.LinearLayoutCompat_android_orientation, -1);\n        if (index >= 0) {\n            setOrientation(index);\n        }\n\n        int gravity = a.getInt(R.styleable.LinearLayoutCompat_android_gravity, -1);\n        if (gravity >= 0) {\n            setGravity(gravity);\n        }\n\n        boolean baselineAligned = a.getBoolean(\n                R.styleable.LinearLayoutCompat_android_baselineAligned, true);\n        if (!baselineAligned) {\n            setBaselineAligned(baselineAligned);\n        }\n\n        mUseLargestChild = a.getBoolean(R.styleable.LinearLayoutCompat_android_baselineAlignedChildIndex,\n                true);\n\n        if (a.hasValue(R.styleable.LinearLayoutCompat_divider, true)) {\n            setDividerDrawable(a.getDrawable(\n                    R.styleable.LinearLayoutCompat_divider));\n        }\n\n        mDividerWidth = a.getDimensionPixelSize(\n                R.styleable.LinearLayoutCompat_dividerWidth, 0);\n\n        mDividerHeight = a.getDimensionPixelSize(\n                R.styleable.LinearLayoutCompat_dividerHeight, 0);\n\n        final float dimension = a.getDimension(\n                R.styleable.LinearLayoutCompat_measureWithLargestChild, -1.0f);\n        if (dimension >= 0) {\n            setMeasureWithLargestChildEnabled(dimension != 0);\n        }\n\n        int index2 = a.getInt(R.styleable.LinearLayoutCompat_showDividers, 0);\n        setShowDividers(index2);\n\n        a.recycle();\n    }\n\n    /**\n     * Set the orientation of this layout. Must be either {@link #HORIZONTAL} or\n     * {@link #VERTICAL}.\n     *\n     * @param orientation the new orientation value\n     */\n    public void setOrientation(int orientation) {\n        if (mOrientation != orientation) {\n            mOrientation = orientation;\n            requestLayout();\n        }\n    }\n\n    /**\n     * Return the orientation of this layout.\n     *\n     * @return either {@link #HORIZONTAL} or {@link #VERTICAL}\n     */\n    public int getOrientation() {\n        return mOrientation;\n    }\n\n    /**\n     * Set the gravity of this layout. The gravity will be applied to the entire layout.\n     *\n     * @param gravity the new gravity value\n     */\n    public void setGravity(int gravity) {\n        if (mGravity != gravity) {\n            if ((gravity & HORIZONTAL_MASK) == 0) {\n                gravity |= START;\n            }\n\n            if ((gravity & VERTICAL_MASK) == 0) {\n                gravity |= TOP;\n            }\n\n            mGravity = gravity;\n            requestLayout();\n        }\n    }\n\n    /**\n     * Return the gravity of this layout.\n     *\n     * @return the gravity value\n     */\n    public int getGravity() {\n        return mGravity;\n    }\n\n    /**\n     * <p>When set to true, all children with a weight will be considered having\n     * the minimum size of the largest child. If false, all children are\n     * measured normally.</p>\n     *\n     * <p>By default this is true after construction.</p>\n     *\n     * @param enabled True if all weights will be computed based on the largest child.\n     */\n    public void setMeasureWithLargestChildEnabled(boolean enabled) {\n        mUseLargestChild = enabled;\n    }\n\n    /**\n     * Return whether all weights will be computed based on the largest child.\n     *\n     * @return true if weights will be computed based on the largest child.\n     */\n    public boolean isMeasureWithLargestChildEnabled() {\n        return mUseLargestChild;\n    }\n\n    /**\n     * Set if this layout should be base aligned. When true, all children with a\n     * weight will be considered having the minimum size of the largest child. If\n     * false, all children are measured normally.\n     *\n     * @param aligned True if this layout should be base aligned.\n     */\n    public void setBaselineAligned(boolean aligned) {\n        mBaselineAligned = aligned;\n    }\n\n    /**\n     * Return whether this layout is baseline aligned. When true, all children with a\n     * weight will be considered having the minimum size of the largest child. If\n     * false, all children are measured normally.\n     *\n     * @return true if this layout is baseline aligned.\n     */\n    public boolean isBaselineAligned() {\n        return mBaselineAligned;\n    }\n\n    /**\n     * When true, indicates that the children of this layout will be baseline aligned.\n     *\n     * @param childIndex The index of the child whose baseline will be aligned.\n     * @see #setBaselineAligned(boolean)\n     * @see #isBaselineAligned()\n     */\n    public void setBaselineAlignedChildIndex(int childIndex) {\n        if (childIndex < 0 || childIndex >= getChildCount()) {\n            throw new IllegalArgumentException(\"invalid child index: \" + childIndex);\n        }\n        mBaselineAlignedChildIndex = childIndex;\n    }\n\n    /**\n     * Get the child index that will be baseline aligned.\n     *\n     * @return The index of the child whose baseline will be aligned, or -1 if no\n     * child is aligned.\n     * @see #setBaselineAlignedChildIndex(int)\n     * @see #setBaselineAligned(boolean)\n     * @see #isBaselineAligned()\n     */\n    public int getBaselineAlignedChildIndex() {\n        return mBaselineAlignedChildIndex;\n    }\n\n    /**\n     * <p>Sets the drawable used to draw a divider between views. The\n     * default value is a horizontal line drawn on the bottom edge of\n     * each view.  The drawable should have its top and bottom edges set\n     * to 0 and its intrinsic height set to the desired divider width.</p>\n     *\n     * @param divider Drawable to draw between views\n     * @see"
    },
    {
        "Example": 196,
        "Generated Java Code": "```java\nimport com.google.common.base.Splitter;\nimport com.google.common.collect.*;\nimport com.google.common.reflect.ClassPath;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.*;\n\n/**\n * Scans one or more base packages (e.g. \"com.google.common.\") for all resources with a given extension\n * (e.g. \".properties\").\n */\npublic class ClasspathScanner {\n  private static final String ALL_CLASS_FILES = \"**/*.class\";\n  private static final String CLASSPATH_URL_SCHEME = \"classpath:\";\n  private static final String ALL_FILES = \"**\";\n  private static final String WILDCARD = \"*\";\n  private static final Splitter PACKAGE_SPLITTER = Splitter.on('.').omitEmptyStrings();\n\n  /**\n   * Packages to skip when scanning the classpath.\n   */\n  private static final Set<String> PACKAGES_TO_SKIP =\n      ImmutableSet.of(\"java\", \"javax\", \"junit\", \"sun\", \"com.google.common.reflect\");\n\n  private final ClasspathScanner getClasspathScanner() {\n    return this;\n  }\n\n  /**\n   * Scans the classpath for all resources with the given extension e.g. \".properties\".\n   *\n   * @param basePackages One or more (comma separated) base packages to scan e.g. \"com.google.common\".\n   * @param extension e.g. \".properties\"\n   * @return Map from base package to list of resource paths e.g. \"my.package -> resource1.properties\"\n   */\n  public Map<String, List<String>> findResources(String basePackages, String extension) {\n    Map<String, List<String>> result = Maps.newHashMap();\n    for (String basePackage : basePackages.split(\",\")) {\n      result.put(basePackage, findResourcesInternal(basePackage, extension));\n    }\n    return ImmutableMap.copyOf(result);\n  }\n\n  private List<String> findResourcesInternal(String basePackage, String extension) {\n    List<String> result = Lists.newArrayList();\n    try {\n      for (ClassPath.ResourceInfo resource :\n          getClasspathScanner()\n              .parsePackages(basePackage)\n              .getResources(ImmutableSet.of(extension))) {\n        result.add(resource.getResourceName());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"IOException while scanning for resources\", e);\n    }\n    return Lists.newArrayList(result);\n  }\n\n  /**\n   * Scans the classpath for all classes with the given annotations.\n   *\n   * @param basePackages One or more (comma separated) base packages to scan e.g. \"com.google.common\".\n   * @param annotations the annotations to scan for.\n   * @return Map from base package to set of classes with the given annotations e.g.\n   *     \"my.package -> {class1.class, class2.class}\"\n   */\n  public Map<Class<? extends Annotation>, Collection<Class<?>>> findClasses(\n      String basePackages, Class<? extends Annotation>... annotations) {\n    Map<Class<? extends Annotation>, Collection<Class<?>>> result = Maps.newHashMap();\n    for (String basePackage : parsePackages(basePackages)) {\n      result.putAll(findClassesInternal(basePackage, annotations));\n    }\n    return ImmutableMap.copyOf(result);\n  }\n\n  private Map<Class<? extends Annotation>, Collection<Class<?>>> findClassesInternal(\n      String basePackage, Class<? extends Annotation>... annotations) {\n    Map<Class<? extends Annotation>, Collection<Class<?>>> result = Maps.newHashMap();\n    SettableMap<Class<? extends Annotation>, Class<?>> allClasses =\n        TreeBasedTable.create().rowMap();\n    findClasses(basePackage, allClasses);\n    for (Class<? extends Annotation> annotation : annotations) {\n      result.put(annotation, allClasses.get(annotation));\n    }\n    return ImmutableMap.copyOf(result);\n  }\n\n  private void findClasses(String basePackage, Map<Class<? extends Annotation>, Class<?>> allClasses) {\n    try {\n      for (ClassPath.ClassInfo classInfo :\n          getClasspathScanner().parsePackages(basePackage).getAllClasses()) {\n        Class<?> clazz = classInfo.load();\n        for (Class<? extends Annotation> annotation : clazz.getAnnotations()) {\n          Collection<Class<?>> classes =\n              allClasses.get(annotation) == null\n                  ? Lists.<Class<?>>newArrayList()\n                  : newArrayList(allClasses.get(annotation));\n          classes.add(clazz);\n          allClasses.put(annotation, classes);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"IOException while scanning for classes\", e);\n    }\n  }\n\n  /**\n   * Parses package names into a set of package prefixes.\n   *\n   * <p>For example, the package \"com.google.common\" would be parsed as the set\n   * {\"\", \"com\", \"com.google\", \"com.google.common\"}.\n   *\n   * @param packages String containing comma-separated package names.\n   */\n  private Set<String> parsePackages(String packages) {\n    Set<String> result = Sets.newHashSet();\n    for (String pkg : Splitter.on(',').split(packages)) {\n      List<String> packageParts = PACKAGE_SPLITTER.splitToList(pkg);\n      if (PACKAGES_TO_SKIP.contains(pkg)) {\n        continue;\n      }\n      result.addAll(ImmutableSet.copyOf(packageParts));\n    }\n    result.add(\"\");\n    return result;\n  }\n\n  private static class AllClassFilesUrlFinder {\n    // Because the URLClassLoader can efficiently find resources located in JAR files, we delegate the\n    // task of scanning the classpath for class files to it.\n\n    private List<URL> findClassFiles(List<URL> urls, List<String> basePackages) {\n      List<URL> result = Lists.newArrayList();\n      URLClassLoader urlClassloader = URLClassLoader.newInstance(urls.toArray(new URL[] {}));\n      try {\n        for (String basePackage : basePackages) {\n          String classPathString = (basePackage.isEmpty() ? \"\" : basePackage.replace('.', '/')) + ALL_CLASS_FILES;\n          Enumeration<URL> classFiles =\n              urlClassloader.findResources(classPathString, true);\n          result.addAll(Lists.newArrayList(classFiles));\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"IOException while scanning for class files\", e);\n      }\n      return result;\n    }\n  }\n}\n```"
    },
    {
        "Example": 197,
        "Generated Java Code": "```java\npublic void navigateToAttribute() {\n        path.push(currentLevel);\n        currentLevel = children.get(0);\n        children = currentLevel.children;\n        type = Level.AttrLevel;\n    }\n```"
    },
    {
        "Example": 198,
        "Generated Java Code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Utility to resolve content-type values based on heuristics.\n *\n * <p>\n * If the specified message is an instance of ContentTypeResolver.ResolvableContentType, the\n * `getContentType()` method will be invoked to attempt to determine the content-type. Otherwise, this\n * will attempt to match the message content to one of the registered rules.\n */\npublic final class ContentTypeResolver {\n  private static final List<ContentTypeRule> DEFAULT_RULES =\n      List.of(\n          new TextContentTypeRule(),\n          new ImageContentTypeRule(),\n          new BinaryContentTypeRule(),\n          new ApplicationJsonContentTypeRule());\n\n  /** Concurrent map to cache results by message. */\n  private static final ConcurrentHashMap<String, String> cache = new ConcurrentHashMap<>();\n\n  /** Default property name used to pull the default content-type for new messages. */\n  private static String defaultContentTypeProperty = \"defaultContentType\";\n\n  /**\n   * Register additional rules to be applied when resolving the content-type of a message.\n   *\n   * <p>\n   * Rules are applied in the order they are registered. The first rule to match the message will be\n   * used to resolve the content-type.\n   *\n   * @param rule The content-type rule to register.\n   */\n  public static void addRule(final ContentTypeRule rule) {\n    DEFAULT_RULES.add(rule);\n  }\n\n  /**\n   * Get the default property name used to pull the default content-type for new messages.\n   *\n   * @return The default property name.\n   */\n  public static String getDefaultContentTypeProperty() {\n    return defaultContentTypeProperty;\n  }\n\n  /**\n   * Set the default property name used to pull the default content-type for new messages.\n   *\n   * @param defaultContentTypeProperty The default property name.\n   */\n  public static void setDefaultContentTypeProperty(final String defaultContentTypeProperty) {\n    ContentTypeResolver.defaultContentTypeProperty = defaultContentTypeProperty;\n  }\n\n  /** Interface for content-type resolvers. */\n  public interface ResolvableContentType {\n    /** Return the content-type of the message. */\n    String getContentType();\n  }\n\n  /**\n   * Resolves the content-type for a given message using a series of registered rules.\n   *\n   * @param message The message to resolve the content-type for.\n   * @return The resolved content-type.\n   */\n  public static String resolveContentType(final Object message) {\n    if (message instanceof ResolvableContentType) {\n      return ((ResolvableContentType) message).getContentType();\n    }\n    String value = cache.get(message);\n    if (value != null) {\n      return value;\n    }\n\n    value = resolveInternal(message);\n    cache.put(message.toString(), value);\n    return value;\n  }\n\n  private static String resolveInternal(final Object message) {\n    String contentType = null;\n    for (ContentTypeRule rule : DEFAULT_RULES) {\n      if (rule.test(message)) {\n        contentType = rule.getContentType();\n        break;\n      }\n    }\n\n    return contentType;\n  }\n\n  /**\n   * Rule interface used to determine if a given message should receive a particular content-type.\n   */\n  public interface ContentTypeRule {\n    /** Return true if the rule applies to the given message. */\n    boolean test(Object message);\n\n    /** Return the content-type to apply if the rule applies. */\n    String getContentType();\n  }\n\n  /** Rule to set the content-type to text/plain. */\n  private static final class TextContentTypeRule implements ContentTypeRule {\n    @Override\n    public boolean test(final Object message) {\n      return message instanceof String;\n    }\n\n    @Override\n    public String getContentType() {\n      return \"text/plain\";\n    }\n  }\n\n  /** Rule to set the content-type to image/jpeg. */\n  private static final class ImageContentTypeRule implements ContentTypeRule {\n    private static final List<String> IMAGE_EXTENSIONS =\n        List.of(\"gif\", \"jpg\", \"jpeg\", \"bmp\", \"png\", \"svg\");\n\n    @Override\n    public boolean test(final Object message) {\n      return message instanceof String && IMAGE_EXTENSIONS.stream()\n          .anyMatch(((String) message)::endsWith);\n    }\n\n    @Override\n    public String getContentType() {\n      return \"image/jpeg\";\n    }\n  }\n\n  /** Rule to set the content-type to application/octet-stream. */\n  private static final class BinaryContentTypeRule implements ContentTypeRule {\n    @Override\n    public boolean test(final Object message) {\n      return message instanceof byte[];\n    }\n\n    @Override\n    public String getContentType() {\n      return \"application/octet-stream\";\n    }\n  }\n\n  /** Rule to set the content-type to application/json. */\n  private static final class ApplicationJsonContentTypeRule implements ContentTypeRule {\n    @Override\n    public boolean test(final Object message) {\n      return message instanceof String && ((String) message).startsWith(\"{\");\n    }\n\n    @Override\n    public String getContentType() {\n      return \"application/json\";\n    }\n  }\n\n  /** Utilities for working with content types. */\n  public static final class ContentTypes {\n    /** Check if the given content-type is a MIME multipart content-type. */\n    public static boolean isMultipart(final String contentType) {\n      return contentType != null && contentType.startsWith(\"multipart/\");\n    }\n\n    /** Check if the given content-type is a JSON content-type. */\n    public static boolean isJson(final String contentType) {\n      return contentType != null && contentType.startsWith(\"application/json\");\n    }\n\n    /** Check if the given content-type is a binary content-type. */\n    public static boolean isBinary(final String contentType) {\n      return contentType != null\n          && (contentType.startsWith(\"application/\") || isMultipart(contentType));\n    }\n\n    /**\n     * Get the default content-type header of the given message.\n     *\n     * @param message The message to get the default content-type header of.\n     * @return The default content-type header.\n     */\n    public static String getDefaultContentType(final Object message) {\n      String contentType = null;\n      if (message instanceof Message) {\n        contentType = ((Message) message).getDefaultContentType();\n      }\n      if (contentType == null) {\n        contentType = resolveContentType(message);\n      }\n      return contentType;\n    }\n  }\n\n  private ContentTypeResolver() {\n  }\n}\n```"
    },
    {
        "Example": 199,
        "Generated Java Code": "```java\nimport com.google.api.ads.admanager.axis.v202202.GetOfferDetailsResponse;\nimport com.google.api.ads.admanager.axis.v202202.Geo;\nimport com.google.api.ads.admanager.axis.v202202.Offer;\nimport com.google.api.ads.admanager.axis.v202202.OfferData;\nimport com.google.api.ads.admanager.axis.v202202.OfferImage;\nimport com.google.api.ads.admanager.axis.v202202.OfferImageEntry;\nimport com.google.api.ads.admanager.axis.v202202.Product;\nimport com.google.api.ads.admanager.axis.v202202.RedemptionAddress;\nimport com.google.api.ads.admanager.axis.v202202.Region;\nimport com.google.api.ads.admanager.axis.v202202.Size;\n\n/**\n * This example gets the specified offer. Offer details should only be requested by the offer's\n * owner. To determine which offers exist, run the GetAllOffers example.\n *\n * <p>Credentials and properties in {@code admanager_api.properties} are used to create a\n * com.google.api.ads.admanager.axis.v202202.AdManagerServiceClient instance.\n *\n * @param offerId the ID of the offer to retrieve\n */\npublic class GetOfferDetails {\n\n  public static void runExample(long offerId) throws Exception {\n    // Generate a refreshable OAuth2 credential.\n    GoogleCredentials credential =\n        GoogleCredentials.getApplicationDefault()\n            .createScoped(Collections.singleton(AdManagerScopes.AD_MANAGER));\n    // Construct a com.google.api.ads.admanager.axis.v202202.AdManagerServiceClient instance.\n    AdManagerServiceClient client =\n        new AdManagerServiceClient.Builder().setHttpRequestInitializer(credential).build();\n\n    // Get the offer.\n    OfferData offerDetails = client.getOfferDetailsService().getOfferDetails(offerId);\n\n    // Display the offer details.\n    System.out.printf(\"Offer ID: %s%n\", offerDetails.getId());\n    System.out.printf(\"Offer name: %s%n\", offerDetails.getName());\n    System.out.printf(\"Start date time: %s%n\", offerDetails.getStartTime());\n    System.out.printf(\"End date time: %s%n\", offerDetails.getEndTime());\n    System.out.printf(\"Advertiser: %s%n\", offerDetails.getAdvertiserId());\n    System.out.printf(\"Total slots: %s%n\", offerDetails.getTotalSlots());\n    System.out.printf(\"Deal ID: %s%n\", offerDetails.getDealId());\n\n    // Display the offer's display information.\n    Offer offer = offerDetails.getOffer();\n    System.out.printf(\"Offer description: %s%n\", offer.getDescription());\n    System.out.printf(\"Offer terms: %s%n\", offer.getTerms());\n    System.out.printf(\"Offer deal: %s%n\", offer.getDeal());\n    System.out.printf(\"Offer URL: %s%n\", offer.getUrl());\n\n    // Display the offer's source geographic targets.\n    System.out.println(\"Source geographic targets:\");\n    for (Geo geo : offerDetails.getSourceGeos()) {\n      System.out.printf(\"%s : \", geo.getCountry());\n      if (geo.getRegion() != null) {\n        System.out.printf(\"%s : \", geo.getRegion());\n      }\n      if (geo.getCity() != null) {\n        System.out.printf(\"%s : \", geo.getCity());\n      }\n      System.out.println();\n    }\n\n    // Display the offer's target geographic targets.\n    System.out.println(\"Target geographic targets:\");\n    for (Geo geo : offerDetails.getTargetGeos()) {\n      System.out.printf(\"%s : \", geo.getCountry());\n      if (geo.getRegion() != null) {\n        System.out.printf(\"%s : \", geo.getRegion());\n      }\n      if (geo.getCity() != null) {\n        System.out.printf(\"%s : \", geo.getCity());\n      }\n      System.out.println();\n    }\n\n    // Display the offer's merchant information.\n    System.out.println(\"Merchant:\");\n    System.out.printf(\n        \"%s, %s, %s, %s, %s%n\",\n        offerDetails.getMerchant().getName(),\n        offerDetails.getMerchant().getPhone(),\n        offerDetails.getMerchant().getEmail(),\n        offerDetails.getMerchant().getSiteUrl(),\n        offerDetails.getMerchant().getLogoUrl());\n\n    // Display the offer's address information.\n    for (Address address : offerDetails.getMerchant().getAddresses()) {\n      System.out.printf(\n          \"%s, %s, %s, %s%n\",\n          address.getAddress(),\n          address.getAddress2(),\n          address.getCity(),\n          address.getCountry());\n    }\n\n    // Display the offer's redemption addresses.\n    for (RedemptionAddress rAddress : offerDetails.getRedemptionAddresses()) {\n      System.out.printf(\n          \"%s, %s, %s, %s%n\",\n          rAddress.getName(),\n          rAddress.getAddress(),\n          rAddress.getCity(),\n          rAddress.getState());\n    }\n\n    // Display the offer's media.\n    for (OfferImage image : offerDetails.getOfferMedia().getOfferImages()) {\n      System.out.println(\"Offer image:\");\n      for (OfferImageEntry entry : image.getEntries()) {\n        Size size = entry.getSize();\n        System.out.printf(\"  Image size: %sx%s%n\", size.getWidth(), size.getHeight());\n        System.out.printf(\"  Image URL: %s%n\", entry.getValue().getUrl());\n      }\n    }\n\n    // Display the offer's products.\n    for (Product product : offerDetails.getProducts()) {\n      System.out.println(\"Product:\");\n      System.out.printf(\"  Name: %s%n\", product.getName());\n      System.out.printf(\"  Description: %s%n\", product.getDescription());\n      System.out.printf(\"  Image URL: %s%n\", product.getImageUrl());\n      System.out.printf(\"  Link: %s%n\", product.getLink());\n      System.out.printf(\"  Price: %s%n\", product.getPrice());\n    }\n\n    System.out.println(\"Marketplace offer service status:\");\n    System.out.printf(\n        \"  %s%n\",\n        offerDetails.getServiceCompatibility().getMarketplaceEnabled()\n            ? \"Enabled\"\n            : \"Disabled\");\n  }\n}\n```"
    },
    {
        "Example": 200,
        "Generated Java Code": "```java\n// ItemList.java\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ItemList<T> implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private List<T> items = new ArrayList<>();\n    private ResponseStatus status = ResponseStatus.OK;\n\n    public List<T> getItems() {\n        return items;\n    }\n\n    public void setItems(List<T> items) {\n        this.items = items;\n    }\n\n    public ResponseStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(ResponseStatus status) {\n        this.status = status;\n    }\n\n    @Override\n    public String toString() {\n        return \"ItemList{\" +\n                \"items=\" + items +\n                \", status=\" + status +\n                '}';\n    }\n}\n// ResponseStatus.java\npublic enum ResponseStatus {\n    OK,\n    ERROR\n}\n```"
    }
]